
stm32f429_kpvc_m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f6c  08005f6c  000203dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f74  08005f74  000203dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  08005f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203dc  2**0
                  CONTENTS
 10 .bss          00001ae0  200003e0  200003e0  000203e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001ec0  20001ec0  000203e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022a19  00000000  00000000  0002044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a75  00000000  00000000  00042e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000ad3f  00000000  00000000  000488dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f00  00000000  00000000  00053620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001481  00000000  00000000  00054520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027dae  00000000  00000000  000559a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022ee5  00000000  00000000  0007d74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000dbd6c  00000000  00000000  000a0634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000028f4  00000000  00000000  0017c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  0017ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003e0 	.word	0x200003e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e38 	.word	0x08005e38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003e4 	.word	0x200003e4
 80001ec:	08005e38 	.word	0x08005e38

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8000510:	680b      	ldr	r3, [r1, #0]
{
 8000512:	b430      	push	{r4, r5}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8000514:	b9d3      	cbnz	r3, 800054c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8000516:	6803      	ldr	r3, [r0, #0]
 8000518:	684c      	ldr	r4, [r1, #4]
 800051a:	688a      	ldr	r2, [r1, #8]
 800051c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000524:	4323      	orrs	r3, r4
 8000526:	4313      	orrs	r3, r2
 8000528:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800052c:	4323      	orrs	r3, r4
 800052e:	4313      	orrs	r3, r2
 8000530:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8000534:	4323      	orrs	r3, r4
 8000536:	e9d1 5407 	ldrd	r5, r4, [r1, #28]
 800053a:	4313      	orrs	r3, r2
 800053c:	432b      	orrs	r3, r5
 800053e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000540:	4323      	orrs	r3, r4
 8000542:	4313      	orrs	r3, r2
 8000544:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8000546:	bc30      	pop	{r4, r5}
 8000548:	2000      	movs	r0, #0
 800054a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800054c:	e9d1 4207 	ldrd	r4, r2, [r1, #28]
 8000550:	6803      	ldr	r3, [r0, #0]
 8000552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000556:	4323      	orrs	r3, r4
 8000558:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800055a:	4313      	orrs	r3, r2
 800055c:	4323      	orrs	r3, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800055e:	684a      	ldr	r2, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8000560:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8000562:	6843      	ldr	r3, [r0, #4]
 8000564:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800056c:	4313      	orrs	r3, r2
 800056e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8000572:	4323      	orrs	r3, r4
 8000574:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8000578:	4313      	orrs	r3, r2
 800057a:	432b      	orrs	r3, r5
 800057c:	698a      	ldr	r2, [r1, #24]
 800057e:	4323      	orrs	r3, r4
 8000580:	4313      	orrs	r3, r2
 8000582:	6043      	str	r3, [r0, #4]
}
 8000584:	bc30      	pop	{r4, r5}
 8000586:	2000      	movs	r0, #0
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800058c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800058e:	6883      	ldr	r3, [r0, #8]
  if (Bank == FMC_SDRAM_BANK1)
 8000590:	bb02      	cbnz	r2, 80005d4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8000592:	e9d1 2400 	ldrd	r2, r4, [r1]
 8000596:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800059a:	3c01      	subs	r4, #1
 800059c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80005a0:	3a01      	subs	r2, #1
 80005a2:	4313      	orrs	r3, r2
 80005a4:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80005a8:	3c01      	subs	r4, #1
 80005aa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80005ae:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 80005b2:	3a01      	subs	r2, #1
 80005b4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80005b8:	698a      	ldr	r2, [r1, #24]
 80005ba:	1e69      	subs	r1, r5, #1
 80005bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c0:	1e61      	subs	r1, r4, #1
 80005c2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80005c6:	3a01      	subs	r2, #1
 80005c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80005cc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80005ce:	bc30      	pop	{r4, r5}
 80005d0:	2000      	movs	r0, #0
 80005d2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80005d4:	68cc      	ldr	r4, [r1, #12]
 80005d6:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80005d8:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80005da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80005de:	3c01      	subs	r4, #1
 80005e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80005e4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80005e8:	3a01      	subs	r2, #1
 80005ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80005ee:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80005f0:	e9d1 2400 	ldrd	r2, r4, [r1]
 80005f4:	68c3      	ldr	r3, [r0, #12]
 80005f6:	3c01      	subs	r4, #1
 80005f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80005fc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8000600:	3a01      	subs	r2, #1
 8000602:	690c      	ldr	r4, [r1, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	698a      	ldr	r2, [r1, #24]
 8000608:	1e69      	subs	r1, r5, #1
 800060a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800060e:	1e61      	subs	r1, r4, #1
 8000610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000614:	3a01      	subs	r2, #1
 8000616:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800061a:	60c3      	str	r3, [r0, #12]
}
 800061c:	bc30      	pop	{r4, r5}
 800061e:	2000      	movs	r0, #0
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8000624:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000626:	680b      	ldr	r3, [r1, #0]
{
 8000628:	4615      	mov	r5, r2
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800062a:	684a      	ldr	r2, [r1, #4]
{
 800062c:	4604      	mov	r4, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800062e:	4313      	orrs	r3, r2
 8000630:	6900      	ldr	r0, [r0, #16]
 8000632:	68ca      	ldr	r2, [r1, #12]
 8000634:	0d80      	lsrs	r0, r0, #22
 8000636:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800063a:	688a      	ldr	r2, [r1, #8]
 800063c:	0580      	lsls	r0, r0, #22
 800063e:	4303      	orrs	r3, r0
 8000640:	3a01      	subs	r2, #1
 8000642:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000646:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8000648:	f000 f86c 	bl	8000724 <HAL_GetTick>
 800064c:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800064e:	1c6b      	adds	r3, r5, #1
 8000650:	d105      	bne.n	800065e <FMC_SDRAM_SendCommand+0x3a>
 8000652:	69a3      	ldr	r3, [r4, #24]
 8000654:	f013 0320 	ands.w	r3, r3, #32
 8000658:	d1fb      	bne.n	8000652 <FMC_SDRAM_SendCommand+0x2e>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800065a:	4618      	mov	r0, r3
}
 800065c:	bd70      	pop	{r4, r5, r6, pc}
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800065e:	69a3      	ldr	r3, [r4, #24]
 8000660:	f013 0320 	ands.w	r3, r3, #32
 8000664:	d0f9      	beq.n	800065a <FMC_SDRAM_SendCommand+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000666:	b125      	cbz	r5, 8000672 <FMC_SDRAM_SendCommand+0x4e>
 8000668:	f000 f85c 	bl	8000724 <HAL_GetTick>
 800066c:	1b80      	subs	r0, r0, r6
 800066e:	42a8      	cmp	r0, r5
 8000670:	d9ed      	bls.n	800064e <FMC_SDRAM_SendCommand+0x2a>
        return HAL_TIMEOUT;
 8000672:	2003      	movs	r0, #3
}
 8000674:	bd70      	pop	{r4, r5, r6, pc}
 8000676:	bf00      	nop

08000678 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8000678:	6943      	ldr	r3, [r0, #20]
 800067a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
{
 800067e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8000680:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8000684:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

  return HAL_OK;
}
 8000688:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800068a:	6151      	str	r1, [r2, #20]
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_InitTick+0x3c>)
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_InitTick+0x40>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
{
 800069a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80006a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80006a8:	f000 f8b2 	bl	8000810 <HAL_SYSTICK_Config>
 80006ac:	b908      	cbnz	r0, 80006b2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	2d0f      	cmp	r5, #15
 80006b0:	d901      	bls.n	80006b6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80006b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006b4:	bd38      	pop	{r3, r4, r5, pc}
 80006b6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	4602      	mov	r2, r0
 80006ba:	4629      	mov	r1, r5
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f85a 	bl	8000778 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_InitTick+0x44>)
 80006c6:	4620      	mov	r0, r4
 80006c8:	601d      	str	r5, [r3, #0]
}
 80006ca:	bd38      	pop	{r3, r4, r5, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200003d8 	.word	0x200003d8
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_Init>:
{
 80006d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <HAL_Init+0x30>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f82d 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f7ff ffc8 	bl	8000690 <HAL_InitTick>
  HAL_MspInit();
 8000700:	f005 fa76 	bl	8005bf0 <HAL_MspInit>
}
 8000704:	2000      	movs	r0, #0
 8000706:	bd08      	pop	{r3, pc}
 8000708:	40023c00 	.word	0x40023c00

0800070c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <HAL_IncTick+0x10>)
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <HAL_IncTick+0x14>)
 8000710:	6811      	ldr	r1, [r2, #0]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	440b      	add	r3, r1
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200003fc 	.word	0x200003fc
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <HAL_GetTick+0x8>)
 8000726:	6818      	ldr	r0, [r3, #0]
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200003fc 	.word	0x200003fc

08000730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000730:	b538      	push	{r3, r4, r5, lr}
 8000732:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000734:	f7ff fff6 	bl	8000724 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000738:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800073a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800073c:	d002      	beq.n	8000744 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <HAL_Delay+0x20>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000744:	f7ff ffee 	bl	8000724 <HAL_GetTick>
 8000748:	1b43      	subs	r3, r0, r5
 800074a:	42a3      	cmp	r3, r4
 800074c:	d3fa      	bcc.n	8000744 <HAL_Delay+0x14>
  {
  }
}
 800074e:	bd38      	pop	{r3, r4, r5, pc}
 8000750:	20000000 	.word	0x20000000

08000754 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000756:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800075e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000766:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800076e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_NVIC_SetPriority+0x74>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000780:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000782:	f1c3 0e07 	rsb	lr, r3, #7
 8000786:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078e:	bf28      	it	cs
 8000790:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000794:	f1bc 0f06 	cmp.w	ip, #6
 8000798:	d91b      	bls.n	80007d2 <HAL_NVIC_SetPriority+0x5a>
 800079a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 3cff 	mov.w	ip, #4294967295
 80007a0:	fa0c fc03 	lsl.w	ip, ip, r3
 80007a4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 3cff 	mov.w	ip, #4294967295
 80007ac:	fa0c fc0e 	lsl.w	ip, ip, lr
 80007b0:	ea21 010c 	bic.w	r1, r1, ip
 80007b4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80007b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80007bc:	db0c      	blt.n	80007d8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80007c2:	0109      	lsls	r1, r1, #4
 80007c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80007c8:	b2c9      	uxtb	r1, r1
 80007ca:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80007d2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d4:	4613      	mov	r3, r2
 80007d6:	e7e7      	b.n	80007a8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_NVIC_SetPriority+0x78>)
 80007da:	f000 000f 	and.w	r0, r0, #15
 80007de:	0109      	lsls	r1, r1, #4
 80007e0:	4403      	add	r3, r0
 80007e2:	b2c9      	uxtb	r1, r1
 80007e4:	7619      	strb	r1, [r3, #24]
 80007e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	e000ecfc 	.word	0xe000ecfc

080007f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007f4:	2800      	cmp	r0, #0
 80007f6:	db07      	blt.n	8000808 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f8:	0941      	lsrs	r1, r0, #5
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_NVIC_EnableIRQ+0x18>)
 80007fc:	f000 001f 	and.w	r0, r0, #31
 8000800:	2301      	movs	r3, #1
 8000802:	4083      	lsls	r3, r0
 8000804:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	3801      	subs	r0, #1
 8000812:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000816:	d210      	bcs.n	800083a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000818:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	4c08      	ldr	r4, [pc, #32]	; (8000840 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000820:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8000826:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000832:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	6119      	str	r1, [r3, #16]
 8000838:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2001      	movs	r0, #1
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000844:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000846:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  if(hdcmi->XferCount != 0U)
 8000848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800084a:	b173      	cbz	r3, 800086a <DCMI_DMAXferCplt+0x26>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800084c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800084e:	6803      	ldr	r3, [r0, #0]
 8000850:	6819      	ldr	r1, [r3, #0]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000854:	f012 0201 	ands.w	r2, r2, #1
 8000858:	d01e      	beq.n	8000898 <DCMI_DMAXferCplt+0x54>
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
      hdcmi->XferCount--;
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	0312      	lsls	r2, r2, #12
 800085e:	d533      	bpl.n	80008c8 <DCMI_DMAXferCplt+0x84>
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
  {
    tmp = hdcmi->pBuffPtr;
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8000860:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000862:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000864:	429a      	cmp	r2, r3
 8000866:	d00b      	beq.n	8000880 <DCMI_DMAXferCplt+0x3c>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
    }
  }
}
 8000868:	bd10      	pop	{r4, pc}
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800086a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	6813      	ldr	r3, [r2, #0]
 8000870:	0318      	lsls	r0, r3, #12
 8000872:	d51e      	bpl.n	80008b2 <DCMI_DMAXferCplt+0x6e>
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8000874:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8000878:	60d1      	str	r1, [r2, #12]
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800087a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800087c:	429a      	cmp	r2, r3
 800087e:	d1f3      	bne.n	8000868 <DCMI_DMAXferCplt+0x24>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	f042 0201 	orr.w	r2, r2, #1
 8000888:	60da      	str	r2, [r3, #12]
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	079b      	lsls	r3, r3, #30
      hdcmi->State= HAL_DCMI_STATE_READY;
 800088e:	bf44      	itt	mi
 8000890:	2301      	movmi	r3, #1
 8000892:	f884 3025 	strbmi.w	r3, [r4, #37]	; 0x25
}
 8000896:	bd10      	pop	{r4, pc}
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000898:	0309      	lsls	r1, r1, #12
 800089a:	d5de      	bpl.n	800085a <DCMI_DMAXferCplt+0x16>
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800089c:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800089e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80008a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80008a4:	f000 fd80 	bl	80013a8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80008a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80008aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hdcmi->XferCount--;
 80008ac:	3a01      	subs	r2, #1
 80008ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80008b0:	e7d7      	b.n	8000862 <DCMI_DMAXferCplt+0x1e>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	0319      	lsls	r1, r3, #12
 80008b6:	d4d3      	bmi.n	8000860 <DCMI_DMAXferCplt+0x1c>
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80008b8:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80008bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80008be:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80008c2:	6111      	str	r1, [r2, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80008c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80008c6:	e7cc      	b.n	8000862 <DCMI_DMAXferCplt+0x1e>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80008c8:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80008ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008cc:	2201      	movs	r2, #1
 80008ce:	e7e7      	b.n	80008a0 <DCMI_DMAXferCplt+0x5c>

080008d0 <HAL_DCMI_Init>:
  if(hdcmi == NULL)
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d036      	beq.n	8000942 <HAL_DCMI_Init+0x72>
{
 80008d4:	b538      	push	{r3, r4, r5, lr}
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80008d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80008da:	4604      	mov	r4, r0
 80008dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008e0:	b33b      	cbz	r3, 8000932 <HAL_DCMI_Init+0x62>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80008e8:	6860      	ldr	r0, [r4, #4]
 80008ea:	6963      	ldr	r3, [r4, #20]
 80008ec:	68e5      	ldr	r5, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80008ee:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80008f0:	4303      	orrs	r3, r0
 80008f2:	432b      	orrs	r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80008f4:	6925      	ldr	r5, [r4, #16]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80008f6:	6811      	ldr	r1, [r2, #0]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80008f8:	432b      	orrs	r3, r5
 80008fa:	68a5      	ldr	r5, [r4, #8]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80008fc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000900:	432b      	orrs	r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000902:	69a5      	ldr	r5, [r4, #24]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000904:	f021 0108 	bic.w	r1, r1, #8
 8000908:	6011      	str	r1, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800090a:	432b      	orrs	r3, r5
 800090c:	6a25      	ldr	r5, [r4, #32]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800090e:	6811      	ldr	r1, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000910:	432b      	orrs	r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000912:	430b      	orrs	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000916:	2810      	cmp	r0, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000918:	bf04      	itt	eq
 800091a:	69e3      	ldreq	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800091c:	6193      	streq	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE);		//DCMI_IT_VSYNC DCMI_IT_OVR  DCMI_IT_ERR
 800091e:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000920:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE);		//DCMI_IT_VSYNC DCMI_IT_OVR  DCMI_IT_ERR
 8000922:	f043 0310 	orr.w	r3, r3, #16
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000926:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE);		//DCMI_IT_VSYNC DCMI_IT_OVR  DCMI_IT_ERR
 8000928:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800092a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800092c:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
}
 8000930:	bd38      	pop	{r3, r4, r5, pc}
    hdcmi->Lock = HAL_UNLOCKED;
 8000932:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    HAL_DCMI_MspInit(hdcmi);
 8000936:	f004 fe11 	bl	800555c <HAL_DCMI_MspInit>
    HAL_DCMI_MspInit(hdcmi);
 800093a:	4620      	mov	r0, r4
 800093c:	f004 fe0e 	bl	800555c <HAL_DCMI_MspInit>
 8000940:	e7cf      	b.n	80008e2 <HAL_DCMI_Init+0x12>
     return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <HAL_DCMI_Start_DMA>:
{
 8000948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094c:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800094e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8000952:	2801      	cmp	r0, #1
{
 8000954:	b082      	sub	sp, #8
  __HAL_LOCK(hdcmi);
 8000956:	d058      	beq.n	8000a0a <HAL_DCMI_Start_DMA+0xc2>
  __HAL_DCMI_ENABLE(hdcmi);
 8000958:	6825      	ldr	r5, [r4, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800095a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8000a14 <HAL_DCMI_Start_DMA+0xcc>
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800095e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000a18 <HAL_DCMI_Start_DMA+0xd0>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000962:	2002      	movs	r0, #2
  __HAL_LOCK(hdcmi);
 8000964:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000968:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_LOCK(hdcmi);
 800096c:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
  __HAL_DCMI_ENABLE(hdcmi);
 8000970:	6828      	ldr	r0, [r5, #0]
 8000972:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8000976:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8000978:	6828      	ldr	r0, [r5, #0]
 800097a:	f020 0002 	bic.w	r0, r0, #2
 800097e:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8000980:	6828      	ldr	r0, [r5, #0]
 8000982:	4301      	orrs	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8000984:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8000986:	6029      	str	r1, [r5, #0]
  if(Length <= 0xFFFFU)
 8000988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8000992:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000996:	f8c0 804c 	str.w	r8, [r0, #76]	; 0x4c
  hdcmi->XferCount = 0U;
 800099a:	62a1      	str	r1, [r4, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800099c:	6321      	str	r1, [r4, #48]	; 0x30
  if(Length <= 0xFFFFU)
 800099e:	d32f      	bcc.n	8000a00 <HAL_DCMI_Start_DMA+0xb8>
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80009a0:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
    hdcmi->XferCount = 1U;
 80009a4:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
    hdcmi->XferSize = Length;
 80009a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    while(hdcmi->XferSize > 0xFFFFU)
 80009aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80009ac:	6362      	str	r2, [r4, #52]	; 0x34
    while(hdcmi->XferSize > 0xFFFFU)
 80009ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b2:	4616      	mov	r6, r2
 80009b4:	d309      	bcc.n	80009ca <HAL_DCMI_Start_DMA+0x82>
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80009b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	62e3      	str	r3, [r4, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80009bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	62a3      	str	r3, [r4, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80009c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c8:	d2f5      	bcs.n	80009b6 <HAL_DCMI_Start_DMA+0x6e>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80009ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009cc:	3b02      	subs	r3, #2
 80009ce:	62a3      	str	r3, [r4, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80009d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009d2:	6323      	str	r3, [r4, #48]	; 0x30
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80009d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80009d6:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80009da:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80009dc:	9500      	str	r5, [sp, #0]
 80009de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80009e2:	4632      	mov	r2, r6
 80009e4:	f000 faa2 	bl	8000f2c <HAL_DMAEx_MultiBufferStart_IT>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009e8:	6821      	ldr	r1, [r4, #0]
 80009ea:	680b      	ldr	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 80009ec:	2200      	movs	r2, #0
  return HAL_OK;
 80009ee:	4610      	mov	r0, r2
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 80009f6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 80009fa:	b002      	add	sp, #8
 80009fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8000a00:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8000a04:	f000 f920 	bl	8000c48 <HAL_DMA_Start_IT>
 8000a08:	e7ee      	b.n	80009e8 <HAL_DCMI_Start_DMA+0xa0>
  __HAL_LOCK(hdcmi);
 8000a0a:	2002      	movs	r0, #2
}
 8000a0c:	b002      	add	sp, #8
 8000a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a12:	bf00      	nop
 8000a14:	08000845 	.word	0x08000845
 8000a18:	08000a21 	.word	0x08000a21

08000a1c <HAL_DCMI_ErrorCallback>:
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a20:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000a22:	b508      	push	{r3, lr}
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000a24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a28:	2b02      	cmp	r3, #2
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000a2a:	bf1c      	itt	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	f880 3025 	strbne.w	r3, [r0, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8000a32:	f7ff fff3 	bl	8000a1c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8000a36:	bd08      	pop	{r3, pc}

08000a38 <HAL_DCMI_VsyncEventCallback>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <HAL_DCMI_FrameEventCallback>:
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <HAL_DCMI_IRQHandler>:
{
 8000a40:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000a42:	6803      	ldr	r3, [r0, #0]
 8000a44:	691d      	ldr	r5, [r3, #16]
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000a46:	0769      	lsls	r1, r5, #29
{
 8000a48:	4604      	mov	r4, r0
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000a4a:	d435      	bmi.n	8000ab8 <HAL_DCMI_IRQHandler+0x78>
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000a4c:	07aa      	lsls	r2, r5, #30
 8000a4e:	d423      	bmi.n	8000a98 <HAL_DCMI_IRQHandler+0x58>
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000a50:	06eb      	lsls	r3, r5, #27
 8000a52:	d41a      	bmi.n	8000a8a <HAL_DCMI_IRQHandler+0x4a>
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000a54:	0728      	lsls	r0, r5, #28
 8000a56:	d411      	bmi.n	8000a7c <HAL_DCMI_IRQHandler+0x3c>
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8000a58:	07e9      	lsls	r1, r5, #31
 8000a5a:	d50e      	bpl.n	8000a7a <HAL_DCMI_IRQHandler+0x3a>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	0792      	lsls	r2, r2, #30
 8000a62:	d503      	bpl.n	8000a6c <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	f022 021e 	bic.w	r2, r2, #30
 8000a6a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a72:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a74:	60da      	str	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a76:	f7ff ffe1 	bl	8000a3c <HAL_DCMI_FrameEventCallback>
}
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	2208      	movs	r2, #8
 8000a80:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a82:	4620      	mov	r0, r4
 8000a84:	f7ff ffd8 	bl	8000a38 <HAL_DCMI_VsyncEventCallback>
 8000a88:	e7e6      	b.n	8000a58 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a90:	4620      	mov	r0, r4
 8000a92:	f004 fc97 	bl	80053c4 <HAL_DCMI_LineEventCallback>
 8000a96:	e7dd      	b.n	8000a54 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a98:	6823      	ldr	r3, [r4, #0]
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_DCMI_IRQHandler+0xa0>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000aa8:	2104      	movs	r1, #4
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000aaa:	63e3      	str	r3, [r4, #60]	; 0x3c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000aac:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000ab0:	6502      	str	r2, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000ab2:	f000 f953 	bl	8000d5c <HAL_DMA_Abort_IT>
 8000ab6:	e7cb      	b.n	8000a50 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000ab8:	2204      	movs	r2, #4
 8000aba:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000abc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000abe:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000ac6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    GPIOA->ODR ^= (1<<7);
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_DCMI_IRQHandler+0xa4>)
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_DCMI_IRQHandler+0xa0>)
 8000ace:	6503      	str	r3, [r0, #80]	; 0x50
    GPIOA->ODR ^= (1<<7);
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000ad6:	6153      	str	r3, [r2, #20]
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000ad8:	f000 f940 	bl	8000d5c <HAL_DMA_Abort_IT>
 8000adc:	e7b6      	b.n	8000a4c <HAL_DCMI_IRQHandler+0xc>
 8000ade:	bf00      	nop
 8000ae0:	08000a21 	.word	0x08000a21
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_DCMI_ConfigSyncUnmask>:
  __HAL_LOCK(hdcmi);
 8000ae8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d010      	beq.n	8000b12 <HAL_DCMI_ConfigSyncUnmask+0x2a>
{
 8000af0:	b410      	push	{r4}
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) |\
 8000af8:	6804      	ldr	r4, [r0, #0]
                           ((uint32_t)SyncUnmask->LineEndUnmask << DCMI_ESUR_LEU_Pos)|\
 8000afa:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance->ESUR = (((uint32_t)SyncUnmask->FrameStartUnmask) |\
 8000afc:	61e1      	str	r1, [r4, #28]
  __HAL_UNLOCK(hdcmi);
 8000afe:	2300      	movs	r3, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 8000b00:	2201      	movs	r2, #1
 8000b02:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdcmi);
 8000b06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8000b0e:	4618      	mov	r0, r3
}
 8000b10:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8000b12:	2002      	movs	r0, #2
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fe02 	bl	8000724 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d052      	beq.n	8000bca <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b24:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000b26:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b28:	2102      	movs	r1, #2
 8000b2a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000b2e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	4605      	mov	r5, r0
 8000b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b3c:	e005      	b.n	8000b4a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b3e:	f7ff fdf1 	bl	8000724 <HAL_GetTick>
 8000b42:	1b43      	subs	r3, r0, r5
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d839      	bhi.n	8000bbc <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	07d1      	lsls	r1, r2, #31
 8000b4e:	d4f6      	bmi.n	8000b3e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b50:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000b54:	68e1      	ldr	r1, [r4, #12]
 8000b56:	4302      	orrs	r2, r0
 8000b58:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b5a:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b60:	432a      	orrs	r2, r5
 8000b62:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b64:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8000b66:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b6c:	4933      	ldr	r1, [pc, #204]	; (8000c3c <HAL_DMA_Init+0x124>)
 8000b6e:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b70:	6a25      	ldr	r5, [r4, #32]
 8000b72:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b74:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b78:	2904      	cmp	r1, #4
 8000b7a:	d028      	beq.n	8000bce <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000b7c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000b7e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b80:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000b84:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8000b8a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b8c:	3810      	subs	r0, #16
 8000b8e:	fba2 5200 	umull	r5, r2, r2, r0
 8000b92:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b94:	492b      	ldr	r1, [pc, #172]	; (8000c44 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b9a:	5c89      	ldrb	r1, [r1, r2]
 8000b9c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b9e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8000ba2:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ba4:	bf88      	it	hi
 8000ba6:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ba8:	223f      	movs	r2, #63	; 0x3f
 8000baa:	408a      	lsls	r2, r1
 8000bac:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bae:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bb0:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000bc6:	4618      	mov	r0, r3
}
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000bca:	2001      	movs	r0, #1
}
 8000bcc:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000bce:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8000bd2:	4329      	orrs	r1, r5
 8000bd4:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8000bd6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000bd8:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8000bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000bdc:	f021 0107 	bic.w	r1, r1, #7
 8000be0:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8000be2:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0cd      	beq.n	8000b86 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000bea:	b178      	cbz	r0, 8000c0c <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bec:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bf0:	d016      	beq.n	8000c20 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bf2:	2a02      	cmp	r2, #2
 8000bf4:	d903      	bls.n	8000bfe <HAL_DMA_Init+0xe6>
 8000bf6:	2a03      	cmp	r2, #3
 8000bf8:	d1c5      	bne.n	8000b86 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bfa:	01ea      	lsls	r2, r5, #7
 8000bfc:	d5c3      	bpl.n	8000b86 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c00:	2240      	movs	r2, #64	; 0x40
 8000c02:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000c08:	4618      	mov	r0, r3
}
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8000c0c:	2a01      	cmp	r2, #1
 8000c0e:	d003      	beq.n	8000c18 <HAL_DMA_Init+0x100>
 8000c10:	f032 0202 	bics.w	r2, r2, #2
 8000c14:	d1b7      	bne.n	8000b86 <HAL_DMA_Init+0x6e>
 8000c16:	e7f0      	b.n	8000bfa <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c18:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000c1c:	d1b3      	bne.n	8000b86 <HAL_DMA_Init+0x6e>
 8000c1e:	e7ee      	b.n	8000bfe <HAL_DMA_Init+0xe6>
    switch (tmp)
 8000c20:	2a03      	cmp	r2, #3
 8000c22:	d8b0      	bhi.n	8000b86 <HAL_DMA_Init+0x6e>
 8000c24:	a001      	add	r0, pc, #4	; (adr r0, 8000c2c <HAL_DMA_Init+0x114>)
 8000c26:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000bff 	.word	0x08000bff
 8000c30:	08000bfb 	.word	0x08000bfb
 8000c34:	08000bff 	.word	0x08000bff
 8000c38:	08000c19 	.word	0x08000c19
 8000c3c:	f010803f 	.word	0xf010803f
 8000c40:	aaaaaaab 	.word	0xaaaaaaab
 8000c44:	08005e50 	.word	0x08005e50

08000c48 <HAL_DMA_Start_IT>:
{
 8000c48:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8000c4a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c4e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000c50:	2c01      	cmp	r4, #1
 8000c52:	d035      	beq.n	8000cc0 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c54:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8000c58:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c5c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8000c5e:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c62:	d005      	beq.n	8000c70 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000c64:	2300      	movs	r3, #0
 8000c66:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8000c6a:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8000c6c:	2002      	movs	r0, #2
}
 8000c6e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c70:	2602      	movs	r6, #2
 8000c72:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c76:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c78:	2600      	movs	r6, #0
 8000c7a:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c7c:	6826      	ldr	r6, [r4, #0]
 8000c7e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8000c82:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c84:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c86:	6883      	ldr	r3, [r0, #8]
 8000c88:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000c8a:	bf0e      	itee	eq
 8000c8c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000c8e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c90:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c92:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000c94:	bf08      	it	eq
 8000c96:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c98:	233f      	movs	r3, #63	; 0x3f
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c9e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ca0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ca2:	f043 0316 	orr.w	r3, r3, #22
 8000ca6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ca8:	b11a      	cbz	r2, 8000cb2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000cba:	6023      	str	r3, [r4, #0]
}
 8000cbc:	bc70      	pop	{r4, r5, r6}
 8000cbe:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000cc0:	2002      	movs	r0, #2
}
 8000cc2:	bc70      	pop	{r4, r5, r6}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <HAL_DMA_Abort>:
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ccc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000cce:	f7ff fd29 	bl	8000724 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d006      	beq.n	8000ce8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
}
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f022 0216 	bic.w	r2, r2, #22
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	b342      	cbz	r2, 8000d52 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f022 0208 	bic.w	r2, r2, #8
 8000d06:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d10:	e005      	b.n	8000d1e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d12:	f7ff fd07 	bl	8000724 <HAL_GetTick>
 8000d16:	1b43      	subs	r3, r0, r5
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d810      	bhi.n	8000d3e <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f013 0301 	ands.w	r3, r3, #1
 8000d24:	d1f5      	bne.n	8000d12 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d26:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d28:	223f      	movs	r2, #63	; 0x3f
 8000d2a:	408a      	lsls	r2, r1
  return HAL_OK;
 8000d2c:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8000d2e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8000d30:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d32:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000d34:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000d38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d40:	2220      	movs	r2, #32
 8000d42:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000d44:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d1d3      	bne.n	8000d00 <HAL_DMA_Abort+0x38>
 8000d58:	e7d6      	b.n	8000d08 <HAL_DMA_Abort+0x40>
 8000d5a:	bf00      	nop

08000d5c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d003      	beq.n	8000d6c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
 8000d6a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000d6c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8000d7a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DMA_IRQHandler>:
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d84:	4a67      	ldr	r2, [pc, #412]	; (8000f24 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d86:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d88:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d8e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000d90:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d92:	2208      	movs	r2, #8
 8000d94:	409a      	lsls	r2, r3
 8000d96:	422a      	tst	r2, r5
{
 8000d98:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d9a:	d003      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d9c:	6801      	ldr	r1, [r0, #0]
 8000d9e:	6808      	ldr	r0, [r1, #0]
 8000da0:	0740      	lsls	r0, r0, #29
 8000da2:	d478      	bmi.n	8000e96 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000da4:	2201      	movs	r2, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	422a      	tst	r2, r5
 8000daa:	d003      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000dac:	6821      	ldr	r1, [r4, #0]
 8000dae:	6949      	ldr	r1, [r1, #20]
 8000db0:	0608      	lsls	r0, r1, #24
 8000db2:	d46a      	bmi.n	8000e8a <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000db4:	2204      	movs	r2, #4
 8000db6:	409a      	lsls	r2, r3
 8000db8:	422a      	tst	r2, r5
 8000dba:	d003      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000dbc:	6821      	ldr	r1, [r4, #0]
 8000dbe:	6809      	ldr	r1, [r1, #0]
 8000dc0:	0789      	lsls	r1, r1, #30
 8000dc2:	d45c      	bmi.n	8000e7e <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	422a      	tst	r2, r5
 8000dca:	d003      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000dcc:	6821      	ldr	r1, [r4, #0]
 8000dce:	6808      	ldr	r0, [r1, #0]
 8000dd0:	0700      	lsls	r0, r0, #28
 8000dd2:	d441      	bmi.n	8000e58 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	422a      	tst	r2, r5
 8000dda:	d014      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000ddc:	6821      	ldr	r1, [r4, #0]
 8000dde:	6808      	ldr	r0, [r1, #0]
 8000de0:	06c0      	lsls	r0, r0, #27
 8000de2:	d510      	bpl.n	8000e06 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000de4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000de6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000dea:	2a05      	cmp	r2, #5
 8000dec:	d063      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000dee:	680b      	ldr	r3, [r1, #0]
 8000df0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000df4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000df6:	d07e      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000df8:	0319      	lsls	r1, r3, #12
 8000dfa:	f140 8089 	bpl.w	8000f10 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8000dfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e00:	b10b      	cbz	r3, 8000e06 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8000e02:	4620      	mov	r0, r4
 8000e04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e08:	b323      	cbz	r3, 8000e54 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e0c:	07da      	lsls	r2, r3, #31
 8000e0e:	d51a      	bpl.n	8000e46 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8000e10:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e12:	4945      	ldr	r1, [pc, #276]	; (8000f28 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e14:	2305      	movs	r3, #5
 8000e16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000e1a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e1c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8000e20:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e24:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e002      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	07db      	lsls	r3, r3, #31
 8000e2e:	d504      	bpl.n	8000e3a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	42b3      	cmp	r3, r6
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	d9f7      	bls.n	8000e2a <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8000e3c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8000e42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8000e46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e48:	b123      	cbz	r3, 8000e54 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8000e4a:	4620      	mov	r0, r4
}
 8000e4c:	b003      	add	sp, #12
 8000e4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000e52:	4718      	bx	r3
}
 8000e54:	b003      	add	sp, #12
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e58:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e5a:	680a      	ldr	r2, [r1, #0]
 8000e5c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e60:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e62:	d122      	bne.n	8000eaa <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e64:	05d2      	lsls	r2, r2, #23
 8000e66:	d403      	bmi.n	8000e70 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e68:	680a      	ldr	r2, [r1, #0]
 8000e6a:	f022 0208 	bic.w	r2, r2, #8
 8000e6e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000e70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d0ae      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8000e76:	4620      	mov	r0, r4
 8000e78:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000e7c:	e7aa      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e7e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e80:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e82:	f042 0204 	orr.w	r2, r2, #4
 8000e86:	6562      	str	r2, [r4, #84]	; 0x54
 8000e88:	e79c      	b.n	8000dc4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e8a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e8e:	f042 0202 	orr.w	r2, r2, #2
 8000e92:	6562      	str	r2, [r4, #84]	; 0x54
 8000e94:	e78e      	b.n	8000db4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e96:	6808      	ldr	r0, [r1, #0]
 8000e98:	f020 0004 	bic.w	r0, r0, #4
 8000e9c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e9e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ea0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	6562      	str	r2, [r4, #84]	; 0x54
 8000ea8:	e77c      	b.n	8000da4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000eaa:	0311      	lsls	r1, r2, #12
 8000eac:	d5e0      	bpl.n	8000e70 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000eae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d1e0      	bne.n	8000e76 <HAL_DMA_IRQHandler+0xf6>
 8000eb4:	e78e      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb6:	680a      	ldr	r2, [r1, #0]
 8000eb8:	f022 0216 	bic.w	r2, r2, #22
 8000ebc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ebe:	694a      	ldr	r2, [r1, #20]
 8000ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ec6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ec8:	b33a      	cbz	r2, 8000f1a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eca:	680a      	ldr	r2, [r1, #0]
 8000ecc:	f022 0208 	bic.w	r2, r2, #8
 8000ed0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed2:	223f      	movs	r2, #63	; 0x3f
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8000ed8:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eda:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000edc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8000ede:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8000ee0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000ee4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d0b3      	beq.n	8000e54 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8000eec:	4620      	mov	r0, r4
}
 8000eee:	b003      	add	sp, #12
 8000ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8000ef4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ef6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8000efa:	d180      	bne.n	8000dfe <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000efc:	680a      	ldr	r2, [r1, #0]
 8000efe:	f022 0210 	bic.w	r2, r2, #16
 8000f02:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000f04:	2201      	movs	r2, #1
 8000f06:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8000f0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000f0e:	e776      	b.n	8000dfe <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8000f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f af75 	bne.w	8000e02 <HAL_DMA_IRQHandler+0x82>
 8000f18:	e775      	b.n	8000e06 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1d4      	bne.n	8000eca <HAL_DMA_IRQHandler+0x14a>
 8000f20:	e7d7      	b.n	8000ed2 <HAL_DMA_IRQHandler+0x152>
 8000f22:	bf00      	nop
 8000f24:	200003d8 	.word	0x200003d8
 8000f28:	1b4e81b5 	.word	0x1b4e81b5

08000f2c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8000f2c:	b470      	push	{r4, r5, r6}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f2e:	6885      	ldr	r5, [r0, #8]
 8000f30:	2d80      	cmp	r5, #128	; 0x80
 8000f32:	d01d      	beq.n	8000f70 <HAL_DMAEx_MultiBufferStart_IT+0x44>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8000f34:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000f36:	b1b4      	cbz	r4, 8000f66 <HAL_DMAEx_MultiBufferStart_IT+0x3a>
 8000f38:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000f3a:	b1a4      	cbz	r4, 8000f66 <HAL_DMAEx_MultiBufferStart_IT+0x3a>
 8000f3c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8000f3e:	b194      	cbz	r4, 8000f66 <HAL_DMAEx_MultiBufferStart_IT+0x3a>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f40:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000f44:	2c01      	cmp	r4, #1
 8000f46:	f000 80f1 	beq.w	800112c <HAL_DMAEx_MultiBufferStart_IT+0x200>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f4a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8000f4e:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f52:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8000f54:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f58:	d010      	beq.n	8000f7c <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
  }  
  return status; 
}
 8000f60:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8000f62:	2002      	movs	r0, #2
}
 8000f64:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
}
 8000f6c:	bc70      	pop	{r4, r5, r6}
 8000f6e:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f74:	6543      	str	r3, [r0, #84]	; 0x54
}
 8000f76:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
}
 8000f7a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f7c:	2602      	movs	r6, #2
 8000f7e:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000f82:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	2600      	movs	r6, #0
 8000f86:	6546      	str	r6, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000f88:	6826      	ldr	r6, [r4, #0]
 8000f8a:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 8000f8e:	6026      	str	r6, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8000f90:	6123      	str	r3, [r4, #16]
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	6063      	str	r3, [r4, #4]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f96:	4bb3      	ldr	r3, [pc, #716]	; (8001264 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f98:	2d40      	cmp	r5, #64	; 0x40
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000f9a:	bf0b      	itete	eq
 8000f9c:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000f9e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000fa0:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000fa2:	60e2      	strne	r2, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa4:	429c      	cmp	r4, r3
 8000fa6:	d969      	bls.n	800107c <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8000fa8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000fac:	429c      	cmp	r4, r3
 8000fae:	d043      	beq.n	8001038 <HAL_DMAEx_MultiBufferStart_IT+0x10c>
 8000fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	d03f      	beq.n	8001038 <HAL_DMAEx_MultiBufferStart_IT+0x10c>
 8000fb8:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000fbc:	429c      	cmp	r4, r3
 8000fbe:	d03b      	beq.n	8001038 <HAL_DMAEx_MultiBufferStart_IT+0x10c>
 8000fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	d037      	beq.n	8001038 <HAL_DMAEx_MultiBufferStart_IT+0x10c>
 8000fc8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	f000 816b 	beq.w	80012a8 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 8000fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fd6:	429c      	cmp	r4, r3
 8000fd8:	f000 8166 	beq.w	80012a8 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 8000fdc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	f000 8161 	beq.w	80012a8 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 8000fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fea:	429c      	cmp	r4, r3
 8000fec:	f000 815c 	beq.w	80012a8 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 8000ff0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	f000 8193 	beq.w	8001320 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8000ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ffe:	429c      	cmp	r4, r3
 8001000:	f000 818e 	beq.w	8001320 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8001004:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001008:	429c      	cmp	r4, r3
 800100a:	f000 8189 	beq.w	8001320 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800100e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001012:	429c      	cmp	r4, r3
 8001014:	f000 8184 	beq.w	8001320 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8001018:	4b93      	ldr	r3, [pc, #588]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800101a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800101e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001022:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001024:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001026:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800102a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800102e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001030:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001032:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001036:	e009      	b.n	800104c <HAL_DMAEx_MultiBufferStart_IT+0x120>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001038:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800103a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800103c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800103e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001040:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001042:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001044:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001046:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001048:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800104a:	2201      	movs	r2, #1
 800104c:	4b86      	ldr	r3, [pc, #536]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800104e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001050:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001052:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001054:	f043 0316 	orr.w	r3, r3, #22
 8001058:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800105a:	6963      	ldr	r3, [r4, #20]
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001062:	2a00      	cmp	r2, #0
 8001064:	d05e      	beq.n	8001124 <HAL_DMAEx_MultiBufferStart_IT+0x1f8>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001074:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8001076:	6023      	str	r3, [r4, #0]
}
 8001078:	bc70      	pop	{r4, r5, r6}
 800107a:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800107c:	4b7b      	ldr	r3, [pc, #492]	; (800126c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800107e:	429c      	cmp	r4, r3
 8001080:	d856      	bhi.n	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x204>
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8001084:	429c      	cmp	r4, r3
 8001086:	f240 80a7 	bls.w	80011d8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>
 800108a:	3b48      	subs	r3, #72	; 0x48
 800108c:	429c      	cmp	r4, r3
 800108e:	f000 80f5 	beq.w	800127c <HAL_DMAEx_MultiBufferStart_IT+0x350>
 8001092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001096:	429c      	cmp	r4, r3
 8001098:	f000 80f0 	beq.w	800127c <HAL_DMAEx_MultiBufferStart_IT+0x350>
 800109c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80010a0:	429c      	cmp	r4, r3
 80010a2:	f000 80eb 	beq.w	800127c <HAL_DMAEx_MultiBufferStart_IT+0x350>
 80010a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010aa:	429c      	cmp	r4, r3
 80010ac:	f000 80e6 	beq.w	800127c <HAL_DMAEx_MultiBufferStart_IT+0x350>
 80010b0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80010b4:	429c      	cmp	r4, r3
 80010b6:	f000 8124 	beq.w	8001302 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80010ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010be:	429c      	cmp	r4, r3
 80010c0:	f000 811f 	beq.w	8001302 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80010c4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80010c8:	429c      	cmp	r4, r3
 80010ca:	f000 811a 	beq.w	8001302 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80010ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010d2:	429c      	cmp	r4, r3
 80010d4:	f000 8115 	beq.w	8001302 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80010d8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80010dc:	429c      	cmp	r4, r3
 80010de:	f000 814f 	beq.w	8001380 <HAL_DMAEx_MultiBufferStart_IT+0x454>
 80010e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e6:	429c      	cmp	r4, r3
 80010e8:	f000 814a 	beq.w	8001380 <HAL_DMAEx_MultiBufferStart_IT+0x454>
 80010ec:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80010f0:	429c      	cmp	r4, r3
 80010f2:	f000 8145 	beq.w	8001380 <HAL_DMAEx_MultiBufferStart_IT+0x454>
 80010f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010fa:	429c      	cmp	r4, r3
 80010fc:	f000 8140 	beq.w	8001380 <HAL_DMAEx_MultiBufferStart_IT+0x454>
 8001100:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001102:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001106:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800110a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800110c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800110e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001116:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001118:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	4a55      	ldr	r2, [pc, #340]	; (8001274 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	e795      	b.n	8001050 <HAL_DMAEx_MultiBufferStart_IT+0x124>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001124:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001126:	2b00      	cmp	r3, #0
 8001128:	d19d      	bne.n	8001066 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800112a:	e7a0      	b.n	800106e <HAL_DMAEx_MultiBufferStart_IT+0x142>
  __HAL_LOCK(hdma);
 800112c:	2002      	movs	r0, #2
 800112e:	e71d      	b.n	8000f6c <HAL_DMAEx_MultiBufferStart_IT+0x40>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001130:	3ba8      	subs	r3, #168	; 0xa8
 8001132:	429c      	cmp	r4, r3
 8001134:	d045      	beq.n	80011c2 <HAL_DMAEx_MultiBufferStart_IT+0x296>
 8001136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800113a:	429c      	cmp	r4, r3
 800113c:	d041      	beq.n	80011c2 <HAL_DMAEx_MultiBufferStart_IT+0x296>
 800113e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001142:	429c      	cmp	r4, r3
 8001144:	d03d      	beq.n	80011c2 <HAL_DMAEx_MultiBufferStart_IT+0x296>
 8001146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800114a:	429c      	cmp	r4, r3
 800114c:	d039      	beq.n	80011c2 <HAL_DMAEx_MultiBufferStart_IT+0x296>
 800114e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001152:	429c      	cmp	r4, r3
 8001154:	f000 80b7 	beq.w	80012c6 <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 8001158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800115c:	429c      	cmp	r4, r3
 800115e:	f000 80b2 	beq.w	80012c6 <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 8001162:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001166:	429c      	cmp	r4, r3
 8001168:	f000 80ad 	beq.w	80012c6 <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 800116c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001170:	429c      	cmp	r4, r3
 8001172:	f000 80a8 	beq.w	80012c6 <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 8001176:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800117a:	429c      	cmp	r4, r3
 800117c:	f000 80e0 	beq.w	8001340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8001180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001184:	429c      	cmp	r4, r3
 8001186:	f000 80db 	beq.w	8001340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800118a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800118e:	429c      	cmp	r4, r3
 8001190:	f000 80d6 	beq.w	8001340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8001194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001198:	429c      	cmp	r4, r3
 800119a:	f000 80d1 	beq.w	8001340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80011a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011a8:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011aa:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011b4:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011b6:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	e746      	b.n	8001050 <HAL_DMAEx_MultiBufferStart_IT+0x124>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80011c4:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011c6:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011c8:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011ca:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011cc:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011ce:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80011d0:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80011d2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80011d4:	2201      	movs	r2, #1
 80011d6:	e7f1      	b.n	80011bc <HAL_DMAEx_MultiBufferStart_IT+0x290>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 80011da:	429c      	cmp	r4, r3
 80011dc:	d059      	beq.n	8001292 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80011de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d055      	beq.n	8001292 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80011e6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80011ea:	429c      	cmp	r4, r3
 80011ec:	d051      	beq.n	8001292 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80011ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f2:	429c      	cmp	r4, r3
 80011f4:	d04d      	beq.n	8001292 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80011f6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80011fa:	429c      	cmp	r4, r3
 80011fc:	d072      	beq.n	80012e4 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 80011fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001202:	429c      	cmp	r4, r3
 8001204:	d06e      	beq.n	80012e4 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8001206:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800120a:	429c      	cmp	r4, r3
 800120c:	d06a      	beq.n	80012e4 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800120e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001212:	429c      	cmp	r4, r3
 8001214:	d066      	beq.n	80012e4 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8001216:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800121a:	429c      	cmp	r4, r3
 800121c:	f000 80a0 	beq.w	8001360 <HAL_DMAEx_MultiBufferStart_IT+0x434>
 8001220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001224:	429c      	cmp	r4, r3
 8001226:	f000 809b 	beq.w	8001360 <HAL_DMAEx_MultiBufferStart_IT+0x434>
 800122a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800122e:	429c      	cmp	r4, r3
 8001230:	f000 8096 	beq.w	8001360 <HAL_DMAEx_MultiBufferStart_IT+0x434>
 8001234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001238:	429c      	cmp	r4, r3
 800123a:	f000 8091 	beq.w	8001360 <HAL_DMAEx_MultiBufferStart_IT+0x434>
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001240:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001244:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001248:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800124a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800124c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001254:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001256:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 800125e:	6093      	str	r3, [r2, #8]
 8001260:	e6f6      	b.n	8001050 <HAL_DMAEx_MultiBufferStart_IT+0x124>
 8001262:	bf00      	nop
 8001264:	40026458 	.word	0x40026458
 8001268:	40026400 	.word	0x40026400
 800126c:	400260b8 	.word	0x400260b8
 8001270:	40026058 	.word	0x40026058
 8001274:	40026000 	.word	0x40026000
 8001278:	40026010 	.word	0x40026010
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 800127e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001280:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001282:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001284:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001286:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001288:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800128a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800128c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800128e:	2301      	movs	r3, #1
 8001290:	e745      	b.n	800111e <HAL_DMAEx_MultiBufferStart_IT+0x1f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001294:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001296:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001298:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800129a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800129c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800129e:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012a0:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012a2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80012a4:	2301      	movs	r3, #1
 80012a6:	e7d9      	b.n	800125c <HAL_DMAEx_MultiBufferStart_IT+0x330>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 80012aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012b2:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012b4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012be:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012c0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	e6c2      	b.n	800104c <HAL_DMAEx_MultiBufferStart_IT+0x120>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 80012c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012d0:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012d2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012dc:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012de:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	e76b      	b.n	80011bc <HAL_DMAEx_MultiBufferStart_IT+0x290>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012ee:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012f0:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012f2:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80012fa:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80012fc:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	e7ac      	b.n	800125c <HAL_DMAEx_MultiBufferStart_IT+0x330>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001304:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800130c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800130e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001310:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001318:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800131a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800131c:	2340      	movs	r3, #64	; 0x40
 800131e:	e6fe      	b.n	800111e <HAL_DMAEx_MultiBufferStart_IT+0x1f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 8001322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800132a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800132c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800132e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001332:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001336:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001338:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800133a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133e:	e685      	b.n	800104c <HAL_DMAEx_MultiBufferStart_IT+0x120>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 8001342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001346:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800134a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800134c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800134e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001352:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001356:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001358:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800135a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800135e:	e72d      	b.n	80011bc <HAL_DMAEx_MultiBufferStart_IT+0x290>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001366:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800136a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800136c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800136e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001372:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001376:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001378:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	e76d      	b.n	800125c <HAL_DMAEx_MultiBufferStart_IT+0x330>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 8001382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800138a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800138c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800138e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001392:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001396:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001398:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	e6be      	b.n	800111e <HAL_DMAEx_MultiBufferStart_IT+0x1f2>
 80013a0:	40026000 	.word	0x40026000
 80013a4:	40026400 	.word	0x40026400

080013a8 <HAL_DMAEx_ChangeMemory>:
    hdma->Instance->M0AR = Address;
 80013a8:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 80013aa:	b912      	cbnz	r2, 80013b2 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 80013ac:	60d9      	str	r1, [r3, #12]
}
 80013ae:	2000      	movs	r0, #0
 80013b0:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 80013b2:	6119      	str	r1, [r3, #16]
}
 80013b4:	2000      	movs	r0, #0
 80013b6:	4770      	bx	lr

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013bc:	2200      	movs	r2, #0
 80013be:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	f8df a260 	ldr.w	sl, [pc, #608]	; 8001624 <HAL_GPIO_Init+0x26c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c4:	4e90      	ldr	r6, [pc, #576]	; (8001608 <HAL_GPIO_Init+0x250>)
{
 80013c6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c8:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	4689      	mov	r9, r1
 80013cc:	e005      	b.n	80013da <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	3301      	adds	r3, #1
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	f102 0202 	add.w	r2, r2, #2
 80013d6:	f000 8095 	beq.w	8001504 <HAL_GPIO_Init+0x14c>
    ioposition = 0x01U << position;
 80013da:	2101      	movs	r1, #1
 80013dc:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80013e2:	43a1      	bics	r1, r4
 80013e4:	d1f3      	bne.n	80013ce <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80013ea:	f00c 0103 	and.w	r1, ip, #3
 80013ee:	1e4d      	subs	r5, r1, #1
 80013f0:	2d01      	cmp	r5, #1
 80013f2:	f240 808a 	bls.w	800150a <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f6:	2903      	cmp	r1, #3
 80013f8:	f040 80ca 	bne.w	8001590 <HAL_GPIO_Init+0x1d8>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013fc:	4091      	lsls	r1, r2
 80013fe:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001400:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001404:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001406:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800140a:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140c:	d0df      	beq.n	80013ce <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2100      	movs	r1, #0
 8001410:	9103      	str	r1, [sp, #12]
 8001412:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001416:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800141a:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800141e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001422:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001426:	9103      	str	r1, [sp, #12]
 8001428:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	f023 0103 	bic.w	r1, r3, #3
 800142e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001432:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001436:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	00bf      	lsls	r7, r7, #2
 800143e:	f04f 0e0f 	mov.w	lr, #15
 8001442:	fa0e fe07 	lsl.w	lr, lr, r7
 8001446:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	4d70      	ldr	r5, [pc, #448]	; (800160c <HAL_GPIO_Init+0x254>)
 800144c:	42a8      	cmp	r0, r5
 800144e:	d02e      	beq.n	80014ae <HAL_GPIO_Init+0xf6>
 8001450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001454:	42a8      	cmp	r0, r5
 8001456:	f000 809f 	beq.w	8001598 <HAL_GPIO_Init+0x1e0>
 800145a:	4d6d      	ldr	r5, [pc, #436]	; (8001610 <HAL_GPIO_Init+0x258>)
 800145c:	42a8      	cmp	r0, r5
 800145e:	f000 80a2 	beq.w	80015a6 <HAL_GPIO_Init+0x1ee>
 8001462:	4d6c      	ldr	r5, [pc, #432]	; (8001614 <HAL_GPIO_Init+0x25c>)
 8001464:	42a8      	cmp	r0, r5
 8001466:	f000 80a5 	beq.w	80015b4 <HAL_GPIO_Init+0x1fc>
 800146a:	4d6b      	ldr	r5, [pc, #428]	; (8001618 <HAL_GPIO_Init+0x260>)
 800146c:	42a8      	cmp	r0, r5
 800146e:	f000 80a8 	beq.w	80015c2 <HAL_GPIO_Init+0x20a>
 8001472:	4d6a      	ldr	r5, [pc, #424]	; (800161c <HAL_GPIO_Init+0x264>)
 8001474:	42a8      	cmp	r0, r5
 8001476:	f000 80b2 	beq.w	80015de <HAL_GPIO_Init+0x226>
 800147a:	4d69      	ldr	r5, [pc, #420]	; (8001620 <HAL_GPIO_Init+0x268>)
 800147c:	42a8      	cmp	r0, r5
 800147e:	f000 80b5 	beq.w	80015ec <HAL_GPIO_Init+0x234>
 8001482:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001628 <HAL_GPIO_Init+0x270>
 8001486:	4570      	cmp	r0, lr
 8001488:	f000 80a2 	beq.w	80015d0 <HAL_GPIO_Init+0x218>
 800148c:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800162c <HAL_GPIO_Init+0x274>
 8001490:	4570      	cmp	r0, lr
 8001492:	f000 80b2 	beq.w	80015fa <HAL_GPIO_Init+0x242>
 8001496:	f8df e198 	ldr.w	lr, [pc, #408]	; 8001630 <HAL_GPIO_Init+0x278>
 800149a:	4570      	cmp	r0, lr
 800149c:	bf0c      	ite	eq
 800149e:	f04f 0e09 	moveq.w	lr, #9
 80014a2:	f04f 0e0a 	movne.w	lr, #10
 80014a6:	fa0e f707 	lsl.w	r7, lr, r7
 80014aa:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80014b2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014bc:	bf0c      	ite	eq
 80014be:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80014c0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80014c4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80014c6:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80014cc:	bf0c      	ite	eq
 80014ce:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80014d0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80014d4:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80014d6:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80014dc:	bf0c      	ite	eq
 80014de:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80014e0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80014e4:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ec:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80014f0:	bf0c      	ite	eq
 80014f2:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80014f4:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f8:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80014fa:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fc:	f102 0202 	add.w	r2, r2, #2
 8001500:	f47f af6b 	bne.w	80013da <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001504:	b005      	add	sp, #20
 8001506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150a:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800150e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001512:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001516:	2503      	movs	r5, #3
 8001518:	fa05 f802 	lsl.w	r8, r5, r2
 800151c:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001520:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001524:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001526:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001530:	409f      	lsls	r7, r3
 8001532:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001536:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 800153a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800153c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001542:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001546:	4097      	lsls	r7, r2
 8001548:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800154e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	fa01 f102 	lsl.w	r1, r1, r2
 8001554:	f47f af54 	bne.w	8001400 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8001558:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800155c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001560:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001564:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001568:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001572:	fa07 f708 	lsl.w	r7, r7, r8
 8001576:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001578:	270f      	movs	r7, #15
 800157a:	fa07 f808 	lsl.w	r8, r7, r8
 800157e:	9f00      	ldr	r7, [sp, #0]
 8001580:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001584:	9f01      	ldr	r7, [sp, #4]
 8001586:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	f8ce 7020 	str.w	r7, [lr, #32]
 800158e:	e737      	b.n	8001400 <HAL_GPIO_Init+0x48>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	2503      	movs	r5, #3
 8001592:	4095      	lsls	r5, r2
 8001594:	43ed      	mvns	r5, r5
 8001596:	e7d1      	b.n	800153c <HAL_GPIO_Init+0x184>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001598:	f04f 0e01 	mov.w	lr, #1
 800159c:	fa0e f707 	lsl.w	r7, lr, r7
 80015a0:	ea48 0807 	orr.w	r8, r8, r7
 80015a4:	e783      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015a6:	f04f 0e02 	mov.w	lr, #2
 80015aa:	fa0e f707 	lsl.w	r7, lr, r7
 80015ae:	ea48 0807 	orr.w	r8, r8, r7
 80015b2:	e77c      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015b4:	f04f 0e03 	mov.w	lr, #3
 80015b8:	fa0e f707 	lsl.w	r7, lr, r7
 80015bc:	ea48 0807 	orr.w	r8, r8, r7
 80015c0:	e775      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015c2:	f04f 0e04 	mov.w	lr, #4
 80015c6:	fa0e f707 	lsl.w	r7, lr, r7
 80015ca:	ea48 0807 	orr.w	r8, r8, r7
 80015ce:	e76e      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015d0:	f04f 0e07 	mov.w	lr, #7
 80015d4:	fa0e f707 	lsl.w	r7, lr, r7
 80015d8:	ea48 0807 	orr.w	r8, r8, r7
 80015dc:	e767      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015de:	f04f 0e05 	mov.w	lr, #5
 80015e2:	fa0e f707 	lsl.w	r7, lr, r7
 80015e6:	ea48 0807 	orr.w	r8, r8, r7
 80015ea:	e760      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015ec:	f04f 0e06 	mov.w	lr, #6
 80015f0:	fa0e f707 	lsl.w	r7, lr, r7
 80015f4:	ea48 0807 	orr.w	r8, r8, r7
 80015f8:	e759      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 80015fa:	f04f 0e08 	mov.w	lr, #8
 80015fe:	fa0e f707 	lsl.w	r7, lr, r7
 8001602:	ea48 0807 	orr.w	r8, r8, r7
 8001606:	e752      	b.n	80014ae <HAL_GPIO_Init+0xf6>
 8001608:	40013c00 	.word	0x40013c00
 800160c:	40020000 	.word	0x40020000
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40023800 	.word	0x40023800
 8001628:	40021c00 	.word	0x40021c00
 800162c:	40022000 	.word	0x40022000
 8001630:	40022400 	.word	0x40022400

08001634 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	b902      	cbnz	r2, 8001638 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001636:	0409      	lsls	r1, r1, #16
 8001638:	6181      	str	r1, [r0, #24]
  }
}
 800163a:	4770      	bx	lr

0800163c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800163c:	b530      	push	{r4, r5, lr}
 800163e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001642:	491a      	ldr	r1, [pc, #104]	; (80016ac <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001644:	4d1a      	ldr	r5, [pc, #104]	; (80016b0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2200      	movs	r2, #0
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800165a:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800165e:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001660:	f7ff f860 	bl	8000724 <HAL_GetTick>
 8001664:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001666:	e005      	b.n	8001674 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001668:	f7ff f85c 	bl	8000724 <HAL_GetTick>
 800166c:	1b00      	subs	r0, r0, r4
 800166e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001672:	d816      	bhi.n	80016a2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001674:	686b      	ldr	r3, [r5, #4]
 8001676:	03da      	lsls	r2, r3, #15
 8001678:	d5f6      	bpl.n	8001668 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800167c:	4d0c      	ldr	r5, [pc, #48]	; (80016b0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800167e:	2201      	movs	r2, #1
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001682:	f7ff f84f 	bl	8000724 <HAL_GetTick>
 8001686:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001688:	e005      	b.n	8001696 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800168a:	f7ff f84b 	bl	8000724 <HAL_GetTick>
 800168e:	1b00      	subs	r0, r0, r4
 8001690:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001694:	d805      	bhi.n	80016a2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001696:	686b      	ldr	r3, [r5, #4]
 8001698:	039b      	lsls	r3, r3, #14
 800169a:	d5f6      	bpl.n	800168a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800169c:	2000      	movs	r0, #0
}
 800169e:	b003      	add	sp, #12
 80016a0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
}
 80016a4:	b003      	add	sp, #12
 80016a6:	bd30      	pop	{r4, r5, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	420e0000 	.word	0x420e0000
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	2800      	cmp	r0, #0
 80016b6:	f000 81a2 	beq.w	80019fe <HAL_RCC_OscConfig+0x34a>
{
 80016ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	6803      	ldr	r3, [r0, #0]
 80016c0:	07dd      	lsls	r5, r3, #31
{
 80016c2:	b082      	sub	sp, #8
 80016c4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	d52f      	bpl.n	8001728 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c8:	499e      	ldr	r1, [pc, #632]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80016ca:	688a      	ldr	r2, [r1, #8]
 80016cc:	f002 020c 	and.w	r2, r2, #12
 80016d0:	2a04      	cmp	r2, #4
 80016d2:	f000 80ed 	beq.w	80018b0 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	688a      	ldr	r2, [r1, #8]
 80016d8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016dc:	2a08      	cmp	r2, #8
 80016de:	f000 80e3 	beq.w	80018a8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	f000 80ec 	beq.w	80018c4 <HAL_RCC_OscConfig+0x210>
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	f000 8175 	beq.w	80019de <HAL_RCC_OscConfig+0x32a>
 80016f4:	4d93      	ldr	r5, [pc, #588]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80016f6:	682a      	ldr	r2, [r5, #0]
 80016f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016fc:	602a      	str	r2, [r5, #0]
 80016fe:	682a      	ldr	r2, [r5, #0]
 8001700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001704:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 80e1 	bne.w	80018ce <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff f80a 	bl	8000724 <HAL_GetTick>
 8001710:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	e005      	b.n	8001720 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff f806 	bl	8000724 <HAL_GetTick>
 8001718:	1b80      	subs	r0, r0, r6
 800171a:	2864      	cmp	r0, #100	; 0x64
 800171c:	f200 8101 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	039b      	lsls	r3, r3, #14
 8001724:	d4f6      	bmi.n	8001714 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	079f      	lsls	r7, r3, #30
 800172a:	d528      	bpl.n	800177e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172c:	4a85      	ldr	r2, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 800172e:	6891      	ldr	r1, [r2, #8]
 8001730:	f011 0f0c 	tst.w	r1, #12
 8001734:	f000 8090 	beq.w	8001858 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001738:	6891      	ldr	r1, [r2, #8]
 800173a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	2908      	cmp	r1, #8
 8001740:	f000 8086 	beq.w	8001850 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	68e3      	ldr	r3, [r4, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 810e 	beq.w	8001968 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4e7d      	ldr	r6, [pc, #500]	; (8001944 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001754:	f7fe ffe6 	bl	8000724 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	e005      	b.n	8001768 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7fe ffe2 	bl	8000724 <HAL_GetTick>
 8001760:	1b40      	subs	r0, r0, r5
 8001762:	2802      	cmp	r0, #2
 8001764:	f200 80dd 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	0798      	lsls	r0, r3, #30
 800176c:	d5f6      	bpl.n	800175c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	6833      	ldr	r3, [r6, #0]
 8001770:	6922      	ldr	r2, [r4, #16]
 8001772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001776:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800177a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	071a      	lsls	r2, r3, #28
 8001780:	d451      	bmi.n	8001826 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	0758      	lsls	r0, r3, #29
 8001784:	d52f      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4a6f      	ldr	r2, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 8001788:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800178a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800178e:	d07f      	beq.n	8001890 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8001790:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4e6e      	ldr	r6, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x298>)
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	05d9      	lsls	r1, r3, #23
 8001798:	f140 80b3 	bpl.w	8001902 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	68a3      	ldr	r3, [r4, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f000 80c3 	beq.w	800192a <HAL_RCC_OscConfig+0x276>
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	f000 812c 	beq.w	8001a02 <HAL_RCC_OscConfig+0x34e>
 80017aa:	4e66      	ldr	r6, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80017ac:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	6732      	str	r2, [r6, #112]	; 0x70
 80017b4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80b9 	bne.w	8001934 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7fe ffaf 	bl	8000724 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e005      	b.n	80017da <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ffa9 	bl	8000724 <HAL_GetTick>
 80017d2:	1bc0      	subs	r0, r0, r7
 80017d4:	4540      	cmp	r0, r8
 80017d6:	f200 80a4 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80017dc:	0798      	lsls	r0, r3, #30
 80017de:	d4f6      	bmi.n	80017ce <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f040 8106 	bne.w	80019f2 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e6:	69a0      	ldr	r0, [r4, #24]
 80017e8:	b1c8      	cbz	r0, 800181e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ea:	4d56      	ldr	r5, [pc, #344]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80017ec:	68ab      	ldr	r3, [r5, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	f000 80c9 	beq.w	800198a <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x294>)
 80017fa:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80017fe:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001800:	f000 8109 	beq.w	8001a16 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7fe ff8e 	bl	8000724 <HAL_GetTick>
 8001808:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	e005      	b.n	8001818 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7fe ff8a 	bl	8000724 <HAL_GetTick>
 8001810:	1b00      	subs	r0, r0, r4
 8001812:	2802      	cmp	r0, #2
 8001814:	f200 8085 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	d4f6      	bmi.n	800180c <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800181e:	2000      	movs	r0, #0
}
 8001820:	b002      	add	sp, #8
 8001822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001826:	6963      	ldr	r3, [r4, #20]
 8001828:	b30b      	cbz	r3, 800186e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	4e45      	ldr	r6, [pc, #276]	; (8001944 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800182e:	2201      	movs	r2, #1
 8001830:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001834:	f7fe ff76 	bl	8000724 <HAL_GetTick>
 8001838:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e004      	b.n	8001846 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7fe ff72 	bl	8000724 <HAL_GetTick>
 8001840:	1b40      	subs	r0, r0, r5
 8001842:	2802      	cmp	r0, #2
 8001844:	d86d      	bhi.n	8001922 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001848:	079b      	lsls	r3, r3, #30
 800184a:	d5f7      	bpl.n	800183c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	e798      	b.n	8001782 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001850:	6852      	ldr	r2, [r2, #4]
 8001852:	0256      	lsls	r6, r2, #9
 8001854:	f53f af76 	bmi.w	8001744 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	0795      	lsls	r5, r2, #30
 800185e:	d544      	bpl.n	80018ea <HAL_RCC_OscConfig+0x236>
 8001860:	68e2      	ldr	r2, [r4, #12]
 8001862:	2a01      	cmp	r2, #1
 8001864:	d041      	beq.n	80018ea <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
}
 8001868:	b002      	add	sp, #8
 800186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4e34      	ldr	r6, [pc, #208]	; (8001944 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8001872:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001876:	f7fe ff55 	bl	8000724 <HAL_GetTick>
 800187a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	e004      	b.n	8001888 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7fe ff51 	bl	8000724 <HAL_GetTick>
 8001882:	1b40      	subs	r0, r0, r5
 8001884:	2802      	cmp	r0, #2
 8001886:	d84c      	bhi.n	8001922 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800188a:	079f      	lsls	r7, r3, #30
 800188c:	d4f7      	bmi.n	800187e <HAL_RCC_OscConfig+0x1ca>
 800188e:	e7dd      	b.n	800184c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018a4:	2501      	movs	r5, #1
 80018a6:	e774      	b.n	8001792 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a8:	684a      	ldr	r2, [r1, #4]
 80018aa:	0250      	lsls	r0, r2, #9
 80018ac:	f57f af19 	bpl.w	80016e2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	0391      	lsls	r1, r2, #14
 80018b6:	f57f af37 	bpl.w	8001728 <HAL_RCC_OscConfig+0x74>
 80018ba:	6862      	ldr	r2, [r4, #4]
 80018bc:	2a00      	cmp	r2, #0
 80018be:	f47f af33 	bne.w	8001728 <HAL_RCC_OscConfig+0x74>
 80018c2:	e7d0      	b.n	8001866 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018ce:	f7fe ff29 	bl	8000724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4e1c      	ldr	r6, [pc, #112]	; (8001944 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80018d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e004      	b.n	80018e2 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7fe ff24 	bl	8000724 <HAL_GetTick>
 80018dc:	1b40      	subs	r0, r0, r5
 80018de:	2864      	cmp	r0, #100	; 0x64
 80018e0:	d81f      	bhi.n	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	6833      	ldr	r3, [r6, #0]
 80018e4:	039a      	lsls	r2, r3, #14
 80018e6:	d5f7      	bpl.n	80018d8 <HAL_RCC_OscConfig+0x224>
 80018e8:	e71d      	b.n	8001726 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4916      	ldr	r1, [pc, #88]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 80018ec:	6920      	ldr	r0, [r4, #16]
 80018ee:	680a      	ldr	r2, [r1, #0]
 80018f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018f4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80018f8:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	071a      	lsls	r2, r3, #28
 80018fc:	f57f af41 	bpl.w	8001782 <HAL_RCC_OscConfig+0xce>
 8001900:	e791      	b.n	8001826 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001902:	6833      	ldr	r3, [r6, #0]
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800190a:	f7fe ff0b 	bl	8000724 <HAL_GetTick>
 800190e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	05da      	lsls	r2, r3, #23
 8001914:	f53f af42 	bmi.w	800179c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7fe ff04 	bl	8000724 <HAL_GetTick>
 800191c:	1bc0      	subs	r0, r0, r7
 800191e:	2802      	cmp	r0, #2
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
}
 8001924:	b002      	add	sp, #8
 8001926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x290>)
 800192c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001934:	f7fe fef6 	bl	8000724 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	4f02      	ldr	r7, [pc, #8]	; (8001944 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800193a:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00b      	b.n	800195a <HAL_RCC_OscConfig+0x2a6>
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7fe fee8 	bl	8000724 <HAL_GetTick>
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	4540      	cmp	r0, r8
 8001958:	d8e3      	bhi.n	8001922 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800195c:	079b      	lsls	r3, r3, #30
 800195e:	d5f7      	bpl.n	8001950 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001960:	2d00      	cmp	r5, #0
 8001962:	f43f af40 	beq.w	80017e6 <HAL_RCC_OscConfig+0x132>
 8001966:	e044      	b.n	80019f2 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8001968:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4e43      	ldr	r6, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 800196c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800196e:	f7fe fed9 	bl	8000724 <HAL_GetTick>
 8001972:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001974:	e004      	b.n	8001980 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7fe fed5 	bl	8000724 <HAL_GetTick>
 800197a:	1b40      	subs	r0, r0, r5
 800197c:	2802      	cmp	r0, #2
 800197e:	d8d0      	bhi.n	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001980:	6833      	ldr	r3, [r6, #0]
 8001982:	0799      	lsls	r1, r3, #30
 8001984:	d4f7      	bmi.n	8001976 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	e6f9      	b.n	800177e <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198a:	2801      	cmp	r0, #1
 800198c:	f43f af48 	beq.w	8001820 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8001990:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001992:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	4291      	cmp	r1, r2
 800199a:	f47f af64 	bne.w	8001866 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	4291      	cmp	r1, r2
 80019a6:	f47f af5e 	bne.w	8001866 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80019b0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80019b6:	f47f af56 	bne.w	8001866 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80019c2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80019c8:	f47f af4d 	bne.w	8001866 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019ce:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 80019d6:	bf14      	ite	ne
 80019d8:	2001      	movne	r0, #1
 80019da:	2000      	moveq	r0, #0
 80019dc:	e720      	b.n	8001820 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019ee:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f0:	e76d      	b.n	80018ce <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
 80019f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	e6f3      	b.n	80017e6 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80019fe:	2001      	movs	r0, #1
}
 8001a00:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
 8001a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a06:	f042 0204 	orr.w	r2, r2, #4
 8001a0a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a14:	e78e      	b.n	8001934 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8001a16:	f7fe fe85 	bl	8000724 <HAL_GetTick>
 8001a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1c:	e005      	b.n	8001a2a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7fe fe81 	bl	8000724 <HAL_GetTick>
 8001a22:	1b80      	subs	r0, r0, r6
 8001a24:	2802      	cmp	r0, #2
 8001a26:	f63f af7c 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	0199      	lsls	r1, r3, #6
 8001a2e:	d4f6      	bmi.n	8001a1e <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a30:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001a34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a36:	430b      	orrs	r3, r1
 8001a38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a3c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001a46:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001a48:	490a      	ldr	r1, [pc, #40]	; (8001a74 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001a4e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a52:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe66 	bl	8000724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	4d07      	ldr	r5, [pc, #28]	; (8001a78 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001a5a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	e005      	b.n	8001a6a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7fe fe61 	bl	8000724 <HAL_GetTick>
 8001a62:	1b00      	subs	r0, r0, r4
 8001a64:	2802      	cmp	r0, #2
 8001a66:	f63f af5c 	bhi.w	8001922 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	019a      	lsls	r2, r3, #6
 8001a6e:	d5f6      	bpl.n	8001a5e <HAL_RCC_OscConfig+0x3aa>
 8001a70:	e6d5      	b.n	800181e <HAL_RCC_OscConfig+0x16a>
 8001a72:	bf00      	nop
 8001a74:	42470000 	.word	0x42470000
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001a7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a80:	688b      	ldr	r3, [r1, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d01b      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x46>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d117      	bne.n	8001abe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a94:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9c:	d113      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	480f      	ldr	r0, [pc, #60]	; (8001adc <HAL_RCC_GetSysClockFreq+0x60>)
 8001aa0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001aa4:	fba1 0100 	umull	r0, r1, r1, r0
 8001aa8:	f7fe fbb4 	bl	8000214 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001ab8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001abc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001ac0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001ac4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001ac8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001acc:	2300      	movs	r3, #0
 8001ace:	fba1 0100 	umull	r0, r1, r1, r0
 8001ad2:	f7fe fb9f 	bl	8000214 <__aeabi_uldivmod>
 8001ad6:	e7e9      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x30>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	017d7840 	.word	0x017d7840

08001ae4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	f000 8087 	beq.w	8001bf8 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aea:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_RCC_ClockConfig+0x128>)
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	428b      	cmp	r3, r1
{
 8001af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001af8:	460d      	mov	r5, r1
 8001afa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	d209      	bcs.n	8001b12 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	b2cb      	uxtb	r3, r1
 8001b00:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d002      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
}
 8001b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	0798      	lsls	r0, r3, #30
 8001b16:	d514      	bpl.n	8001b42 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	0759      	lsls	r1, r3, #29
 8001b1a:	d504      	bpl.n	8001b26 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	493c      	ldr	r1, [pc, #240]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001b1e:	688a      	ldr	r2, [r1, #8]
 8001b20:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001b24:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	071a      	lsls	r2, r3, #28
 8001b28:	d504      	bpl.n	8001b34 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b2a:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001b2c:	688a      	ldr	r2, [r1, #8]
 8001b2e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001b32:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4936      	ldr	r1, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001b36:	68a0      	ldr	r0, [r4, #8]
 8001b38:	688a      	ldr	r2, [r1, #8]
 8001b3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	07df      	lsls	r7, r3, #31
 8001b44:	d521      	bpl.n	8001b8a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	6862      	ldr	r2, [r4, #4]
 8001b48:	2a01      	cmp	r2, #1
 8001b4a:	d057      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4c:	1e93      	subs	r3, r2, #2
 8001b4e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b54:	d94d      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	0799      	lsls	r1, r3, #30
 8001b58:	d5d8      	bpl.n	8001b0c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4e2d      	ldr	r6, [pc, #180]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001b5c:	68b3      	ldr	r3, [r6, #8]
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b66:	f7fe fddd 	bl	8000724 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b6e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	e004      	b.n	8001b7c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7fe fdd7 	bl	8000724 <HAL_GetTick>
 8001b76:	1bc0      	subs	r0, r0, r7
 8001b78:	4540      	cmp	r0, r8
 8001b7a:	d844      	bhi.n	8001c06 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7c:	68b3      	ldr	r3, [r6, #8]
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b88:	d1f3      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x128>)
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	42ab      	cmp	r3, r5
 8001b94:	d906      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	b2eb      	uxtb	r3, r5
 8001b98:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	42ab      	cmp	r3, r5
 8001ba2:	d1b3      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	075a      	lsls	r2, r3, #29
 8001ba8:	d506      	bpl.n	8001bb8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001baa:	4919      	ldr	r1, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001bac:	68e0      	ldr	r0, [r4, #12]
 8001bae:	688a      	ldr	r2, [r1, #8]
 8001bb0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001bb4:	4302      	orrs	r2, r0
 8001bb6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	d507      	bpl.n	8001bcc <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001bbe:	6921      	ldr	r1, [r4, #16]
 8001bc0:	6893      	ldr	r3, [r2, #8]
 8001bc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bcc:	f7ff ff56 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001bd2:	4c10      	ldr	r4, [pc, #64]	; (8001c14 <HAL_RCC_ClockConfig+0x130>)
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	4910      	ldr	r1, [pc, #64]	; (8001c18 <HAL_RCC_ClockConfig+0x134>)
 8001bd8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001bdc:	4603      	mov	r3, r0
 8001bde:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001be0:	480e      	ldr	r0, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be2:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001be4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001be8:	f7fe fd52 	bl	8000690 <HAL_InitTick>
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	0198      	lsls	r0, r3, #6
 8001bf4:	d4b1      	bmi.n	8001b5a <HAL_RCC_ClockConfig+0x76>
 8001bf6:	e789      	b.n	8001b0c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
}
 8001bfa:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_RCC_ClockConfig+0x12c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	039e      	lsls	r6, r3, #14
 8001c02:	d4aa      	bmi.n	8001b5a <HAL_RCC_ClockConfig+0x76>
 8001c04:	e782      	b.n	8001b0c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001c06:	2003      	movs	r0, #3
 8001c08:	e781      	b.n	8001b0e <HAL_RCC_ClockConfig+0x2a>
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08005f54 	.word	0x08005f54
 8001c18:	200003d8 	.word	0x200003d8
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001c22:	4905      	ldr	r1, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c28:	6808      	ldr	r0, [r1, #0]
 8001c2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c30:	40d8      	lsrs	r0, r3
 8001c32:	4770      	bx	lr
 8001c34:	40023800 	.word	0x40023800
 8001c38:	200003d8 	.word	0x200003d8
 8001c3c:	08005f64 	.word	0x08005f64

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001c42:	4905      	ldr	r1, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c48:	6808      	ldr	r0, [r1, #0]
 8001c4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c50:	40d8      	lsrs	r0, r3
 8001c52:	4770      	bx	lr
 8001c54:	40023800 	.word	0x40023800
 8001c58:	200003d8 	.word	0x200003d8
 8001c5c:	08005f64 	.word	0x08005f64

08001c60 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8001c60:	b1f0      	cbz	r0, 8001ca0 <HAL_SDRAM_Init+0x40>
{
 8001c62:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8001c64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001c68:	460d      	mov	r5, r1
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c70:	b18b      	cbz	r3, 8001c96 <HAL_SDRAM_Init+0x36>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001c72:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001c7a:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c7e:	f7fe fc47 	bl	8000510 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8001c82:	e9d4 0200 	ldrd	r0, r2, [r4]
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fc80 	bl	800058c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8001c92:	2000      	movs	r0, #0
}
 8001c94:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8001c96:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8001c9a:	f003 febd 	bl	8005a18 <HAL_SDRAM_MspInit>
 8001c9e:	e7e8      	b.n	8001c72 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8001ca0:	2001      	movs	r0, #1
}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001ca6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8001caa:	2b02      	cmp	r3, #2
{
 8001cac:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001cae:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8001cb0:	d004      	beq.n	8001cbc <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8001cb2:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8001cb6:	2c01      	cmp	r4, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001cbe:	460e      	mov	r6, r1
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001cc6:	6828      	ldr	r0, [r5, #0]
 8001cc8:	f7fe fcac 	bl	8000624 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001ccc:	6833      	ldr	r3, [r6, #0]
 8001cce:	2b02      	cmp	r3, #2
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001cd0:	bf06      	itte	eq
 8001cd2:	2305      	moveq	r3, #5
 8001cd4:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
      hsdram->State = HAL_SDRAM_STATE_READY;
 8001cd8:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
}
 8001cde:	bd70      	pop	{r4, r5, r6, pc}

08001ce0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001ce0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001ce2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001ce6:	2b02      	cmp	r3, #2
{
 8001ce8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001cea:	b2d8      	uxtb	r0, r3
 8001cec:	d005      	beq.n	8001cfa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8001cee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	b2dd      	uxtb	r5, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001cfa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001cfc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001cfe:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001d00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001d04:	f7fe fcb8 	bl	8000678 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001d08:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
}
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}

08001d10 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d10:	2800      	cmp	r0, #0
 8001d12:	f000 808f 	beq.w	8001e34 <HAL_UART_Init+0x124>
{
 8001d16:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8081 	beq.w	8001e2a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d28:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d2a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d2c:	2224      	movs	r2, #36	; 0x24
 8001d2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d38:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d3a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d3c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d3e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001d42:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d44:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d46:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d48:	4302      	orrs	r2, r0
 8001d4a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001d4c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d4e:	4302      	orrs	r2, r0
 8001d50:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001d52:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001d56:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d5a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d64:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d6a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d6c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d6e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d70:	d035      	beq.n	8001dde <HAL_UART_Init+0xce>
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_UART_Init+0x12c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d032      	beq.n	8001dde <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d78:	f7ff ff52 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d7c:	69e3      	ldr	r3, [r4, #28]
 8001d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d82:	d032      	beq.n	8001dea <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d84:	6863      	ldr	r3, [r4, #4]
 8001d86:	2119      	movs	r1, #25
 8001d88:	009a      	lsls	r2, r3, #2
 8001d8a:	fba0 0101 	umull	r0, r1, r0, r1
 8001d8e:	0f9b      	lsrs	r3, r3, #30
 8001d90:	f7fe fa40 	bl	8000214 <__aeabi_uldivmod>
 8001d94:	492a      	ldr	r1, [pc, #168]	; (8001e40 <HAL_UART_Init+0x130>)
 8001d96:	fba1 3200 	umull	r3, r2, r1, r0
 8001d9a:	0952      	lsrs	r2, r2, #5
 8001d9c:	2564      	movs	r5, #100	; 0x64
 8001d9e:	fb05 0012 	mls	r0, r5, r2, r0
 8001da2:	0100      	lsls	r0, r0, #4
 8001da4:	3032      	adds	r0, #50	; 0x32
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	fba1 1000 	umull	r1, r0, r1, r0
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 8001db2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dc2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001dc4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8001dca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dce:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd0:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dd6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8001dda:	4628      	mov	r0, r5
}
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dde:	f7ff ff2f 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de2:	69e3      	ldr	r3, [r4, #28]
 8001de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de8:	d1cc      	bne.n	8001d84 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dea:	6862      	ldr	r2, [r4, #4]
 8001dec:	2119      	movs	r1, #25
 8001dee:	1892      	adds	r2, r2, r2
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	415b      	adcs	r3, r3
 8001df6:	fba0 0101 	umull	r0, r1, r0, r1
 8001dfa:	f7fe fa0b 	bl	8000214 <__aeabi_uldivmod>
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_UART_Init+0x130>)
 8001e00:	fba3 2500 	umull	r2, r5, r3, r0
 8001e04:	096d      	lsrs	r5, r5, #5
 8001e06:	2264      	movs	r2, #100	; 0x64
 8001e08:	fb02 0215 	mls	r2, r2, r5, r0
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	3232      	adds	r2, #50	; 0x32
 8001e10:	fba3 3202 	umull	r3, r2, r3, r2
 8001e14:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8001e18:	0912      	lsrs	r2, r2, #4
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8001e20:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001e24:	440a      	add	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e7c4      	b.n	8001db4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8001e2a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001e2e:	f003 ff17 	bl	8005c60 <HAL_UART_MspInit>
 8001e32:	e779      	b.n	8001d28 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
}
 8001e36:	4770      	bx	lr
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40011400 	.word	0x40011400
 8001e40:	51eb851f 	.word	0x51eb851f

08001e44 <HAL_UART_Transmit>:
{
 8001e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e48:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8001e4e:	2820      	cmp	r0, #32
 8001e50:	d177      	bne.n	8001f42 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8001e52:	4689      	mov	r9, r1
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d040      	beq.n	8001eda <HAL_UART_Transmit+0x96>
 8001e58:	4614      	mov	r4, r2
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d03d      	beq.n	8001eda <HAL_UART_Transmit+0x96>
 8001e5e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8001e60:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d06c      	beq.n	8001f42 <HAL_UART_Transmit+0xfe>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e72:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e78:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fc52 	bl	8000724 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e80:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8001e82:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001e88:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8001e8a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e8c:	d05c      	beq.n	8001f48 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8001e8e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001e90:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8001e92:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8001e94:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d07e      	beq.n	8001f9a <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e9c:	682c      	ldr	r4, [r5, #0]
 8001e9e:	1c72      	adds	r2, r6, #1
 8001ea0:	d11e      	bne.n	8001ee0 <HAL_UART_Transmit+0x9c>
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	0613      	lsls	r3, r2, #24
 8001ea6:	d5fc      	bpl.n	8001ea2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8001ea8:	f1b9 0f00 	cmp.w	r9, #0
 8001eac:	d044      	beq.n	8001f38 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eae:	f819 3b01 	ldrb.w	r3, [r9], #1
 8001eb2:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8001eb4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ebc:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ec      	bne.n	8001e9e <HAL_UART_Transmit+0x5a>
 8001ec4:	1c71      	adds	r1, r6, #1
 8001ec6:	d145      	bne.n	8001f54 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	065a      	lsls	r2, r3, #25
 8001ecc:	d5fc      	bpl.n	8001ec8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
}
 8001edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	0618      	lsls	r0, r3, #24
 8001ee4:	d4e0      	bmi.n	8001ea8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ee6:	b12e      	cbz	r6, 8001ef4 <HAL_UART_Transmit+0xb0>
 8001ee8:	f7fe fc1c 	bl	8000724 <HAL_GetTick>
 8001eec:	1bc0      	subs	r0, r0, r7
 8001eee:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ef0:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ef2:	d2d4      	bcs.n	8001e9e <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef4:	f104 030c 	add.w	r3, r4, #12
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f00:	f104 010c 	add.w	r1, r4, #12
 8001f04:	e841 3200 	strex	r2, r3, [r1]
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	d1f3      	bne.n	8001ef4 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f0c:	f104 0314 	add.w	r3, r4, #20
 8001f10:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f14:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f18:	f104 0114 	add.w	r1, r4, #20
 8001f1c:	e841 3200 	strex	r2, r3, [r1]
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d1f3      	bne.n	8001f0c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8001f24:	2320      	movs	r3, #32
 8001f26:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001f2a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001f2e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8001f32:	2003      	movs	r0, #3
}
 8001f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f38:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f40:	e7b7      	b.n	8001eb2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8001f42:	2002      	movs	r0, #2
}
 8001f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f48:	692b      	ldr	r3, [r5, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d19f      	bne.n	8001e8e <HAL_UART_Transmit+0x4a>
 8001f4e:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8001f50:	4699      	mov	r9, r3
 8001f52:	e79c      	b.n	8001e8e <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	065b      	lsls	r3, r3, #25
 8001f58:	d4b9      	bmi.n	8001ece <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f5a:	b12e      	cbz	r6, 8001f68 <HAL_UART_Transmit+0x124>
 8001f5c:	f7fe fbe2 	bl	8000724 <HAL_GetTick>
 8001f60:	1bc0      	subs	r0, r0, r7
 8001f62:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f64:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f66:	d2ad      	bcs.n	8001ec4 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f68:	f104 030c 	add.w	r3, r4, #12
 8001f6c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f74:	f104 010c 	add.w	r1, r4, #12
 8001f78:	e841 3200 	strex	r2, r3, [r1]
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d1f3      	bne.n	8001f68 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f80:	f104 0314 	add.w	r3, r4, #20
 8001f84:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f88:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8c:	f104 0114 	add.w	r1, r4, #20
 8001f90:	e841 3200 	strex	r2, r3, [r1]
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d1f3      	bne.n	8001f80 <HAL_UART_Transmit+0x13c>
 8001f98:	e7c4      	b.n	8001f24 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9a:	682c      	ldr	r4, [r5, #0]
 8001f9c:	e792      	b.n	8001ec4 <HAL_UART_Transmit+0x80>
 8001f9e:	bf00      	nop

08001fa0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	b1c1      	cbz	r1, 8001fdc <HAL_UART_Transmit_IT+0x3c>
 8001faa:	b1ba      	cbz	r2, 8001fdc <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 8001fac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d015      	beq.n	8001fe0 <HAL_UART_Transmit_IT+0x40>
{
 8001fb4:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb6:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb8:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 8001fba:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fbe:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fc2:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8001fc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8001fc8:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fca:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 8001fcc:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8001fd2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fd4:	60e2      	str	r2, [r4, #12]
}
 8001fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fda:	4770      	bx	lr
      return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	4770      	bx	lr
    return HAL_BUSY;
 8001fe0:	2002      	movs	r0, #2
}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fe4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d11f      	bne.n	800202c <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8001fec:	b1e1      	cbz	r1, 8002028 <HAL_UART_Receive_IT+0x44>
 8001fee:	b1da      	cbz	r2, 8002028 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8001ff0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d019      	beq.n	800202c <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8001ffc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8002000:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002004:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8002006:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002008:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 800200a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800200c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002010:	b973      	cbnz	r3, 8002030 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002012:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002022:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002024:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002026:	4770      	bx	lr
      return HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	4770      	bx	lr
    return HAL_BUSY;
 800202c:	2002      	movs	r0, #2
}
 800202e:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	e7eb      	b.n	8002014 <HAL_UART_Receive_IT+0x30>

0800203c <HAL_UARTEx_ReceiveToIdle_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800203c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002040:	2b20      	cmp	r3, #32
 8002042:	d12a      	bne.n	800209a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
    if ((pData == NULL) || (Size == 0U))
 8002044:	b359      	cbz	r1, 800209e <HAL_UARTEx_ReceiveToIdle_IT+0x62>
 8002046:	b352      	cbz	r2, 800209e <HAL_UARTEx_ReceiveToIdle_IT+0x62>
    __HAL_LOCK(huart);
 8002048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d024      	beq.n	800209a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
{
 8002050:	b410      	push	{r4}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	2300      	movs	r3, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002054:	2401      	movs	r4, #1
 8002056:	6304      	str	r4, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8002058:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 800205c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002060:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8002062:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002064:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 8002066:	8582      	strh	r2, [r0, #44]	; 0x2c
{
 8002068:	b083      	sub	sp, #12
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800206a:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800206c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002070:	b11b      	cbz	r3, 800207a <HAL_UARTEx_ReceiveToIdle_IT+0x3e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002072:	68d3      	ldr	r3, [r2, #12]
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800207a:	6953      	ldr	r3, [r2, #20]
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002082:	68d3      	ldr	r3, [r2, #12]
 8002084:	f043 0320 	orr.w	r3, r3, #32
 8002088:	60d3      	str	r3, [r2, #12]
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800208a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800208c:	2b01      	cmp	r3, #1
 800208e:	d008      	beq.n	80020a2 <HAL_UARTEx_ReceiveToIdle_IT+0x66>
      return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
}
 8002092:	b003      	add	sp, #12
 8002094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002098:	4770      	bx	lr
    return HAL_BUSY;
 800209a:	2002      	movs	r0, #2
 800209c:	4770      	bx	lr
      return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
}
 80020a0:	4770      	bx	lr
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020a2:	2300      	movs	r3, #0
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	6853      	ldr	r3, [r2, #4]
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b0:	f102 030c 	add.w	r3, r2, #12
 80020b4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020bc:	f102 000c 	add.w	r0, r2, #12
 80020c0:	e840 3100 	strex	r1, r3, [r0]
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d1f3      	bne.n	80020b0 <HAL_UARTEx_ReceiveToIdle_IT+0x74>
    status =  UART_Start_Receive_IT(huart, pData, Size);
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7e2      	b.n	8002092 <HAL_UARTEx_ReceiveToIdle_IT+0x56>

080020cc <HAL_UART_TxCpltCallback>:
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <HAL_UART_RxCpltCallback>:
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop

080020d4 <HAL_UART_ErrorCallback>:
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <UART_DMAAbortOnError>:
{
 80020d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80020e2:	f7ff fff7 	bl	80020d4 <HAL_UART_ErrorCallback>
}
 80020e6:	bd08      	pop	{r3, pc}

080020e8 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e8:	6883      	ldr	r3, [r0, #8]
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	d044      	beq.n	800217a <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80020f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d039      	beq.n	800216a <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020f6:	6803      	ldr	r3, [r0, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020fe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002100:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002102:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8002104:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8002106:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002108:	3b01      	subs	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800210e:	2b00      	cmp	r3, #0
 8002110:	d132      	bne.n	8002178 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002112:	6802      	ldr	r2, [r0, #0]
 8002114:	68d1      	ldr	r1, [r2, #12]
 8002116:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800211a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800211c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800211e:	68d1      	ldr	r1, [r2, #12]
 8002120:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002124:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002126:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002128:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800212c:	f021 0101 	bic.w	r1, r1, #1
 8002130:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002132:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002136:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002138:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800213a:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800213c:	d127      	bne.n	800218e <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	f102 030c 	add.w	r3, r2, #12
 8002144:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002148:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	f102 0c0c 	add.w	ip, r2, #12
 8002150:	e84c 3100 	strex	r1, r3, [ip]
 8002154:	2900      	cmp	r1, #0
 8002156:	d1f3      	bne.n	8002140 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	06db      	lsls	r3, r3, #27
 800215c:	d421      	bmi.n	80021a2 <UART_Receive_IT.part.0.isra.0+0xba>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800215e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002160:	f003 f99c 	bl	800549c <HAL_UARTEx_RxEventCallback>
}
 8002164:	b003      	add	sp, #12
 8002166:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800216a:	6903      	ldr	r3, [r0, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1c2      	bne.n	80020f6 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	7013      	strb	r3, [r2, #0]
 8002176:	e7c3      	b.n	8002100 <UART_Receive_IT.part.0.isra.0+0x18>
 8002178:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217a:	6903      	ldr	r3, [r0, #16]
 800217c:	b963      	cbnz	r3, 8002198 <UART_Receive_IT.part.0.isra.0+0xb0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800217e:	6803      	ldr	r3, [r0, #0]
 8002180:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002188:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800218c:	e7ba      	b.n	8002104 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 800218e:	f7ff ff9f 	bl	80020d0 <HAL_UART_RxCpltCallback>
}
 8002192:	b003      	add	sp, #12
 8002194:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002198:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800219a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	7013      	strb	r3, [r2, #0]
 80021a0:	e7ae      	b.n	8002100 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021a2:	2300      	movs	r3, #0
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	6813      	ldr	r3, [r2, #0]
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	6853      	ldr	r3, [r2, #4]
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
 80021b0:	e7d5      	b.n	800215e <UART_Receive_IT.part.0.isra.0+0x76>
 80021b2:	bf00      	nop

080021b4 <HAL_UART_IRQHandler>:
{
 80021b4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ba:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021bc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80021be:	f012 0f0f 	tst.w	r2, #15
{
 80021c2:	b083      	sub	sp, #12
 80021c4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80021c6:	d16e      	bne.n	80022a6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021c8:	0695      	lsls	r5, r2, #26
 80021ca:	d502      	bpl.n	80021d2 <HAL_UART_IRQHandler+0x1e>
 80021cc:	068d      	lsls	r5, r1, #26
 80021ce:	f100 80b2 	bmi.w	8002336 <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021d4:	2801      	cmp	r0, #1
 80021d6:	d00b      	beq.n	80021f0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021d8:	0610      	lsls	r0, r2, #24
 80021da:	d502      	bpl.n	80021e2 <HAL_UART_IRQHandler+0x2e>
 80021dc:	060d      	lsls	r5, r1, #24
 80021de:	f100 80b4 	bmi.w	800234a <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021e2:	0650      	lsls	r0, r2, #25
 80021e4:	d502      	bpl.n	80021ec <HAL_UART_IRQHandler+0x38>
 80021e6:	064a      	lsls	r2, r1, #25
 80021e8:	f100 80ce 	bmi.w	8002388 <HAL_UART_IRQHandler+0x1d4>
}
 80021ec:	b003      	add	sp, #12
 80021ee:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021f0:	06d5      	lsls	r5, r2, #27
 80021f2:	d5f1      	bpl.n	80021d8 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021f4:	06c8      	lsls	r0, r1, #27
 80021f6:	d5ef      	bpl.n	80021d8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f8:	2200      	movs	r2, #0
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	9201      	str	r2, [sp, #4]
 8002204:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	0655      	lsls	r5, r2, #25
 800220a:	f140 811c 	bpl.w	8002446 <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800220e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002210:	6802      	ldr	r2, [r0, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002216:	2a00      	cmp	r2, #0
 8002218:	d0e8      	beq.n	80021ec <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800221a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800221c:	4291      	cmp	r1, r2
 800221e:	d9e5      	bls.n	80021ec <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8002220:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002222:	69c2      	ldr	r2, [r0, #28]
 8002224:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002228:	d036      	beq.n	8002298 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222a:	f103 020c 	add.w	r2, r3, #12
 800222e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002236:	f103 050c 	add.w	r5, r3, #12
 800223a:	e845 2100 	strex	r1, r2, [r5]
 800223e:	2900      	cmp	r1, #0
 8002240:	d1f3      	bne.n	800222a <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002242:	f103 0214 	add.w	r2, r3, #20
 8002246:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	f103 0514 	add.w	r5, r3, #20
 8002252:	e845 2100 	strex	r1, r2, [r5]
 8002256:	2900      	cmp	r1, #0
 8002258:	d1f3      	bne.n	8002242 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	f103 0214 	add.w	r2, r3, #20
 800225e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	f103 0514 	add.w	r5, r3, #20
 800226a:	e845 2100 	strex	r1, r2, [r5]
 800226e:	2900      	cmp	r1, #0
 8002270:	d1f3      	bne.n	800225a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8002272:	2220      	movs	r2, #32
 8002274:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002278:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227a:	f103 020c 	add.w	r2, r3, #12
 800227e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002282:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	f103 050c 	add.w	r5, r3, #12
 800228a:	e845 2100 	strex	r1, r2, [r5]
 800228e:	2900      	cmp	r1, #0
 8002290:	d1f3      	bne.n	800227a <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002292:	f7fe fd19 	bl	8000cc8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002296:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002298:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800229a:	1ac9      	subs	r1, r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	b289      	uxth	r1, r1
 80022a0:	f003 f8fc 	bl	800549c <HAL_UARTEx_RxEventCallback>
 80022a4:	e7a2      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022a6:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022aa:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80022ae:	4328      	orrs	r0, r5
 80022b0:	d08f      	beq.n	80021d2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022b2:	07d0      	lsls	r0, r2, #31
 80022b4:	d505      	bpl.n	80022c2 <HAL_UART_IRQHandler+0x10e>
 80022b6:	05c8      	lsls	r0, r1, #23
 80022b8:	d503      	bpl.n	80022c2 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022bc:	f040 0001 	orr.w	r0, r0, #1
 80022c0:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022c2:	0750      	lsls	r0, r2, #29
 80022c4:	d532      	bpl.n	800232c <HAL_UART_IRQHandler+0x178>
 80022c6:	b14d      	cbz	r5, 80022dc <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022ca:	f040 0002 	orr.w	r0, r0, #2
 80022ce:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d0:	0790      	lsls	r0, r2, #30
 80022d2:	d503      	bpl.n	80022dc <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022d6:	f040 0004 	orr.w	r0, r0, #4
 80022da:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022dc:	0710      	lsls	r0, r2, #28
 80022de:	d507      	bpl.n	80022f0 <HAL_UART_IRQHandler+0x13c>
 80022e0:	f001 0020 	and.w	r0, r1, #32
 80022e4:	4328      	orrs	r0, r5
 80022e6:	d003      	beq.n	80022f0 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022ea:	f040 0008 	orr.w	r0, r0, #8
 80022ee:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022f2:	2800      	cmp	r0, #0
 80022f4:	f43f af7a 	beq.w	80021ec <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f8:	0690      	lsls	r0, r2, #26
 80022fa:	d509      	bpl.n	8002310 <HAL_UART_IRQHandler+0x15c>
 80022fc:	0689      	lsls	r1, r1, #26
 80022fe:	d507      	bpl.n	8002310 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002300:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002304:	2a22      	cmp	r2, #34	; 0x22
 8002306:	d103      	bne.n	8002310 <HAL_UART_IRQHandler+0x15c>
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff feed 	bl	80020e8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002312:	6c21      	ldr	r1, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002314:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002318:	f001 0108 	and.w	r1, r1, #8
 800231c:	ea52 0501 	orrs.w	r5, r2, r1
 8002320:	d13d      	bne.n	800239e <HAL_UART_IRQHandler+0x1ea>
        HAL_UART_ErrorCallback(huart);
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fed6 	bl	80020d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	6425      	str	r5, [r4, #64]	; 0x40
 800232a:	e75f      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232c:	0790      	lsls	r0, r2, #30
 800232e:	d5d5      	bpl.n	80022dc <HAL_UART_IRQHandler+0x128>
 8002330:	2d00      	cmp	r5, #0
 8002332:	d1cf      	bne.n	80022d4 <HAL_UART_IRQHandler+0x120>
 8002334:	e7d2      	b.n	80022dc <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002336:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800233a:	2b22      	cmp	r3, #34	; 0x22
 800233c:	f47f af56 	bne.w	80021ec <HAL_UART_IRQHandler+0x38>
}
 8002340:	b003      	add	sp, #12
 8002342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002346:	f7ff becf 	b.w	80020e8 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800234e:	2a21      	cmp	r2, #33	; 0x21
 8002350:	f47f af4c 	bne.w	80021ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68a2      	ldr	r2, [r4, #8]
 8002356:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800235a:	f000 80ad 	beq.w	80024b8 <HAL_UART_IRQHandler+0x304>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800235e:	6a22      	ldr	r2, [r4, #32]
 8002360:	1c51      	adds	r1, r2, #1
 8002362:	6221      	str	r1, [r4, #32]
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002368:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800236a:	3a01      	subs	r2, #1
 800236c:	b292      	uxth	r2, r2
 800236e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002370:	2a00      	cmp	r2, #0
 8002372:	f47f af3b 	bne.w	80021ec <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e731      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002388:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800238a:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800238c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002390:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002392:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002394:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002398:	f7ff fe98 	bl	80020cc <HAL_UART_TxCpltCallback>
    return;
 800239c:	e726      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239e:	f103 020c 	add.w	r2, r3, #12
 80023a2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023aa:	f103 000c 	add.w	r0, r3, #12
 80023ae:	e840 2100 	strex	r1, r2, [r0]
 80023b2:	2900      	cmp	r1, #0
 80023b4:	d1f3      	bne.n	800239e <HAL_UART_IRQHandler+0x1ea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	f103 0214 	add.w	r2, r3, #20
 80023ba:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023be:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	f103 0014 	add.w	r0, r3, #20
 80023c6:	e840 2100 	strex	r1, r2, [r0]
 80023ca:	2900      	cmp	r1, #0
 80023cc:	d1f3      	bne.n	80023b6 <HAL_UART_IRQHandler+0x202>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023d0:	2a01      	cmp	r2, #1
 80023d2:	d027      	beq.n	8002424 <HAL_UART_IRQHandler+0x270>
  GPIOA->ODR ^= (1<<4);
 80023d4:	493e      	ldr	r1, [pc, #248]	; (80024d0 <HAL_UART_IRQHandler+0x31c>)
 80023d6:	694a      	ldr	r2, [r1, #20]
 80023d8:	f082 0210 	eor.w	r2, r2, #16
 80023dc:	614a      	str	r2, [r1, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80023de:	2020      	movs	r0, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e6:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	0652      	lsls	r2, r2, #25
 80023ec:	d527      	bpl.n	800243e <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	f103 0214 	add.w	r2, r3, #20
 80023f2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fa:	f103 0014 	add.w	r0, r3, #20
 80023fe:	e840 2100 	strex	r1, r2, [r0]
 8002402:	2900      	cmp	r1, #0
 8002404:	d1f3      	bne.n	80023ee <HAL_UART_IRQHandler+0x23a>
          if (huart->hdmarx != NULL)
 8002406:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002408:	b1c8      	cbz	r0, 800243e <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_UART_IRQHandler+0x320>)
 800240c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240e:	f7fe fca5 	bl	8000d5c <HAL_DMA_Abort_IT>
 8002412:	2800      	cmp	r0, #0
 8002414:	f43f aeea 	beq.w	80021ec <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002418:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800241a:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800241c:	b003      	add	sp, #12
 800241e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002422:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002424:	f103 020c 	add.w	r2, r3, #12
 8002428:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	f103 000c 	add.w	r0, r3, #12
 8002434:	e840 2100 	strex	r1, r2, [r0]
 8002438:	2900      	cmp	r1, #0
 800243a:	d1f3      	bne.n	8002424 <HAL_UART_IRQHandler+0x270>
 800243c:	e7ca      	b.n	80023d4 <HAL_UART_IRQHandler+0x220>
            HAL_UART_ErrorCallback(huart);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff fe48 	bl	80020d4 <HAL_UART_ErrorCallback>
 8002444:	e6d2      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002446:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8002448:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800244a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 800244c:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800244e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002450:	2a00      	cmp	r2, #0
 8002452:	f43f aecb 	beq.w	80021ec <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002456:	1a41      	subs	r1, r0, r1
 8002458:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800245a:	2900      	cmp	r1, #0
 800245c:	f43f aec6 	beq.w	80021ec <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002460:	f103 020c 	add.w	r2, r3, #12
 8002464:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	f103 050c 	add.w	r5, r3, #12
 8002470:	e845 2000 	strex	r0, r2, [r5]
 8002474:	2800      	cmp	r0, #0
 8002476:	d1f3      	bne.n	8002460 <HAL_UART_IRQHandler+0x2ac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	f103 0214 	add.w	r2, r3, #20
 800247c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002480:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	f103 0514 	add.w	r5, r3, #20
 8002488:	e845 2000 	strex	r0, r2, [r5]
 800248c:	2800      	cmp	r0, #0
 800248e:	d1f3      	bne.n	8002478 <HAL_UART_IRQHandler+0x2c4>
        huart->RxState = HAL_UART_STATE_READY;
 8002490:	2220      	movs	r2, #32
 8002492:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002496:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	f103 020c 	add.w	r2, r3, #12
 800249c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	f103 050c 	add.w	r5, r3, #12
 80024a8:	e845 2000 	strex	r0, r2, [r5]
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d1f3      	bne.n	8002498 <HAL_UART_IRQHandler+0x2e4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024b0:	4620      	mov	r0, r4
 80024b2:	f002 fff3 	bl	800549c <HAL_UARTEx_RxEventCallback>
 80024b6:	e699      	b.n	80021ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b8:	6922      	ldr	r2, [r4, #16]
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	f47f af4f 	bne.w	800235e <HAL_UART_IRQHandler+0x1aa>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024c0:	6a22      	ldr	r2, [r4, #32]
 80024c2:	f832 1b02 	ldrh.w	r1, [r2], #2
 80024c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80024ca:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024cc:	6222      	str	r2, [r4, #32]
 80024ce:	e74b      	b.n	8002368 <HAL_UART_IRQHandler+0x1b4>
 80024d0:	40020000 	.word	0x40020000
 80024d4:	080020d9 	.word	0x080020d9

080024d8 <USBD_CDC_EP0_RxReady>:

  return (uint8_t)ret;
}

static uint8_t USBD_CDC_EP0_RxReady(void *pdev)
{
 80024d8:	b510      	push	{r4, lr}
  if (hcdc == NULL)
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->CmdOpCode != 0xFFU)
 80024da:	4c08      	ldr	r4, [pc, #32]	; (80024fc <USBD_CDC_EP0_RxReady+0x24>)
 80024dc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80024e0:	28ff      	cmp	r0, #255	; 0xff
 80024e2:	d008      	beq.n	80024f6 <USBD_CDC_EP0_RxReady+0x1e>
  {
    USBD_CDC_Interface_fops_HS.Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <USBD_CDC_EP0_RxReady+0x28>)
 80024e6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4621      	mov	r1, r4
 80024ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80024f0:	23ff      	movs	r3, #255	; 0xff
 80024f2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }
  return (uint8_t)USBD_OK;
}
 80024f6:	2000      	movs	r0, #0
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	bf00      	nop
 80024fc:	20000400 	.word	0x20000400
 8002500:	20000304 	.word	0x20000304

08002504 <USBD_CDC_DataOut>:

  return (uint8_t)USBD_OK;
}

static uint8_t USBD_CDC_DataOut(void *pdev, uint8_t epnum)
{
 8002504:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = &cdcInstance;

  /* Get the received data length */
  hcdc->RxLength = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8002506:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800250a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  USBD_CDC_Interface_fops_HS.Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <USBD_CDC_DataOut+0x28>)
  hcdc->RxLength = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <USBD_CDC_DataOut+0x2c>)
 8002512:	f8d0 238c 	ldr.w	r2, [r0, #908]	; 0x38c
 8002516:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
  USBD_CDC_Interface_fops_HS.Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800251a:	f8d1 0204 	ldr.w	r0, [r1, #516]	; 0x204
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f501 7103 	add.w	r1, r1, #524	; 0x20c
 8002524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
}
 8002526:	2000      	movs	r0, #0
 8002528:	bd08      	pop	{r3, pc}
 800252a:	bf00      	nop
 800252c:	20000304 	.word	0x20000304
 8002530:	20000400 	.word	0x20000400

08002534 <USBD_CDC_GetHSCfgDesc>:

static uint8_t *USBD_CDC_GetHSCfgDesc(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002534:	2343      	movs	r3, #67	; 0x43
  return USBD_CDC_CfgDesc;
}
 8002536:	4801      	ldr	r0, [pc, #4]	; (800253c <USBD_CDC_GetHSCfgDesc+0x8>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002538:	800b      	strh	r3, [r1, #0]
}
 800253a:	4770      	bx	lr
 800253c:	20000044 	.word	0x20000044

08002540 <USBD_CDC_GetDeviceQualifierDescriptor>:
  return USBD_CDC_CfgDesc;
}

uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002540:	230a      	movs	r3, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8002542:	4801      	ldr	r0, [pc, #4]	; (8002548 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002544:	800b      	strh	r3, [r1, #0]
}
 8002546:	4770      	bx	lr
 8002548:	20000088 	.word	0x20000088

0800254c <USBD_CDC_DataIn>:
{
 800254c:	b508      	push	{r3, lr}
  if((((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[epnum & 0xFU].total_data_len >0U)
 800254e:	f001 030f 	and.w	r3, r1, #15
 8002552:	3301      	adds	r3, #1
 8002554:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002558:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
{
 800255c:	460a      	mov	r2, r1
  if((((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[epnum & 0xFU].total_data_len >0U)
 800255e:	f8dc 3114 	ldr.w	r3, [ip, #276]	; 0x114
 8002562:	b113      	cbz	r3, 800256a <USBD_CDC_DataIn+0x1e>
      && ((((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[epnum & 0xFU].total_data_len % CDC_DATA_HS_IN_PACKET_SIZE)==0U))
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	b16b      	cbz	r3, 8002586 <USBD_CDC_DataIn+0x3a>
    if (USBD_CDC_Interface_fops_HS.TransmitCplt != NULL)
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <USBD_CDC_DataIn+0x48>)
    hcdc->TxState = 0U;
 800256c:	490a      	ldr	r1, [pc, #40]	; (8002598 <USBD_CDC_DataIn+0x4c>)
    if (USBD_CDC_Interface_fops_HS.TransmitCplt != NULL)
 800256e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8002570:	2000      	movs	r0, #0
 8002572:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
    if (USBD_CDC_Interface_fops_HS.TransmitCplt != NULL)
 8002576:	b123      	cbz	r3, 8002582 <USBD_CDC_DataIn+0x36>
      USBD_CDC_Interface_fops_HS.TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8002578:	f8d1 0208 	ldr.w	r0, [r1, #520]	; 0x208
 800257c:	f501 7104 	add.w	r1, r1, #528	; 0x210
 8002580:	4798      	blx	r3
}
 8002582:	2000      	movs	r0, #0
 8002584:	bd08      	pop	{r3, pc}
      ((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[epnum & 0xFU].total_data_len = 0U;
 8002586:	f8cc 3114 	str.w	r3, [ip, #276]	; 0x114
    DCD_EP_Tx (pdev, epnum, NULL, 0);
 800258a:	461a      	mov	r2, r3
 800258c:	f002 f852 	bl	8004634 <DCD_EP_Tx>
}
 8002590:	2000      	movs	r0, #0
 8002592:	bd08      	pop	{r3, pc}
 8002594:	20000304 	.word	0x20000304
 8002598:	20000400 	.word	0x20000400

0800259c <USBD_CDC_Setup>:
{
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800259e:	780b      	ldrb	r3, [r1, #0]
{
 80025a0:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 80025a2:	f04f 0c00 	mov.w	ip, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025a6:	f013 0560 	ands.w	r5, r3, #96	; 0x60
{
 80025aa:	460c      	mov	r4, r1
  uint8_t ifalt = 0U;
 80025ac:	f88d c005 	strb.w	ip, [sp, #5]
  uint16_t status_info = 0U;
 80025b0:	f8ad c006 	strh.w	ip, [sp, #6]
{
 80025b4:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025b6:	d023      	beq.n	8002600 <USBD_CDC_Setup+0x64>
 80025b8:	2d20      	cmp	r5, #32
 80025ba:	d119      	bne.n	80025f0 <USBD_CDC_Setup+0x54>
      if (req->wLength != 0U)
 80025bc:	88cd      	ldrh	r5, [r1, #6]
 80025be:	2d00      	cmp	r5, #0
 80025c0:	d03c      	beq.n	800263c <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	d451      	bmi.n	800266a <USBD_CDC_Setup+0xce>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80025c6:	2d3f      	cmp	r5, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <USBD_CDC_Setup+0xfc>)
 80025ca:	784a      	ldrb	r2, [r1, #1]
 80025cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80025d0:	bf86      	itte	hi
 80025d2:	2440      	movhi	r4, #64	; 0x40
 80025d4:	4625      	movhi	r5, r4
 80025d6:	b2ec      	uxtbls	r4, r5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80025d8:	462a      	mov	r2, r5
 80025da:	492f      	ldr	r1, [pc, #188]	; (8002698 <USBD_CDC_Setup+0xfc>)
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80025dc:	f883 4201 	strb.w	r4, [r3, #513]	; 0x201
  USBD_Status ret = USBD_OK;
 80025e0:	2500      	movs	r5, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80025e2:	f002 fa79 	bl	8004ad8 <USBD_CtlPrepareRx>
 80025e6:	e008      	b.n	80025fa <USBD_CDC_Setup+0x5e>
          if (((USB_OTG_CORE_HANDLE *)pdev)->dev.device_state == USBD_STATE_CONFIGURED)
 80025e8:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d04c      	beq.n	800268a <USBD_CDC_Setup+0xee>
          USBD_CtlError(pdev, req);
 80025f0:	4621      	mov	r1, r4
 80025f2:	4630      	mov	r0, r6
 80025f4:	f002 fd16 	bl	8005024 <USBD_CtlError>
          ret = USBD_FAIL;
 80025f8:	2502      	movs	r5, #2
}
 80025fa:	4628      	mov	r0, r5
 80025fc:	b003      	add	sp, #12
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8002600:	784f      	ldrb	r7, [r1, #1]
 8002602:	2f0b      	cmp	r7, #11
 8002604:	d8f4      	bhi.n	80025f0 <USBD_CDC_Setup+0x54>
 8002606:	a301      	add	r3, pc, #4	; (adr r3, 800260c <USBD_CDC_Setup+0x70>)
 8002608:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800260c:	080025e9 	.word	0x080025e9
 8002610:	080025fb 	.word	0x080025fb
 8002614:	080025f1 	.word	0x080025f1
 8002618:	080025f1 	.word	0x080025f1
 800261c:	080025f1 	.word	0x080025f1
 8002620:	080025f1 	.word	0x080025f1
 8002624:	080025f1 	.word	0x080025f1
 8002628:	080025f1 	.word	0x080025f1
 800262c:	080025f1 	.word	0x080025f1
 8002630:	080025f1 	.word	0x080025f1
 8002634:	08002657 	.word	0x08002657
 8002638:	0800264d 	.word	0x0800264d
	  USBD_CDC_Interface_fops_HS.Control(req->bRequest, (uint8_t *)req, 0U);
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <USBD_CDC_Setup+0x100>)
 800263e:	7848      	ldrb	r0, [r1, #1]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	462a      	mov	r2, r5
 8002644:	4798      	blx	r3
}
 8002646:	4628      	mov	r0, r5
 8002648:	b003      	add	sp, #12
 800264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((USB_OTG_CORE_HANDLE *)pdev)->dev.device_state != USBD_STATE_CONFIGURED)
 800264c:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
 8002650:	2b03      	cmp	r3, #3
 8002652:	d0d2      	beq.n	80025fa <USBD_CDC_Setup+0x5e>
 8002654:	e7cc      	b.n	80025f0 <USBD_CDC_Setup+0x54>
          if (((USB_OTG_CORE_HANDLE *)pdev)->dev.device_state == USBD_STATE_CONFIGURED)
 8002656:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
 800265a:	2b03      	cmp	r3, #3
 800265c:	d1c8      	bne.n	80025f0 <USBD_CDC_Setup+0x54>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800265e:	2201      	movs	r2, #1
 8002660:	f10d 0105 	add.w	r1, sp, #5
 8002664:	f002 fa22 	bl	8004aac <USBD_CtlSendData>
 8002668:	e7c7      	b.n	80025fa <USBD_CDC_Setup+0x5e>
            USBD_CDC_Interface_fops_HS.Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <USBD_CDC_Setup+0x100>)
 800266c:	490a      	ldr	r1, [pc, #40]	; (8002698 <USBD_CDC_Setup+0xfc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	7860      	ldrb	r0, [r4, #1]
 8002672:	462a      	mov	r2, r5
  USBD_Status ret = USBD_OK;
 8002674:	4665      	mov	r5, ip
            USBD_CDC_Interface_fops_HS.Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 8002676:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8002678:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800267a:	4907      	ldr	r1, [pc, #28]	; (8002698 <USBD_CDC_Setup+0xfc>)
 800267c:	2a07      	cmp	r2, #7
 800267e:	bf28      	it	cs
 8002680:	2207      	movcs	r2, #7
 8002682:	4630      	mov	r0, r6
 8002684:	f002 fa12 	bl	8004aac <USBD_CtlSendData>
 8002688:	e7b7      	b.n	80025fa <USBD_CDC_Setup+0x5e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800268a:	2202      	movs	r2, #2
 800268c:	f10d 0106 	add.w	r1, sp, #6
 8002690:	f002 fa0c 	bl	8004aac <USBD_CtlSendData>
  USBD_Status ret = USBD_OK;
 8002694:	463d      	mov	r5, r7
 8002696:	e7b0      	b.n	80025fa <USBD_CDC_Setup+0x5e>
 8002698:	20000400 	.word	0x20000400
 800269c:	20000304 	.word	0x20000304

080026a0 <USBD_CDC_DeInit>:
{
 80026a0:	b538      	push	{r3, r4, r5, lr}
  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_cdc_acm = NULL;
 80026a2:	2500      	movs	r5, #0
{
 80026a4:	4604      	mov	r4, r0
  DCD_EP_Close(pdev, CDCInEpAdd);
 80026a6:	2182      	movs	r1, #130	; 0x82
  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_cdc_acm = NULL;
 80026a8:	f8c0 55ec 	str.w	r5, [r0, #1516]	; 0x5ec
  DCD_EP_Close(pdev, CDCInEpAdd);
 80026ac:	f001 ff82 	bl	80045b4 <DCD_EP_Close>
  DCD_EP_Close(pdev, CDCOutEpAdd);
 80026b0:	2101      	movs	r1, #1
 80026b2:	4620      	mov	r0, r4
 80026b4:	f001 ff7e 	bl	80045b4 <DCD_EP_Close>
  DCD_EP_Close(pdev, CDCCmdEpAdd);
 80026b8:	2183      	movs	r1, #131	; 0x83
 80026ba:	4620      	mov	r0, r4
 80026bc:	f001 ff7a 	bl	80045b4 <DCD_EP_Close>
  USBD_CDC_Interface_fops_HS.DeInit();
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <USBD_CDC_DeInit+0x2c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4798      	blx	r3
}
 80026c6:	4628      	mov	r0, r5
 80026c8:	bd38      	pop	{r3, r4, r5, pc}
 80026ca:	bf00      	nop
 80026cc:	20000304 	.word	0x20000304

080026d0 <USBD_CDC_Init>:
{
 80026d0:	b538      	push	{r3, r4, r5, lr}
  if(((USB_OTG_CORE_HANDLE *)pdev)->cfg.speed == USB_OTG_SPEED_HIGH)
 80026d2:	7883      	ldrb	r3, [r0, #2]
  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_cdc_acm = &cdcInstance;
 80026d4:	4d19      	ldr	r5, [pc, #100]	; (800273c <USBD_CDC_Init+0x6c>)
 80026d6:	f8c0 55ec 	str.w	r5, [r0, #1516]	; 0x5ec
{
 80026da:	4604      	mov	r4, r0
  if(((USB_OTG_CORE_HANDLE *)pdev)->cfg.speed == USB_OTG_SPEED_HIGH)
 80026dc:	b1ab      	cbz	r3, 800270a <USBD_CDC_Init+0x3a>
  DCD_EP_Open(pdev, CDCCmdEpAdd, CDC_CMD_PACKET_SIZE, USB_OTG_EP_INT);
 80026de:	2208      	movs	r2, #8
 80026e0:	2303      	movs	r3, #3
 80026e2:	2183      	movs	r1, #131	; 0x83
 80026e4:	4620      	mov	r0, r4
 80026e6:	f001 ff2b 	bl	8004540 <DCD_EP_Open>
  USBD_CDC_Interface_fops_HS.Init();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <USBD_CDC_Init+0x70>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 80026f0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80026fa:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 80026fe:	b1d2      	cbz	r2, 8002736 <USBD_CDC_Init+0x66>
  if (((USB_OTG_CORE_HANDLE *)pdev)->cfg.speed == USB_OTG_SPEED_HIGH)
 8002700:	78a5      	ldrb	r5, [r4, #2]
 8002702:	b185      	cbz	r5, 8002726 <USBD_CDC_Init+0x56>
  return (uint8_t)USBD_OK;
 8002704:	461d      	mov	r5, r3
}
 8002706:	4628      	mov	r0, r5
 8002708:	bd38      	pop	{r3, r4, r5, pc}
      DCD_EP_Open(pdev, CDCInEpAdd, CDC_DATA_HS_IN_PACKET_SIZE, USB_OTG_EP_BULK);
 800270a:	2302      	movs	r3, #2
 800270c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002710:	2182      	movs	r1, #130	; 0x82
 8002712:	f001 ff15 	bl	8004540 <DCD_EP_Open>
      DCD_EP_Open(pdev, CDCOutEpAdd,  CDC_DATA_HS_OUT_PACKET_SIZE, USB_OTG_EP_BULK);
 8002716:	2302      	movs	r3, #2
 8002718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271c:	2101      	movs	r1, #1
 800271e:	4620      	mov	r0, r4
 8002720:	f001 ff0e 	bl	8004540 <DCD_EP_Open>
 8002724:	e7db      	b.n	80026de <USBD_CDC_Init+0xe>
      DCD_EP_PrepareRx(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 8002726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272a:	2101      	movs	r1, #1
 800272c:	4620      	mov	r0, r4
 800272e:	f001 ff5b 	bl	80045e8 <DCD_EP_PrepareRx>
}
 8002732:	4628      	mov	r0, r5
 8002734:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8002736:	2502      	movs	r5, #2
}
 8002738:	4628      	mov	r0, r5
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	20000400 	.word	0x20000400
 8002740:	20000304 	.word	0x20000304

08002744 <USBD_CDC_GetFSCfgDesc>:
 8002744:	2343      	movs	r3, #67	; 0x43
 8002746:	4801      	ldr	r0, [pc, #4]	; (800274c <USBD_CDC_GetFSCfgDesc+0x8>)
 8002748:	800b      	strh	r3, [r1, #0]
 800274a:	4770      	bx	lr
 800274c:	20000044 	.word	0x20000044

08002750 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8002750:	2343      	movs	r3, #67	; 0x43
 8002752:	4801      	ldr	r0, [pc, #4]	; (8002758 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002754:	800b      	strh	r3, [r1, #0]
 8002756:	4770      	bx	lr
 8002758:	20000044 	.word	0x20000044

0800275c <USBD_CDC_SetTxBuffer>:

uint8_t USBD_CDC_SetTxBuffer(uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = &cdcInstance;;

  hcdc->TxBuffer = pbuff;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <USBD_CDC_SetTxBuffer+0x10>)
 800275e:	f8c3 0208 	str.w	r0, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002762:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8002766:	2000      	movs	r0, #0
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000400 	.word	0x20000400

08002770 <USBD_CDC_SetRxBuffer>:

uint8_t USBD_CDC_SetRxBuffer(uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = &cdcInstance;

  hcdc->RxBuffer = pbuff;
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <USBD_CDC_SetRxBuffer+0xc>)
 8002772:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8002776:	2000      	movs	r0, #0
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000400 	.word	0x20000400

08002780 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(void *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = &cdcInstance;
  USBD_Status ret = USBD_BUSY;

  if (hcdc->TxState == 0U)
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <USBD_CDC_TransmitPacket+0x2c>)
{
 8002782:	b510      	push	{r4, lr}
  if (hcdc->TxState == 0U)
 8002784:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002788:	b10c      	cbz	r4, 800278e <USBD_CDC_TransmitPacket+0xe>

    ret = USBD_OK;
  }
  else
  {
    return USBD_BUSY;
 800278a:	2001      	movs	r0, #1
  }

  return (uint8_t)ret;
}
 800278c:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800278e:	2301      	movs	r3, #1
 8002790:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    ((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[CDCInEpAdd & 0xFU].total_data_len = hcdc->TxLength;
 8002794:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    DCD_EP_Tx (pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8002798:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    ((USB_OTG_CORE_HANDLE *)pdev)->dev.in_ep[CDCInEpAdd & 0xFU].total_data_len = hcdc->TxLength;
 800279c:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
    DCD_EP_Tx (pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80027a0:	2182      	movs	r1, #130	; 0x82
 80027a2:	f001 ff47 	bl	8004634 <DCD_EP_Tx>
  return (uint8_t)ret;
 80027a6:	4620      	mov	r0, r4
}
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	bf00      	nop
 80027ac:	20000400 	.word	0x20000400

080027b0 <USBD_CDC_ReceivePacket>:

uint8_t USBD_CDC_ReceivePacket(void *pdev)
{
 80027b0:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = &cdcInstance;

  if (((USB_OTG_CORE_HANDLE *)pdev)->cfg.speed == USB_OTG_SPEED_HIGH)
 80027b2:	7883      	ldrb	r3, [r0, #2]
  {
    /* Prepare Out endpoint to receive next packet */
    DCD_EP_PrepareRx(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <USBD_CDC_ReceivePacket+0x2c>)
  if (((USB_OTG_CORE_HANDLE *)pdev)->cfg.speed == USB_OTG_SPEED_HIGH)
 80027b6:	b943      	cbnz	r3, 80027ca <USBD_CDC_ReceivePacket+0x1a>
    DCD_EP_PrepareRx(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 80027b8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80027bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c0:	2101      	movs	r1, #1
 80027c2:	f001 ff11 	bl	80045e8 <DCD_EP_PrepareRx>
    /* Prepare Out endpoint to receive next packet */
      DCD_EP_PrepareRx(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80027c6:	2000      	movs	r0, #0
 80027c8:	bd08      	pop	{r3, pc}
      DCD_EP_PrepareRx(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 80027ca:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	2101      	movs	r1, #1
 80027d2:	f001 ff09 	bl	80045e8 <DCD_EP_PrepareRx>
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	bd08      	pop	{r3, pc}
 80027da:	bf00      	nop
 80027dc:	20000400 	.word	0x20000400

080027e0 <USBD_UVC_CDC_EP0_RxReady>:

  return (uint8_t)USBD_FAIL;
}

static uint8_t USBD_UVC_CDC_EP0_RxReady(void *pdev)
{
 80027e0:	b508      	push	{r3, lr}
  UNUSED(pdev);

  USBD_CDC.EP0_RxReady(pdev);
 80027e2:	4b02      	ldr	r3, [pc, #8]	; (80027ec <USBD_UVC_CDC_EP0_RxReady+0xc>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
}
 80027e8:	2000      	movs	r0, #0
 80027ea:	bd08      	pop	{r3, pc}
 80027ec:	20000008 	.word	0x20000008

080027f0 <USBD_UVC_CDC_SOF>:
  return (uint8_t)USBD_OK;
}

static uint8_t USBD_UVC_CDC_SOF(void *pdev)
{
  uint8_t ret = USBD_UVC.SOF(pdev);
 80027f0:	4b01      	ldr	r3, [pc, #4]	; (80027f8 <USBD_UVC_CDC_SOF+0x8>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4718      	bx	r3
 80027f6:	bf00      	nop
 80027f8:	200001c8 	.word	0x200001c8

080027fc <USBD_UVC_CDC_IsoINIncomplete>:
static uint8_t USBD_UVC_CDC_IsoINIncomplete(void *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 80027fc:	2000      	movs	r0, #0
 80027fe:	4770      	bx	lr

08002800 <USBD_UVC_CDC_GetCfgDesc>:
  return (uint8_t)USBD_OK;
}

static uint8_t *USBD_UVC_CDC_GetCfgDesc(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_UVC_CDC_CfgDesc);
 8002800:	23e9      	movs	r3, #233	; 0xe9

  return USBD_UVC_CDC_CfgDesc;
}
 8002802:	4801      	ldr	r0, [pc, #4]	; (8002808 <USBD_UVC_CDC_GetCfgDesc+0x8>)
  *length = (uint16_t)sizeof(USBD_UVC_CDC_CfgDesc);
 8002804:	800b      	strh	r3, [r1, #0]
}
 8002806:	4770      	bx	lr
 8002808:	20000094 	.word	0x20000094

0800280c <USBD_UVC_CDC_GetDeviceQualifierDesc>:

static uint8_t *USBD_UVC_CDC_GetDeviceQualifierDesc(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_UVC_CDC_DeviceQualifierDesc);
 800280c:	230a      	movs	r3, #10

  return USBD_UVC_CDC_DeviceQualifierDesc;
}
 800280e:	4801      	ldr	r0, [pc, #4]	; (8002814 <USBD_UVC_CDC_GetDeviceQualifierDesc+0x8>)
  *length = (uint16_t)sizeof(USBD_UVC_CDC_DeviceQualifierDesc);
 8002810:	800b      	strh	r3, [r1, #0]
}
 8002812:	4770      	bx	lr
 8002814:	200001bc 	.word	0x200001bc

08002818 <USBD_UVC_CDC_Init>:
    uint8_t ret = USBD_UVC.Init(pdev,cfgidx);
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <USBD_UVC_CDC_Init+0x20>)
{
 800281a:	b570      	push	{r4, r5, r6, lr}
    uint8_t ret = USBD_UVC.Init(pdev,cfgidx);
 800281c:	681b      	ldr	r3, [r3, #0]
{
 800281e:	4604      	mov	r4, r0
 8002820:	460d      	mov	r5, r1
    uint8_t ret = USBD_UVC.Init(pdev,cfgidx);
 8002822:	4798      	blx	r3
    if(ret != USBD_OK)
 8002824:	b930      	cbnz	r0, 8002834 <USBD_UVC_CDC_Init+0x1c>
    ret = USBD_CDC.Init(pdev,cfgidx);
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <USBD_UVC_CDC_Init+0x24>)
 8002828:	4629      	mov	r1, r5
 800282a:	4620      	mov	r0, r4
 800282c:	681b      	ldr	r3, [r3, #0]
}
 800282e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = USBD_CDC.Init(pdev,cfgidx);
 8002832:	4718      	bx	r3
}
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	bf00      	nop
 8002838:	200001c8 	.word	0x200001c8
 800283c:	20000008 	.word	0x20000008

08002840 <USBD_UVC_CDC_DeInit>:
  uint8_t ret = USBD_UVC.DeInit(pdev,cfgidx);
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <USBD_UVC_CDC_DeInit+0x20>)
{
 8002842:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret = USBD_UVC.DeInit(pdev,cfgidx);
 8002844:	685b      	ldr	r3, [r3, #4]
{
 8002846:	4604      	mov	r4, r0
 8002848:	460d      	mov	r5, r1
  uint8_t ret = USBD_UVC.DeInit(pdev,cfgidx);
 800284a:	4798      	blx	r3
  if(ret != USBD_OK)
 800284c:	b930      	cbnz	r0, 800285c <USBD_UVC_CDC_DeInit+0x1c>
  ret = USBD_CDC.DeInit(pdev,cfgidx);
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <USBD_UVC_CDC_DeInit+0x24>)
 8002850:	4629      	mov	r1, r5
 8002852:	4620      	mov	r0, r4
 8002854:	685b      	ldr	r3, [r3, #4]
}
 8002856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = USBD_CDC.DeInit(pdev,cfgidx);
 800285a:	4718      	bx	r3
}
 800285c:	bd70      	pop	{r4, r5, r6, pc}
 800285e:	bf00      	nop
 8002860:	200001c8 	.word	0x200001c8
 8002864:	20000008 	.word	0x20000008

08002868 <USBD_UVC_CDC_Setup>:
    if (LOBYTE(req->wIndex) == USB_UVC_VCIF_NUM || LOBYTE(req->wIndex) == USB_UVC_VSIF_NUM)
 8002868:	790b      	ldrb	r3, [r1, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d907      	bls.n	800287e <USBD_UVC_CDC_Setup+0x16>
    if (LOBYTE(req->wIndex) == _CDC_CMD_ITF_NBR || LOBYTE(req->wIndex) == _CDC_COM_ITF_NBR)
 800286e:	3b02      	subs	r3, #2
 8002870:	2b01      	cmp	r3, #1
 8002872:	d901      	bls.n	8002878 <USBD_UVC_CDC_Setup+0x10>
}
 8002874:	2002      	movs	r0, #2
 8002876:	4770      	bx	lr
      return USBD_CDC.Setup(pdev, req);
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <USBD_UVC_CDC_Setup+0x1c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4718      	bx	r3
      return USBD_UVC.Setup(pdev, req);
 800287e:	4b02      	ldr	r3, [pc, #8]	; (8002888 <USBD_UVC_CDC_Setup+0x20>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4718      	bx	r3
 8002884:	20000008 	.word	0x20000008
 8002888:	200001c8 	.word	0x200001c8

0800288c <USBD_UVC_CDC_DataIn>:
  if (epnum == (_UVC_IN_EP & 0x7F))
 800288c:	2901      	cmp	r1, #1
 800288e:	d007      	beq.n	80028a0 <USBD_UVC_CDC_DataIn+0x14>
  if (epnum == (_CDC_IN_EP & 0x7F) || epnum == (_CDC_CMD_EP & 0x7F))
 8002890:	1e8b      	subs	r3, r1, #2
 8002892:	2b01      	cmp	r3, #1
 8002894:	d901      	bls.n	800289a <USBD_UVC_CDC_DataIn+0xe>
}
 8002896:	2002      	movs	r0, #2
 8002898:	4770      	bx	lr
    return USBD_CDC.DataIn(pdev, epnum);
 800289a:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <USBD_UVC_CDC_DataIn+0x1c>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4718      	bx	r3
    return USBD_UVC.DataIn(pdev, epnum);
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <USBD_UVC_CDC_DataIn+0x20>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	4718      	bx	r3
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008
 80028ac:	200001c8 	.word	0x200001c8

080028b0 <USBD_UVC_CDC_DataOut>:
  if (epnum == _CDC_OUT_EP)
 80028b0:	2901      	cmp	r1, #1
 80028b2:	d001      	beq.n	80028b8 <USBD_UVC_CDC_DataOut+0x8>
}
 80028b4:	2000      	movs	r0, #0
 80028b6:	4770      	bx	lr
    return USBD_CDC.DataOut(pdev, epnum);
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <USBD_UVC_CDC_DataOut+0x10>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4718      	bx	r3
 80028be:	bf00      	nop
 80028c0:	20000008 	.word	0x20000008

080028c4 <USBD_UVC_CDC_IsoOutIncomplete>:
 80028c4:	2000      	movs	r0, #0
 80028c6:	4770      	bx	lr

080028c8 <USBD_UVC_EP0_RxReady>:

static uint8_t USBD_UVC_EP0_RxReady(void *pdev)
{

  return (uint8_t)USBD_OK;
}
 80028c8:	2000      	movs	r0, #0
 80028ca:	4770      	bx	lr

080028cc <USBD_UVC_DataOut>:

static uint8_t USBD_UVC_DataOut(void *pdev, uint8_t epnum)
{

  return (uint8_t)USBD_OK;
}
 80028cc:	2000      	movs	r0, #0
 80028ce:	4770      	bx	lr

080028d0 <USBD_UVC_GetCfgDesc>:
  return (uint8_t)USBD_OK;
}

static uint8_t *USBD_UVC_GetCfgDesc(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_UVC_CfgDesc);
 80028d0:	23a7      	movs	r3, #167	; 0xa7

  return USBD_UVC_CfgDesc;
}
 80028d2:	4801      	ldr	r0, [pc, #4]	; (80028d8 <USBD_UVC_GetCfgDesc+0x8>)
  *length = (uint16_t)sizeof(USBD_UVC_CfgDesc);
 80028d4:	800b      	strh	r3, [r1, #0]
}
 80028d6:	4770      	bx	lr
 80028d8:	20000204 	.word	0x20000204

080028dc <USBD_UVC_GetDeviceQualifierDesc>:

static uint8_t *USBD_UVC_GetDeviceQualifierDesc(uint8_t speed, uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_UVC_DeviceQualifierDesc);
 80028dc:	230a      	movs	r3, #10

  return USBD_UVC_DeviceQualifierDesc;
}
 80028de:	4801      	ldr	r0, [pc, #4]	; (80028e4 <USBD_UVC_GetDeviceQualifierDesc+0x8>)
  *length = (uint16_t)sizeof(USBD_UVC_DeviceQualifierDesc);
 80028e0:	800b      	strh	r3, [r1, #0]
}
 80028e2:	4770      	bx	lr
 80028e4:	200002ac 	.word	0x200002ac

080028e8 <USBD_UVC_SOF>:
{
 80028e8:	b570      	push	{r4, r5, r6, lr}
  USBD_UVC_HandleTypeDef *huvc =  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_uvc;
 80028ea:	f8d0 55f0 	ldr.w	r5, [r0, #1520]	; 0x5f0
  if (huvc->PlayStatus == 1)
 80028ee:	792b      	ldrb	r3, [r5, #4]
 80028f0:	2b01      	cmp	r3, #1
{
 80028f2:	b082      	sub	sp, #8
  if (huvc->PlayStatus == 1)
 80028f4:	d002      	beq.n	80028fc <USBD_UVC_SOF+0x14>
}
 80028f6:	2000      	movs	r0, #0
 80028f8:	b002      	add	sp, #8
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
	  uint16_t buf=0x0002;
 80028fc:	2602      	movs	r6, #2
 80028fe:	4604      	mov	r4, r0
	  DCD_EP_Flush (pdev, USB_ENDPOINT_IN(USB_UVC_ENDPOINT));
 8002900:	2181      	movs	r1, #129	; 0x81
 8002902:	f001 fef3 	bl	80046ec <DCD_EP_Flush>
	  DCD_EP_Tx(pdev, USB_ENDPOINT_IN(USB_UVC_ENDPOINT), (uint8_t*)&buf, (uint32_t)2);
 8002906:	4633      	mov	r3, r6
 8002908:	f10d 0206 	add.w	r2, sp, #6
 800290c:	4620      	mov	r0, r4
 800290e:	2181      	movs	r1, #129	; 0x81
	  uint16_t buf=0x0002;
 8002910:	f8ad 6006 	strh.w	r6, [sp, #6]
	  DCD_EP_Tx(pdev, USB_ENDPOINT_IN(USB_UVC_ENDPOINT), (uint8_t*)&buf, (uint32_t)2);
 8002914:	f001 fe8e 	bl	8004634 <DCD_EP_Tx>
}
 8002918:	2000      	movs	r0, #0
	  huvc->PlayStatus = 2;
 800291a:	712e      	strb	r6, [r5, #4]
}
 800291c:	b002      	add	sp, #8
 800291e:	bd70      	pop	{r4, r5, r6, pc}

08002920 <USBD_UVC_DataIn>:
{
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_UVC_HandleTypeDef *huvc =  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_uvc;
 8002924:	f8d0 55f0 	ldr.w	r5, [r0, #1520]	; 0x5f0
{
 8002928:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
  DCD_EP_Flush(pdev, USB_ENDPOINT_IN(1));
 800292c:	2181      	movs	r1, #129	; 0x81
{
 800292e:	4606      	mov	r6, r0
  DCD_EP_Flush(pdev, USB_ENDPOINT_IN(1));
 8002930:	f001 fedc 	bl	80046ec <DCD_EP_Flush>
  if (huvc->FrameBytesCount >= MAX_FRAME_SIZE)
 8002934:	68ac      	ldr	r4, [r5, #8]
 8002936:	f5b4 2f16 	cmp.w	r4, #614400	; 0x96000
 800293a:	d234      	bcs.n	80029a6 <USBD_UVC_DataIn+0x86>
	  ptr->FlagFrameTrans=0;
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <USBD_UVC_DataIn+0xc8>)
	  huvc->FrameToggleByte ^= 1;
 800293e:	7b29      	ldrb	r1, [r5, #12]
    if(ptr->FlagFrameTrans)
 8002940:	681b      	ldr	r3, [r3, #0]
	*ptr_packet++ = header[1];
 8002942:	f88d 1005 	strb.w	r1, [sp, #5]
    if(ptr->FlagFrameTrans)
 8002946:	7a99      	ldrb	r1, [r3, #10]
	*ptr_packet++ = header[0];
 8002948:	2302      	movs	r3, #2
 800294a:	aa01      	add	r2, sp, #4
 800294c:	7013      	strb	r3, [r2, #0]
    if(ptr->FlagFrameTrans)
 800294e:	b311      	cbz	r1, 8002996 <USBD_UVC_DataIn+0x76>
	uint16_t *ptr_data = (uint16_t*)(0xC0000000 +packet_cnt*(UVC_IN_EP1_PACKET_SIZE-2));
 8002950:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80029ec <USBD_UVC_DataIn+0xcc>
 8002954:	f8d8 7000 	ldr.w	r7, [r8]
 8002958:	ebc7 1007 	rsb	r0, r7, r7, lsl #4
 800295c:	0180      	lsls	r0, r0, #6
	while (packet_size < UVC_IN_EP1_PACKET_SIZE && huvc->FrameBytesCount < MAX_FRAME_SIZE)
 800295e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8002962:	4611      	mov	r1, r2
 8002964:	f240 3ec2 	movw	lr, #962	; 0x3c2
 8002968:	3802      	subs	r0, #2
 800296a:	e00e      	b.n	800298a <USBD_UVC_DataIn+0x6a>
	      *ptr_packet++ = *ptr_data >> 8;
 800296c:	f830 c003 	ldrh.w	ip, [r0, r3]
	while (packet_size < UVC_IN_EP1_PACKET_SIZE && huvc->FrameBytesCount < MAX_FRAME_SIZE)
 8002970:	3102      	adds	r1, #2
	      *ptr_packet++ = *ptr_data >> 8;
 8002972:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8002976:	f881 c000 	strb.w	ip, [r1]
	      *ptr_packet++ = *ptr_data++;
 800297a:	5ac4      	ldrh	r4, [r0, r3]
 800297c:	704c      	strb	r4, [r1, #1]
	      huvc->FrameBytesCount += 2;
 800297e:	68ac      	ldr	r4, [r5, #8]
	      packet_size += 2;
 8002980:	3302      	adds	r3, #2
	      huvc->FrameBytesCount += 2;
 8002982:	3402      	adds	r4, #2
	while (packet_size < UVC_IN_EP1_PACKET_SIZE && huvc->FrameBytesCount < MAX_FRAME_SIZE)
 8002984:	4573      	cmp	r3, lr
	      huvc->FrameBytesCount += 2;
 8002986:	60ac      	str	r4, [r5, #8]
	while (packet_size < UVC_IN_EP1_PACKET_SIZE && huvc->FrameBytesCount < MAX_FRAME_SIZE)
 8002988:	d002      	beq.n	8002990 <USBD_UVC_DataIn+0x70>
 800298a:	f5b4 2f16 	cmp.w	r4, #614400	; 0x96000
 800298e:	d3ed      	bcc.n	800296c <USBD_UVC_DataIn+0x4c>
	packet_cnt++;
 8002990:	3701      	adds	r7, #1
 8002992:	f8c8 7000 	str.w	r7, [r8]
    if(huvc->PlayStatus == 2)
 8002996:	7929      	ldrb	r1, [r5, #4]
 8002998:	2902      	cmp	r1, #2
 800299a:	d01c      	beq.n	80029d6 <USBD_UVC_DataIn+0xb6>
}
 800299c:	2000      	movs	r0, #0
 800299e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80029a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  ptr->FlagFrameTrans=0;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <USBD_UVC_DataIn+0xc8>)
	  huvc->FrameToggleByte ^= 1;
 80029a8:	7b29      	ldrb	r1, [r5, #12]
	  ptr->FlagFrameTrans=0;
 80029aa:	681a      	ldr	r2, [r3, #0]
	  packet_cnt=0;
 80029ac:	480f      	ldr	r0, [pc, #60]	; (80029ec <USBD_UVC_DataIn+0xcc>)
	  huvc->FrameBytesCount = 0;
 80029ae:	2300      	movs	r3, #0
	  huvc->FrameToggleByte ^= 1;
 80029b0:	f081 0101 	eor.w	r1, r1, #1
 80029b4:	7329      	strb	r1, [r5, #12]
	  huvc->FrameBytesCount = 0;
 80029b6:	60ab      	str	r3, [r5, #8]
	  ptr->FlagFrameTrans=0;
 80029b8:	7293      	strb	r3, [r2, #10]
	  GPIOC->ODR &= ~(1<<5);
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <USBD_UVC_DataIn+0xd0>)
	  packet_cnt=0;
 80029bc:	6003      	str	r3, [r0, #0]
	  GPIOC->ODR &= ~(1<<5);
 80029be:	6953      	ldr	r3, [r2, #20]
 80029c0:	f023 0320 	bic.w	r3, r3, #32
 80029c4:	6153      	str	r3, [r2, #20]
	*ptr_packet++ = header[1];
 80029c6:	f88d 1005 	strb.w	r1, [sp, #5]
    if(huvc->PlayStatus == 2)
 80029ca:	7929      	ldrb	r1, [r5, #4]
	*ptr_packet++ = header[0];
 80029cc:	2302      	movs	r3, #2
    if(huvc->PlayStatus == 2)
 80029ce:	2902      	cmp	r1, #2
	*ptr_packet++ = header[0];
 80029d0:	aa01      	add	r2, sp, #4
 80029d2:	7013      	strb	r3, [r2, #0]
    if(huvc->PlayStatus == 2)
 80029d4:	d1e2      	bne.n	800299c <USBD_UVC_DataIn+0x7c>
	DCD_EP_Tx( pdev, USB_ENDPOINT_IN(1), (uint8_t*)&packet, (uint32_t)packet_size);
 80029d6:	2181      	movs	r1, #129	; 0x81
 80029d8:	4630      	mov	r0, r6
 80029da:	f001 fe2b 	bl	8004634 <DCD_EP_Tx>
}
 80029de:	2000      	movs	r0, #0
 80029e0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80029e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029e8:	200002b8 	.word	0x200002b8
 80029ec:	2000061c 	.word	0x2000061c
 80029f0:	40020800 	.word	0x40020800

080029f4 <USBD_UVC_DeInit>:
{
 80029f4:	b510      	push	{r4, lr}
  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_uvc = NULL;
 80029f6:	2400      	movs	r4, #0
 80029f8:	f8c0 45f0 	str.w	r4, [r0, #1520]	; 0x5f0
  DCD_EP_Close (pdev , USB_ENDPOINT_IN(1));
 80029fc:	2181      	movs	r1, #129	; 0x81
 80029fe:	f001 fdd9 	bl	80045b4 <DCD_EP_Close>
}
 8002a02:	4620      	mov	r0, r4
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	bf00      	nop

08002a08 <USBD_UVC_Init>:
{
 8002a08:	b508      	push	{r3, lr}
  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_uvc = &uvcInstance;
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <USBD_UVC_Init+0x18>)
 8002a0c:	f8c0 35f0 	str.w	r3, [r0, #1520]	; 0x5f0
  DCD_EP_Open(pdev, USB_ENDPOINT_IN(1), VIDEO_PACKET_SIZE, USB_OTG_EP_ISOC);
 8002a10:	f641 32ff 	movw	r2, #7167	; 0x1bff
 8002a14:	2301      	movs	r3, #1
 8002a16:	2181      	movs	r1, #129	; 0x81
 8002a18:	f001 fd92 	bl	8004540 <DCD_EP_Open>
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	20000620 	.word	0x20000620

08002a24 <USBD_UVC_IsoINIncomplete>:
 8002a24:	2000      	movs	r0, #0
 8002a26:	4770      	bx	lr

08002a28 <USBD_UVC_IsoOutIncomplete>:
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr

08002a2c <USBD_UVC_Setup>:
{
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	780c      	ldrb	r4, [r1, #0]
  USBD_UVC_HandleTypeDef *huvc =  ( (USB_OTG_CORE_HANDLE *)pdev)->dev.usr_uvc;
 8002a30:	f8d0 75f0 	ldr.w	r7, [r0, #1520]	; 0x5f0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a34:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8002a38:	460d      	mov	r5, r1
 8002a3a:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a3c:	d034      	beq.n	8002aa8 <USBD_UVC_Setup+0x7c>
 8002a3e:	2c20      	cmp	r4, #32
 8002a40:	d11a      	bne.n	8002a78 <USBD_UVC_Setup+0x4c>
    switch (req->bRequest)
 8002a42:	784b      	ldrb	r3, [r1, #1]
 8002a44:	2b81      	cmp	r3, #129	; 0x81
 8002a46:	d00d      	beq.n	8002a64 <USBD_UVC_Setup+0x38>
 8002a48:	d819      	bhi.n	8002a7e <USBD_UVC_Setup+0x52>
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d13d      	bne.n	8002aca <USBD_UVC_Setup+0x9e>

}

static void UVC_Req_SetCurrent(USB_OTG_CORE_HANDLE *pdev , USB_SETUP_REQ *req)
{
  if (req->wLength)
 8002a4e:	88ca      	ldrh	r2, [r1, #6]
 8002a50:	b192      	cbz	r2, 8002a78 <USBD_UVC_Setup+0x4c>
  {
    /* Prepare the reception of the buffer over EP0 */

    if(req->wValue == 256)
 8002a52:	884b      	ldrh	r3, [r1, #2]
 8002a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a58:	d11c      	bne.n	8002a94 <USBD_UVC_Setup+0x68>
    {
		      //Probe Request
		      USBD_CtlPrepareRx (pdev, (uint8_t*)&videoProbeControl, req->wLength);
 8002a5a:	4933      	ldr	r1, [pc, #204]	; (8002b28 <USBD_UVC_Setup+0xfc>)
 8002a5c:	f002 f83c 	bl	8004ad8 <USBD_CtlPrepareRx>
    }
    if(req->wValue == 512)
 8002a60:	886b      	ldrh	r3, [r5, #2]
 8002a62:	e017      	b.n	8002a94 <USBD_UVC_Setup+0x68>
  DCD_EP_Flush(pdev,USB_ENDPOINT_OUT(0));
 8002a64:	2100      	movs	r1, #0
 8002a66:	f001 fe41 	bl	80046ec <DCD_EP_Flush>
  if(req->wValue == 256)
 8002a6a:	886b      	ldrh	r3, [r5, #2]
 8002a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a70:	d04d      	beq.n	8002b0e <USBD_UVC_Setup+0xe2>
  if(req->wValue == 512)
 8002a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a76:	d03e      	beq.n	8002af6 <USBD_UVC_Setup+0xca>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a78:	2400      	movs	r4, #0
}
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7e:	2b83      	cmp	r3, #131	; 0x83
 8002a80:	d901      	bls.n	8002a86 <USBD_UVC_Setup+0x5a>
 8002a82:	2b87      	cmp	r3, #135	; 0x87
 8002a84:	d121      	bne.n	8002aca <USBD_UVC_Setup+0x9e>
  if (req->wLength)
 8002a86:	88ea      	ldrh	r2, [r5, #6]
 8002a88:	2a00      	cmp	r2, #0
 8002a8a:	d0f5      	beq.n	8002a78 <USBD_UVC_Setup+0x4c>
    if(req->wValue == 256)
 8002a8c:	886b      	ldrh	r3, [r5, #2]
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d043      	beq.n	8002b1c <USBD_UVC_Setup+0xf0>
    if(req->wValue == 512)
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d1ee      	bne.n	8002a78 <USBD_UVC_Setup+0x4c>
    {
		      //Commit Request
		      USBD_CtlPrepareRx (pdev, (uint8_t*)&videoCommitControl, req->wLength);
 8002a9a:	88ea      	ldrh	r2, [r5, #6]
 8002a9c:	4923      	ldr	r1, [pc, #140]	; (8002b2c <USBD_UVC_Setup+0x100>)
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f002 f81a 	bl	8004ad8 <USBD_CtlPrepareRx>
  return (uint8_t)USBD_OK;
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	e7e8      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
    switch (req->bRequest)
 8002aa8:	784b      	ldrb	r3, [r1, #1]
 8002aaa:	2b0a      	cmp	r3, #10
 8002aac:	d019      	beq.n	8002ae2 <USBD_UVC_Setup+0xb6>
 8002aae:	2b0b      	cmp	r3, #11
 8002ab0:	d011      	beq.n	8002ad6 <USBD_UVC_Setup+0xaa>
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d1e1      	bne.n	8002a7a <USBD_UVC_Setup+0x4e>
	if( (req->wValue >> 8) == 0x21)
 8002ab6:	884b      	ldrh	r3, [r1, #2]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	2b21      	cmp	r3, #33	; 0x21
 8002abc:	d022      	beq.n	8002b04 <USBD_UVC_Setup+0xd8>
  uint16_t len=0;
 8002abe:	4622      	mov	r2, r4
	USBD_CtlSendData(pdev,pbuf,len);
 8002ac0:	491b      	ldr	r1, [pc, #108]	; (8002b30 <USBD_UVC_Setup+0x104>)
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f001 fff2 	bl	8004aac <USBD_CtlSendData>
	break;
 8002ac8:	e7d7      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
       USBD_CtlError(pdev, req);
 8002aca:	4629      	mov	r1, r5
 8002acc:	4630      	mov	r0, r6
 8002ace:	f002 faa9 	bl	8005024 <USBD_CtlError>
       return USBD_FAIL;
 8002ad2:	2402      	movs	r4, #2
 8002ad4:	e7d1      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
      huvc->Interface = (uint8_t)(req->wValue);
 8002ad6:	788b      	ldrb	r3, [r1, #2]
 8002ad8:	603b      	str	r3, [r7, #0]
      if (huvc->Interface == 1) {
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d106      	bne.n	8002aec <USBD_UVC_Setup+0xc0>
	huvc->PlayStatus = 1;
 8002ade:	713b      	strb	r3, [r7, #4]
 8002ae0:	e7cb      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
      USBD_CtlSendData (pdev,
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	f001 ffe1 	bl	8004aac <USBD_CtlSendData>
      break;
 8002aea:	e7c6      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
	DCD_EP_Flush(pdev, USB_ENDPOINT_IN(1));
 8002aec:	2181      	movs	r1, #129	; 0x81
 8002aee:	f001 fdfd 	bl	80046ec <DCD_EP_Flush>
	huvc->PlayStatus = 0;
 8002af2:	713c      	strb	r4, [r7, #4]
 8002af4:	e7c1      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
	  USBD_CtlSendData (pdev, (uint8_t*)&videoCommitControl, req->wLength);
 8002af6:	88ea      	ldrh	r2, [r5, #6]
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <USBD_UVC_Setup+0x100>)
 8002afa:	4630      	mov	r0, r6
 8002afc:	f001 ffd6 	bl	8004aac <USBD_CtlSendData>
  return (uint8_t)USBD_OK;
 8002b00:	2400      	movs	r4, #0
 8002b02:	e7ba      	b.n	8002a7a <USBD_UVC_Setup+0x4e>
			len = MIN(USB_UVC_CONFIG_DESC_TOTAL_SIZE, req->wLength);
 8002b04:	88ca      	ldrh	r2, [r1, #6]
 8002b06:	2aa7      	cmp	r2, #167	; 0xa7
 8002b08:	bf28      	it	cs
 8002b0a:	22a7      	movcs	r2, #167	; 0xa7
 8002b0c:	e7d8      	b.n	8002ac0 <USBD_UVC_Setup+0x94>
	  USBD_CtlSendData (pdev, (uint8_t*)&videoProbeControl, req->wLength);
 8002b0e:	88ea      	ldrh	r2, [r5, #6]
 8002b10:	4905      	ldr	r1, [pc, #20]	; (8002b28 <USBD_UVC_Setup+0xfc>)
 8002b12:	4630      	mov	r0, r6
 8002b14:	f001 ffca 	bl	8004aac <USBD_CtlSendData>
  if(req->wValue == 512)
 8002b18:	886b      	ldrh	r3, [r5, #2]
 8002b1a:	e7aa      	b.n	8002a72 <USBD_UVC_Setup+0x46>
		      USBD_CtlPrepareRx (pdev, (uint8_t*)&videoProbeControl, req->wLength);
 8002b1c:	4902      	ldr	r1, [pc, #8]	; (8002b28 <USBD_UVC_Setup+0xfc>)
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f001 ffda 	bl	8004ad8 <USBD_CtlPrepareRx>
    if(req->wValue == 512)
 8002b24:	886b      	ldrh	r3, [r5, #2]
 8002b26:	e7b5      	b.n	8002a94 <USBD_UVC_Setup+0x68>
 8002b28:	200002e0 	.word	0x200002e0
 8002b2c:	200002bc 	.word	0x200002bc
 8002b30:	20000216 	.word	0x20000216

08002b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b34:	480d      	ldr	r0, [pc, #52]	; (8002b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b38:	f003 f888 	bl	8005c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3e:	490d      	ldr	r1, [pc, #52]	; (8002b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <LoopForever+0xe>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b54:	4c0a      	ldr	r4, [pc, #40]	; (8002b80 <LoopForever+0x16>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b62:	f003 f937 	bl	8005dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b66:	f002 ff37 	bl	80059d8 <main>

08002b6a <LoopForever>:

LoopForever:
  b LoopForever
 8002b6a:	e7fe      	b.n	8002b6a <LoopForever>
  ldr   r0, =_estack
 8002b6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	200003dc 	.word	0x200003dc
  ldr r2, =_sidata
 8002b78:	08005f7c 	.word	0x08005f7c
  ldr r2, =_sbss
 8002b7c:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8002b80:	20001ec0 	.word	0x20001ec0

08002b84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <USBD_OTG_ISR_Handler>:



//--------------------------------------------------------------
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8002b90:	f000 fe4e 	bl	8003830 <USB_OTG_IsDeviceMode>
 8002b94:	b918      	cbnz	r0, 8002b9e <USBD_OTG_ISR_Handler+0x16>
  uint32_t retval = 0;
 8002b96:	2000      	movs	r0, #0
      retval |= DCD_OTG_ISR(pdev);
    }

  }
  return retval;
}
 8002b98:	b003      	add	sp, #12
 8002b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 fe4c 	bl	800383c <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d0f5      	beq.n	8002b96 <USBD_OTG_ISR_Handler+0xe>
    if (gintr_status.d32 & (USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTSTS_IEPINT))
 8002baa:	f410 2040 	ands.w	r0, r0, #786432	; 0xc0000
 8002bae:	f040 80f7 	bne.w	8002da0 <USBD_OTG_ISR_Handler+0x218>
    if (gintr_status.d32 & USB_OTG_GINTSTS_WKUINT)
 8002bb2:	2f00      	cmp	r7, #0
 8002bb4:	f2c0 8145 	blt.w	8002e42 <USBD_OTG_ISR_Handler+0x2ba>
    if (gintr_status.d32 & USB_OTG_GINTSTS_USBSUSP)
 8002bb8:	053d      	lsls	r5, r7, #20
 8002bba:	f100 8121 	bmi.w	8002e00 <USBD_OTG_ISR_Handler+0x278>
    if (gintr_status.d32 & USB_OTG_GINTSTS_SOF)
 8002bbe:	0739      	lsls	r1, r7, #28
 8002bc0:	d508      	bpl.n	8002bd4 <USBD_OTG_ISR_Handler+0x4c>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8002bc2:	4b8e      	ldr	r3, [pc, #568]	; (8002dfc <USBD_OTG_ISR_Handler+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	615a      	str	r2, [r3, #20]
      retval |= DCD_HandleSof_ISR(pdev);
 8002bd2:	2001      	movs	r0, #1
    if (gintr_status.d32 & USB_OTG_GINTSTS_RXFLVL)
 8002bd4:	06fa      	lsls	r2, r7, #27
 8002bd6:	f100 80af 	bmi.w	8002d38 <USBD_OTG_ISR_Handler+0x1b0>
    if (gintr_status.d32 & USB_OTG_GINTSTS_USBRST)
 8002bda:	04fb      	lsls	r3, r7, #19
 8002bdc:	d41f      	bmi.n	8002c1e <USBD_OTG_ISR_Handler+0x96>
    if (gintr_status.d32 & USB_OTG_GINTSTS_ENUMDNE)
 8002bde:	04be      	lsls	r6, r7, #18
 8002be0:	f100 80c0 	bmi.w	8002d64 <USBD_OTG_ISR_Handler+0x1dc>
    if (gintr_status.d32 & USB_OTG_GINTSTS_SRQINT)
 8002be4:	007d      	lsls	r5, r7, #1
 8002be6:	d509      	bpl.n	8002bfc <USBD_OTG_ISR_Handler+0x74>
  USBD_DCD_INT_fops->DevConnected (pdev);
 8002be8:	4b84      	ldr	r3, [pc, #528]	; (8002dfc <USBD_OTG_ISR_Handler+0x274>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4620      	mov	r0, r4
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	4798      	blx	r3
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002bf2:	6923      	ldr	r3, [r4, #16]
 8002bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf8:	615a      	str	r2, [r3, #20]
      retval |= DCD_SessionRequest_ISR(pdev);
 8002bfa:	2001      	movs	r0, #1
    if (gintr_status.d32 & USB_OTG_GINTSTS_OTGINT)
 8002bfc:	0779      	lsls	r1, r7, #29
 8002bfe:	d5cb      	bpl.n	8002b98 <USBD_OTG_ISR_Handler+0x10>
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8002c00:	6923      	ldr	r3, [r4, #16]
 8002c02:	685d      	ldr	r5, [r3, #4]
  if (gotgint.b.sesenddet)
 8002c04:	076a      	lsls	r2, r5, #29
 8002c06:	d505      	bpl.n	8002c14 <USBD_OTG_ISR_Handler+0x8c>
    USBD_DCD_INT_fops->DevDisconnected (pdev);
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <USBD_OTG_ISR_Handler+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	4798      	blx	r3
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8002c12:	6923      	ldr	r3, [r4, #16]
 8002c14:	605d      	str	r5, [r3, #4]
      retval |= DCD_OTG_ISR(pdev);
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	b003      	add	sp, #12
 8002c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8002c1e:	6962      	ldr	r2, [r4, #20]
 8002c20:	6853      	ldr	r3, [r2, #4]
  doepmsk.d32 = 0;
 8002c22:	2500      	movs	r5, #0
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f000 fda3 	bl	8003778 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c32:	7862      	ldrb	r2, [r4, #1]
  diepmsk.d32 = 0;
 8002c34:	462e      	mov	r6, r5
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d05d      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c3a:	69e0      	ldr	r0, [r4, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c3e:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c40:	2a01      	cmp	r2, #1
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c42:	6083      	str	r3, [r0, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c44:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c46:	d056      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c48:	6a21      	ldr	r1, [r4, #32]
 8002c4a:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c4e:	2a02      	cmp	r2, #2
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c50:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c52:	d050      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c56:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c58:	6e21      	ldr	r1, [r4, #96]	; 0x60
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c5a:	2a03      	cmp	r2, #3
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c5c:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c5e:	d04a      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c62:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c64:	6e61      	ldr	r1, [r4, #100]	; 0x64
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c66:	2a04      	cmp	r2, #4
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c68:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c6a:	d044      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c6e:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c70:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c72:	2a05      	cmp	r2, #5
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c74:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c76:	d03e      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c7a:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c7c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c7e:	2a06      	cmp	r2, #6
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c80:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c82:	d038      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c86:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c88:	6f21      	ldr	r1, [r4, #112]	; 0x70
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c8a:	2a07      	cmp	r2, #7
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c8c:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c8e:	d032      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c92:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c94:	6f61      	ldr	r1, [r4, #116]	; 0x74
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c96:	2a08      	cmp	r2, #8
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c98:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002c9a:	d02c      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002c9e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002ca0:	6083      	str	r3, [r0, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002ca2:	2a09      	cmp	r2, #9
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002ca4:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002ca6:	d026      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002ca8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002caa:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cae:	2a0a      	cmp	r2, #10
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cb0:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cb2:	d020      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002cb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cb6:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cb8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cbc:	2a0b      	cmp	r2, #11
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cbe:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cc0:	d019      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002cc2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002cc4:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cc6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cca:	2a0c      	cmp	r2, #12
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002ccc:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cce:	d012      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002cd0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002cd2:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cd4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cd8:	2a0d      	cmp	r2, #13
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cda:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cdc:	d00b      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002cde:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002ce0:	608b      	str	r3, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002ce2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002ce6:	2a0e      	cmp	r2, #14
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002ce8:	608b      	str	r3, [r1, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002cea:	d004      	beq.n	8002cf6 <USBD_OTG_ISR_Handler+0x16e>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002cec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002cee:	6093      	str	r3, [r2, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cf0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002cf4:	6093      	str	r3, [r2, #8]
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
 8002cf6:	220f      	movs	r2, #15
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8002cf8:	6963      	ldr	r3, [r4, #20]
  doepmsk.b.xfercompl = 1;
 8002cfa:	f362 0507 	bfi	r5, r2, #0, #8
  doepmsk.b.ahberr = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );

  diepmsk.b.xfercompl = 1;
 8002cfe:	222f      	movs	r2, #47	; 0x2f
 8002d00:	f362 0607 	bfi	r6, r2, #0, #8
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8002d0a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002d0e:	61da      	str	r2, [r3, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8002d10:	615d      	str	r5, [r3, #20]
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;
  diepmsk.b.ahberr = 1;
  diepmsk.b.intknepmis = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8002d12:	611e      	str	r6, [r3, #16]

  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8002d14:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devaddr = 0;
 8002d16:	f36f 120a 	bfc	r2, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8002d1a:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f001 f9e9 	bl	80040f4 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <USBD_OTG_ISR_Handler+0x274>)
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002d24:	6922      	ldr	r2, [r4, #16]
  USBD_DCD_INT_fops->Reset(pdev);
 8002d26:	681b      	ldr	r3, [r3, #0]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  USBD_DCD_INT_fops->Reset(pdev);
 8002d2c:	691b      	ldr	r3, [r3, #16]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002d2e:	6151      	str	r1, [r2, #20]
  USBD_DCD_INT_fops->Reset(pdev);
 8002d30:	4620      	mov	r0, r4
 8002d32:	4798      	blx	r3
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8002d34:	2001      	movs	r0, #1
 8002d36:	e752      	b.n	8002bde <USBD_OTG_ISR_Handler+0x56>
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	f022 0210 	bic.w	r2, r2, #16
 8002d40:	619a      	str	r2, [r3, #24]
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8002d42:	6a1d      	ldr	r5, [r3, #32]
  switch (status.b.pktsts)
 8002d44:	f3c5 4243 	ubfx	r2, r5, #17, #4
 8002d48:	2a02      	cmp	r2, #2
  ep = &pdev->dev.out_ep[status.b.epnum];
 8002d4a:	f005 060f 	and.w	r6, r5, #15
  switch (status.b.pktsts)
 8002d4e:	f000 818e 	beq.w	800306e <USBD_OTG_ISR_Handler+0x4e6>
 8002d52:	2a06      	cmp	r2, #6
 8002d54:	f000 8178 	beq.w	8003048 <USBD_OTG_ISR_Handler+0x4c0>
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	f042 0210 	orr.w	r2, r2, #16
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8002d5e:	2001      	movs	r0, #1
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8002d60:	619a      	str	r2, [r3, #24]
  return 1;
 8002d62:	e73a      	b.n	8002bda <USBD_OTG_ISR_Handler+0x52>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 ffe7 	bl	8003d38 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8002d6a:	6923      	ldr	r3, [r4, #16]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8002d6c:	4620      	mov	r0, r4
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8002d6e:	68dd      	ldr	r5, [r3, #12]
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8002d70:	f000 ffd4 	bl	8003d1c <USB_OTG_GetDeviceSpeed>
 8002d74:	2803      	cmp	r0, #3
 8002d76:	bf15      	itete	ne
 8002d78:	2140      	movne	r1, #64	; 0x40
 8002d7a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8002d82:	80a1      	strh	r1, [r4, #4]
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8002d84:	70a3      	strb	r3, [r4, #2]
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8002d86:	bf18      	it	ne
 8002d88:	2105      	movne	r1, #5
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8002d8a:	6923      	ldr	r3, [r4, #16]
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8002d8c:	bf08      	it	eq
 8002d8e:	2109      	moveq	r1, #9
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8002d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    gusbcfg.b.usbtrdtim = 9;
 8002d94:	f361 258d 	bfi	r5, r1, #10, #4
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8002d98:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8002d9a:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8002d9c:	615a      	str	r2, [r3, #20]
  return 1;
 8002d9e:	e721      	b.n	8002be4 <USBD_OTG_ISR_Handler+0x5c>
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8002da0:	4620      	mov	r0, r4
 8002da2:	f001 f993 	bl	80040cc <USB_OTG_ReadDevAllOutEp_itr>
  while ( ep_intr )
 8002da6:	4605      	mov	r5, r0
 8002da8:	2800      	cmp	r0, #0
 8002daa:	f000 809a 	beq.w	8002ee2 <USBD_OTG_ISR_Handler+0x35a>
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8002dae:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8002dfc <USBD_OTG_ISR_Handler+0x274>
 8002db2:	f104 0658 	add.w	r6, r4, #88	; 0x58
 8002db6:	46a2      	mov	sl, r4
  uint32_t epnum = 0;
 8002db8:	f04f 0800 	mov.w	r8, #0
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8002dbc:	f04f 0b01 	mov.w	fp, #1
 8002dc0:	e008      	b.n	8002dd4 <USBD_OTG_ISR_Handler+0x24c>
  while ( ep_intr )
 8002dc2:	086d      	lsrs	r5, r5, #1
    epnum++;
 8002dc4:	f108 0801 	add.w	r8, r8, #1
  while ( ep_intr )
 8002dc8:	f106 0604 	add.w	r6, r6, #4
 8002dcc:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8002dd0:	f000 8087 	beq.w	8002ee2 <USBD_OTG_ISR_Handler+0x35a>
    if (ep_intr&0x1)
 8002dd4:	07eb      	lsls	r3, r5, #31
 8002dd6:	d5f4      	bpl.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8002dd8:	fa5f f188 	uxtb.w	r1, r8
 8002ddc:	4620      	mov	r0, r4
 8002dde:	9100      	str	r1, [sp, #0]
 8002de0:	f001 f97a 	bl	80040d8 <USB_OTG_ReadDevOutEP_itr>
      if ( doepint.b.xfercompl )
 8002de4:	f010 0f01 	tst.w	r0, #1
 8002de8:	9900      	ldr	r1, [sp, #0]
 8002dea:	b2c3      	uxtb	r3, r0
 8002dec:	d146      	bne.n	8002e7c <USBD_OTG_ISR_Handler+0x2f4>
      if ( doepint.b.epdisabled )
 8002dee:	0798      	lsls	r0, r3, #30
 8002df0:	d565      	bpl.n	8002ebe <USBD_OTG_ISR_Handler+0x336>
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8002df2:	6833      	ldr	r3, [r6, #0]
 8002df4:	2202      	movs	r2, #2
 8002df6:	609a      	str	r2, [r3, #8]
      if ( doepint.b.setup )
 8002df8:	e7e3      	b.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
 8002dfa:	bf00      	nop
 8002dfc:	20000344 	.word	0x20000344
  USBD_DCD_INT_fops->Suspend (pdev);      
 8002e00:	4bb0      	ldr	r3, [pc, #704]	; (80030c4 <USBD_OTG_ISR_Handler+0x53c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4620      	mov	r0, r4
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	4798      	blx	r3
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002e0a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8002e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002e12:	6889      	ldr	r1, [r1, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002e14:	615a      	str	r2, [r3, #20]
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 8002e16:	7aa3      	ldrb	r3, [r4, #10]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02d      	beq.n	8002e78 <USBD_OTG_ISR_Handler+0x2f0>
 8002e1c:	07c8      	lsls	r0, r1, #31
 8002e1e:	d52b      	bpl.n	8002e78 <USBD_OTG_ISR_Handler+0x2f0>
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8002e20:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8002e24:	49a8      	ldr	r1, [pc, #672]	; (80030c8 <USBD_OTG_ISR_Handler+0x540>)
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f042 0203 	orr.w	r2, r2, #3
 8002e34:	601a      	str	r2, [r3, #0]
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8002e36:	690b      	ldr	r3, [r1, #16]
 8002e38:	f043 0306 	orr.w	r3, r3, #6
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8002e3c:	2001      	movs	r0, #1
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8002e3e:	610b      	str	r3, [r1, #16]
 8002e40:	e6bd      	b.n	8002bbe <USBD_OTG_ISR_Handler+0x36>
  if(pdev->cfg.low_power)
 8002e42:	7aa3      	ldrb	r3, [r4, #10]
 8002e44:	b143      	cbz	r3, 8002e58 <USBD_OTG_ISR_Handler+0x2d0>
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8002e46:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    power.b.stoppclk = 0;
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	f362 0307 	bfi	r3, r2, #0, #8
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8002e52:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002e56:	6013      	str	r3, [r2, #0]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002e58:	6962      	ldr	r2, [r4, #20]
  USBD_DCD_INT_fops->Resume (pdev);
 8002e5a:	499a      	ldr	r1, [pc, #616]	; (80030c4 <USBD_OTG_ISR_Handler+0x53c>)
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002e5c:	6853      	ldr	r3, [r2, #4]
  USBD_DCD_INT_fops->Resume (pdev);
 8002e5e:	6809      	ldr	r1, [r1, #0]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002e60:	f023 0301 	bic.w	r3, r3, #1
  USBD_DCD_INT_fops->Resume (pdev);
 8002e64:	6989      	ldr	r1, [r1, #24]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002e66:	6053      	str	r3, [r2, #4]
  USBD_DCD_INT_fops->Resume (pdev);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4788      	blx	r1
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e72:	615a      	str	r2, [r3, #20]
      retval |= DCD_HandleResume_ISR(pdev);
 8002e74:	2001      	movs	r0, #1
 8002e76:	e69f      	b.n	8002bb8 <USBD_OTG_ISR_Handler+0x30>
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e6a0      	b.n	8002bbe <USBD_OTG_ISR_Handler+0x36>
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8002e7c:	6833      	ldr	r3, [r6, #0]
 8002e7e:	f8c3 b008 	str.w	fp, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8002e82:	78e2      	ldrb	r2, [r4, #3]
 8002e84:	2a01      	cmp	r2, #1
 8002e86:	d107      	bne.n	8002e98 <USBD_OTG_ISR_Handler+0x310>
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8002e88:	691a      	ldr	r2, [r3, #16]
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8002e8a:	f8da 337c 	ldr.w	r3, [sl, #892]	; 0x37c
            deptsiz.b.xfersize;
 8002e8e:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	f8ca 338c 	str.w	r3, [sl, #908]	; 0x38c
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8002e98:	f8d9 3000 	ldr.w	r3, [r9]
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4798      	blx	r3
        if (pdev->cfg.dma_enable == 1 && epnum == 0 && pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT)
 8002ea2:	78e3      	ldrb	r3, [r4, #3]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d18c      	bne.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
 8002ea8:	f1b8 0f00 	cmp.w	r8, #0
 8002eac:	d189      	bne.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
 8002eae:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d185      	bne.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
            USB_OTG_EP0_OutStart(pdev);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f001 f91c 	bl	80040f4 <USB_OTG_EP0_OutStart>
      if ( doepint.b.epdisabled )
 8002ebc:	e781      	b.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
      if ( doepint.b.ahberr )
 8002ebe:	0759      	lsls	r1, r3, #29
 8002ec0:	d503      	bpl.n	8002eca <USBD_OTG_ISR_Handler+0x342>
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 8002ec2:	6833      	ldr	r3, [r6, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	609a      	str	r2, [r3, #8]
      if ( doepint.b.setup )
 8002ec8:	e77b      	b.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
 8002eca:	071a      	lsls	r2, r3, #28
 8002ecc:	f57f af79 	bpl.w	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
        USBD_DCD_INT_fops->SetupStage(pdev);
 8002ed0:	f8d9 3000 	ldr.w	r3, [r9]
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	e76f      	b.n	8002dc2 <USBD_OTG_ISR_Handler+0x23a>
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f001 f900 	bl	80040e8 <USB_OTG_ReadDevAllInEPItr>
  while ( ep_intr )
 8002ee8:	4681      	mov	r9, r0
 8002eea:	2800      	cmp	r0, #0
 8002eec:	f000 80aa 	beq.w	8003044 <USBD_OTG_ISR_Handler+0x4bc>
 8002ef0:	4625      	mov	r5, r4
 8002ef2:	f104 081c 	add.w	r8, r4, #28
  uint32_t epnum = 0;
 8002ef6:	f04f 0b00 	mov.w	fp, #0
        CLEAR_IN_EP_INTR(epnum, ahberr);
 8002efa:	9701      	str	r7, [sp, #4]
 8002efc:	e016      	b.n	8002f2c <USBD_OTG_ISR_Handler+0x3a4>
      if ( diepint.b.ahberr )
 8002efe:	0743      	lsls	r3, r0, #29
 8002f00:	d548      	bpl.n	8002f94 <USBD_OTG_ISR_Handler+0x40c>
        CLEAR_IN_EP_INTR(epnum, ahberr);
 8002f02:	f8d8 3000 	ldr.w	r3, [r8]
 8002f06:	2104      	movs	r1, #4
 8002f08:	6099      	str	r1, [r3, #8]
 8002f0a:	460e      	mov	r6, r1
      if (diepint.b.inepnakeff)
 8002f0c:	0673      	lsls	r3, r6, #25
 8002f0e:	d547      	bpl.n	8002fa0 <USBD_OTG_ISR_Handler+0x418>
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8002f10:	f8d8 3000 	ldr.w	r3, [r8]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	609a      	str	r2, [r3, #8]
  while ( ep_intr )
 8002f18:	ea5f 0959 	movs.w	r9, r9, lsr #1
    epnum++;
 8002f1c:	f10b 0b01 	add.w	fp, fp, #1
  while ( ep_intr )
 8002f20:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8002f24:	f108 0804 	add.w	r8, r8, #4
 8002f28:	f000 808b 	beq.w	8003042 <USBD_OTG_ISR_Handler+0x4ba>
    if (ep_intr&0x1) /* In ITR */
 8002f2c:	f019 0f01 	tst.w	r9, #1
 8002f30:	d0f2      	beq.n	8002f18 <USBD_OTG_ISR_Handler+0x390>
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8002f32:	fa5f f28b 	uxtb.w	r2, fp
//--------------------------------------------------------------
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_CORE_REGS *local_pdev_regs = &pdev->regs;
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&local_pdev_regs->DREGS->DIEPMSK);
 8002f36:	6961      	ldr	r1, [r4, #20]
  emp = USB_OTG_READ_REG32(&local_pdev_regs->DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&local_pdev_regs->INEP_REGS[epnum]->DIEPINT) & msk;
 8002f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  msk = USB_OTG_READ_REG32(&local_pdev_regs->DREGS->DIEPMSK);
 8002f3c:	690e      	ldr	r6, [r1, #16]
  v = USB_OTG_READ_REG32(&local_pdev_regs->INEP_REGS[epnum]->DIEPINT) & msk;
 8002f3e:	69d8      	ldr	r0, [r3, #28]
  emp = USB_OTG_READ_REG32(&local_pdev_regs->DREGS->DIEPEMPMSK);
 8002f40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  v = USB_OTG_READ_REG32(&local_pdev_regs->INEP_REGS[epnum]->DIEPINT) & msk;
 8002f42:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002f44:	40d3      	lsrs	r3, r2
 8002f46:	01db      	lsls	r3, r3, #7
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4333      	orrs	r3, r6
  v = USB_OTG_READ_REG32(&local_pdev_regs->INEP_REGS[epnum]->DIEPINT) & msk;
 8002f4c:	4003      	ands	r3, r0
      if ( diepint.b.xfercompl )
 8002f4e:	f013 0601 	ands.w	r6, r3, #1
 8002f52:	b2d8      	uxtb	r0, r3
 8002f54:	d0d3      	beq.n	8002efe <USBD_OTG_ISR_Handler+0x376>
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <USBD_OTG_ISR_Handler+0x53c>)
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8002f58:	6b48      	ldr	r0, [r1, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8002f5a:	f8d8 7000 	ldr.w	r7, [r8]
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	9200      	str	r2, [sp, #0]
        fifoemptymsk = 0x1 << epnum;
 8002f62:	f04f 0c01 	mov.w	ip, #1
 8002f66:	fa0c fa0b 	lsl.w	sl, ip, fp
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8002f6a:	ea20 000a 	bic.w	r0, r0, sl
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002f6e:	685b      	ldr	r3, [r3, #4]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8002f70:	6348      	str	r0, [r1, #52]	; 0x34
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002f72:	4611      	mov	r1, r2
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8002f74:	f8c7 c008 	str.w	ip, [r7, #8]
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002f78:	4620      	mov	r0, r4
 8002f7a:	4798      	blx	r3
        if (pdev->cfg.dma_enable == 1)
 8002f7c:	78e3      	ldrb	r3, [r4, #3]
 8002f7e:	9a00      	ldr	r2, [sp, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f000 8091 	beq.w	80030a8 <USBD_OTG_ISR_Handler+0x520>
      if (diepint.b.intknepmis)
 8002f86:	06b1      	lsls	r1, r6, #26
 8002f88:	d5c0      	bpl.n	8002f0c <USBD_OTG_ISR_Handler+0x384>
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 8002f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	609a      	str	r2, [r3, #8]
      if (diepint.b.emptyintr)
 8002f92:	e7c1      	b.n	8002f18 <USBD_OTG_ISR_Handler+0x390>
      if ( diepint.b.timeout )
 8002f94:	0707      	lsls	r7, r0, #28
 8002f96:	d50a      	bpl.n	8002fae <USBD_OTG_ISR_Handler+0x426>
        CLEAR_IN_EP_INTR(epnum, timeout);
 8002f98:	f8d8 1000 	ldr.w	r1, [r8]
 8002f9c:	2608      	movs	r6, #8
 8002f9e:	608e      	str	r6, [r1, #8]
      if ( diepint.b.epdisabled )
 8002fa0:	07b7      	lsls	r7, r6, #30
 8002fa2:	d50c      	bpl.n	8002fbe <USBD_OTG_ISR_Handler+0x436>
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8002fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	609a      	str	r2, [r3, #8]
      if (diepint.b.emptyintr)
 8002fac:	e7b4      	b.n	8002f18 <USBD_OTG_ISR_Handler+0x390>
      if (diepint.b.intktxfemp)
 8002fae:	06c6      	lsls	r6, r0, #27
 8002fb0:	bf58      	it	pl
 8002fb2:	4606      	movpl	r6, r0
 8002fb4:	d5e7      	bpl.n	8002f86 <USBD_OTG_ISR_Handler+0x3fe>
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8002fb6:	f8d8 1000 	ldr.w	r1, [r8]
 8002fba:	2610      	movs	r6, #16
 8002fbc:	608e      	str	r6, [r1, #8]
      if (diepint.b.emptyintr)
 8002fbe:	0636      	lsls	r6, r6, #24
 8002fc0:	d5aa      	bpl.n	8002f18 <USBD_OTG_ISR_Handler+0x390>
  len = ep->xfer_len - ep->xfer_count;
 8002fc2:	e9d5 134c 	ldrd	r1, r3, [r5, #304]	; 0x130
  len32b = (len + 3) / 4;
 8002fc6:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8002fca:	f8d8 7000 	ldr.w	r7, [r8]
  len = ep->xfer_len - ep->xfer_count;
 8002fce:	eba1 0e03 	sub.w	lr, r1, r3
  len32b = (len + 3) / 4;
 8002fd2:	4570      	cmp	r0, lr
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8002fd4:	69be      	ldr	r6, [r7, #24]
  len32b = (len + 3) / 4;
 8002fd6:	bf28      	it	cs
 8002fd8:	4670      	movcs	r0, lr
          ep->xfer_count < ep->xfer_len &&
 8002fda:	b2b6      	uxth	r6, r6
  len32b = (len + 3) / 4;
 8002fdc:	3003      	adds	r0, #3
          ep->xfer_count < ep->xfer_len &&
 8002fde:	ebb6 0f90 	cmp.w	r6, r0, lsr #2
 8002fe2:	d92b      	bls.n	800303c <USBD_OTG_ISR_Handler+0x4b4>
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	4617      	mov	r7, r2
 8002fe8:	e023      	b.n	8003032 <USBD_OTG_ISR_Handler+0x4aa>
 8002fea:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8002fee:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
 8002ff2:	429e      	cmp	r6, r3
 8002ff4:	bf28      	it	cs
 8002ff6:	461e      	movcs	r6, r3
 8002ff8:	b2b3      	uxth	r3, r6
 8002ffa:	463a      	mov	r2, r7
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 f90b 	bl	8003218 <USB_OTG_WritePacket>
    ep->xfer_buff  += len;
 8003002:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
    if( ep->xfer_count >= ep->xfer_len){
 8003006:	f8d5 1130 	ldr.w	r1, [r5, #304]	; 0x130
    ep->xfer_buff  += len;
 800300a:	4433      	add	r3, r6
 800300c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
    ep->xfer_count += len;
 8003010:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
 8003014:	4433      	add	r3, r6
    len32b = (len + 3) / 4;
 8003016:	f106 0a03 	add.w	sl, r6, #3
    if( ep->xfer_count >= ep->xfer_len){
 800301a:	428b      	cmp	r3, r1
    len32b = (len + 3) / 4;
 800301c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8003020:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    if( ep->xfer_count >= ep->xfer_len){
 8003024:	d252      	bcs.n	80030cc <USBD_OTG_ISR_Handler+0x544>
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8003026:	f8d8 0000 	ldr.w	r0, [r8]
 800302a:	6982      	ldr	r2, [r0, #24]
          ep->xfer_count < ep->xfer_len &&
 800302c:	b292      	uxth	r2, r2
 800302e:	4592      	cmp	sl, r2
 8003030:	d203      	bcs.n	800303a <USBD_OTG_ISR_Handler+0x4b2>
  while  (txstatus.b.txfspcavail > len32b &&
 8003032:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 8003034:	eba1 0603 	sub.w	r6, r1, r3
  while  (txstatus.b.txfspcavail > len32b &&
 8003038:	d3d7      	bcc.n	8002fea <USBD_OTG_ISR_Handler+0x462>
 800303a:	4607      	mov	r7, r0
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	e76a      	b.n	8002f18 <USBD_OTG_ISR_Handler+0x390>
 8003042:	9f01      	ldr	r7, [sp, #4]
      retval |= (DCD_HandleOutEP_ISR(pdev) | DCD_HandleInEP_ISR(pdev));
 8003044:	2001      	movs	r0, #1
 8003046:	e5b4      	b.n	8002bb2 <USBD_OTG_ISR_Handler+0x2a>
    ep->xfer_count += status.b.bcnt;
 8003048:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800304c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8003050:	2208      	movs	r2, #8
 8003052:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f8f2 	bl	8003240 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 800305c:	f8d6 338c 	ldr.w	r3, [r6, #908]	; 0x38c
 8003060:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003064:	441d      	add	r5, r3
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8003066:	6923      	ldr	r3, [r4, #16]
    ep->xfer_count += status.b.bcnt;
 8003068:	f8c6 538c 	str.w	r5, [r6, #908]	; 0x38c
    break;
 800306c:	e674      	b.n	8002d58 <USBD_OTG_ISR_Handler+0x1d0>
    if (status.b.bcnt)
 800306e:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8003072:	422a      	tst	r2, r5
 8003074:	f43f ae70 	beq.w	8002d58 <USBD_OTG_ISR_Handler+0x1d0>
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8003078:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800307c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8003080:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003084:	462a      	mov	r2, r5
 8003086:	f8d6 1380 	ldr.w	r1, [r6, #896]	; 0x380
 800308a:	4620      	mov	r0, r4
 800308c:	f000 f8d8 	bl	8003240 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8003090:	f8d6 3380 	ldr.w	r3, [r6, #896]	; 0x380
 8003094:	442b      	add	r3, r5
 8003096:	f8c6 3380 	str.w	r3, [r6, #896]	; 0x380
      ep->xfer_count += status.b.bcnt;
 800309a:	f8d6 338c 	ldr.w	r3, [r6, #908]	; 0x38c
 800309e:	441d      	add	r5, r3
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 80030a0:	6923      	ldr	r3, [r4, #16]
      ep->xfer_count += status.b.bcnt;
 80030a2:	f8c6 538c 	str.w	r5, [r6, #908]	; 0x38c
 80030a6:	e657      	b.n	8002d58 <USBD_OTG_ISR_Handler+0x1d0>
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 80030a8:	f1bb 0f00 	cmp.w	fp, #0
 80030ac:	f47f af6b 	bne.w	8002f86 <USBD_OTG_ISR_Handler+0x3fe>
 80030b0:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	f47f af66 	bne.w	8002f86 <USBD_OTG_ISR_Handler+0x3fe>
            USB_OTG_EP0_OutStart(pdev);
 80030ba:	4620      	mov	r0, r4
 80030bc:	f001 f81a 	bl	80040f4 <USB_OTG_EP0_OutStart>
      if ( diepint.b.ahberr )
 80030c0:	9a00      	ldr	r2, [sp, #0]
 80030c2:	e760      	b.n	8002f86 <USBD_OTG_ISR_Handler+0x3fe>
 80030c4:	20000344 	.word	0x20000344
 80030c8:	e000ed00 	.word	0xe000ed00
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80030cc:	6961      	ldr	r1, [r4, #20]
      uint32_t fifoemptymsk = 1 << ep->num;
 80030ce:	f895 011c 	ldrb.w	r0, [r5, #284]	; 0x11c
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80030d2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80030d4:	f8d8 7000 	ldr.w	r7, [r8]
      uint32_t fifoemptymsk = 1 << ep->num;
 80030d8:	2201      	movs	r2, #1
 80030da:	4082      	lsls	r2, r0
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80030dc:	ea23 0302 	bic.w	r3, r3, r2
 80030e0:	634b      	str	r3, [r1, #52]	; 0x34
      break;
 80030e2:	e7ab      	b.n	800303c <USBD_OTG_ISR_Handler+0x4b4>

080030e4 <USB_OTG_BSP_Init>:
  }
}

//--------------------------------------------------------------
void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev, USB_OTG_CORE_ID_TypeDef coreID)
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e8:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ea:	2400      	movs	r4, #0

  if(coreID == USB_OTG_HS_CORE_ID)
 80030ec:	2901      	cmp	r1, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80030f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80030f6:	940a      	str	r4, [sp, #40]	; 0x28
  if(coreID == USB_OTG_HS_CORE_ID)
 80030f8:	d002      	beq.n	8003100 <USB_OTG_BSP_Init+0x1c>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();

    USB_OTG_BSP_EnableInterrupt(pdev,coreID);
    }

}
 80030fa:	b00c      	add	sp, #48	; 0x30
 80030fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003100:	4d3b      	ldr	r5, [pc, #236]	; (80031f0 <USB_OTG_BSP_Init+0x10c>)
 8003102:	9400      	str	r4, [sp, #0]
 8003104:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003106:	483b      	ldr	r0, [pc, #236]	; (80031f4 <USB_OTG_BSP_Init+0x110>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	632b      	str	r3, [r5, #48]	; 0x30
 800310e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003118:	9401      	str	r4, [sp, #4]
 800311a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	632b      	str	r3, [r5, #48]	; 0x30
 8003122:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312c:	9402      	str	r4, [sp, #8]
 800312e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	632b      	str	r3, [r5, #48]	; 0x30
 8003136:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	9302      	str	r3, [sp, #8]
 800313e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003140:	9403      	str	r4, [sp, #12]
 8003142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	632b      	str	r3, [r5, #48]	; 0x30
 800314a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800314c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003150:	f44f 6200 	mov.w	r2, #2048	; 0x800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003156:	260a      	movs	r6, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800315a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800315c:	2302      	movs	r3, #2
 800315e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	f04f 0802 	mov.w	r8, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003166:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003168:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800316c:	f7fe f924 	bl	80013b8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003170:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003172:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003174:	4820      	ldr	r0, [pc, #128]	; (80031f8 <USB_OTG_BSP_Init+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003176:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	e9cd 4708 	strd	r4, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800317c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003182:	f7fe f919 	bl	80013b8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003188:	2328      	movs	r3, #40	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	481c      	ldr	r0, [pc, #112]	; (80031fc <USB_OTG_BSP_Init+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800318c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	e9cd 8407 	strd	r8, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003192:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f7fe f90f 	bl	80013b8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800319c:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	4817      	ldr	r0, [pc, #92]	; (8003200 <USB_OTG_BSP_Init+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80031a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	e9cd 4708 	strd	r4, r7, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031ac:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	f7fe f903 	bl	80013b8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80031b2:	9404      	str	r4, [sp, #16]
 80031b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80031b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ba:	632b      	str	r3, [r5, #48]	; 0x30
 80031bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80031be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80031c6:	9405      	str	r4, [sp, #20]
 80031c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80031ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ce:	632b      	str	r3, [r5, #48]	; 0x30
 80031d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80031d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80031d6:	4622      	mov	r2, r4
 80031d8:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80031da:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80031dc:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80031de:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80031e0:	f7fd faca 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80031e4:	204d      	movs	r0, #77	; 0x4d
 80031e6:	f7fd fb05 	bl	80007f4 <HAL_NVIC_EnableIRQ>
}
 80031ea:	b00c      	add	sp, #48	; 0x30
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400

08003204 <USB_OTG_BSP_uDelay>:
    {
      return ;
    }
  }
  while (1);
}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop

08003208 <USB_OTG_BSP_mDelay>:
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <OTG_HS_IRQHandler>:


//--------------------------------------------------------------
void OTG_HS_IRQHandler(void)
{
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 800320c:	4801      	ldr	r0, [pc, #4]	; (8003214 <OTG_HS_IRQHandler+0x8>)
 800320e:	f7ff bcbb 	b.w	8002b88 <USBD_OTG_ISR_Handler>
 8003212:	bf00      	nop
 8003214:	200018c4 	.word	0x200018c4

08003218 <USB_OTG_WritePacket>:
//--------------------------------------------------------------
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8003218:	b430      	push	{r4, r5}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 800321a:	78c4      	ldrb	r4, [r0, #3]
 800321c:	b96c      	cbnz	r4, 800323a <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 800321e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    count32b =  (len + 3) / 4;
 8003222:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8003224:	f8d2 50d4 	ldr.w	r5, [r2, #212]	; 0xd4
    for (i = 0; i < count32b; i++, src+=4)
 8003228:	109a      	asrs	r2, r3, #2
 800322a:	d006      	beq.n	800323a <USB_OTG_WritePacket+0x22>
 800322c:	4623      	mov	r3, r4
 800322e:	3301      	adds	r3, #1
    {
//      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
	USB_OTG_WRITE_REG32( fifo, *((uint32_t *)src) );
 8003230:	f851 0b04 	ldr.w	r0, [r1], #4
 8003234:	6028      	str	r0, [r5, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8003236:	429a      	cmp	r2, r3
 8003238:	d1f9      	bne.n	800322e <USB_OTG_WritePacket+0x16>
    }
  }
  return status;
}
 800323a:	2000      	movs	r0, #0
 800323c:	bc30      	pop	{r4, r5}
 800323e:	4770      	bx	lr

08003240 <USB_OTG_ReadPacket>:

//--------------------------------------------------------------
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev,
                          uint8_t *dest,
                          uint16_t len)
{
 8003240:	b530      	push	{r4, r5, lr}
  uint32_t count32b = (len) / 4;
  uint32_t count8b = (len) & 3;

  __IO uint32_t *fifo = pdev->regs.DFIFO[0];

  for ( i = 0; i < count32b; i++, dest += 4 )
 8003242:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8003246:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
 800324a:	f002 0503 	and.w	r5, r2, #3
  for ( i = 0; i < count32b; i++, dest += 4 )
 800324e:	d017      	beq.n	8003280 <USB_OTG_ReadPacket+0x40>
 8003250:	468c      	mov	ip, r1
 8003252:	2300      	movs	r3, #0
 8003254:	3301      	adds	r3, #1
  {
//    *(__packed uint32_t *)dest=USB_OTG_READ_REG32(fifo);
    *(uint32_t *)dest=USB_OTG_READ_REG32(fifo);
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	f84c 2b04 	str.w	r2, [ip], #4
  for ( i = 0; i < count32b; i++, dest += 4 )
 800325c:	459e      	cmp	lr, r3
 800325e:	d1f9      	bne.n	8003254 <USB_OTG_ReadPacket+0x14>
 8003260:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  }

  if ( count8b )
 8003264:	b15d      	cbz	r5, 800327e <USB_OTG_ReadPacket+0x3e>
  {
    count32b = USB_OTG_READ_REG32(fifo);
 8003266:	6823      	ldr	r3, [r4, #0]
    while ( count8b > 0 )
    {
      *dest = count32b;
 8003268:	7003      	strb	r3, [r0, #0]
    while ( count8b > 0 )
 800326a:	1e6a      	subs	r2, r5, #1
      count32b >>= 8;
 800326c:	ea4f 2113 	mov.w	r1, r3, lsr #8
    while ( count8b > 0 )
 8003270:	d004      	beq.n	800327c <USB_OTG_ReadPacket+0x3c>
      count32b >>= 8;
 8003272:	0c1b      	lsrs	r3, r3, #16
    while ( count8b > 0 )
 8003274:	2a01      	cmp	r2, #1
      *dest = count32b;
 8003276:	7041      	strb	r1, [r0, #1]
 8003278:	bf18      	it	ne
 800327a:	7083      	strbne	r3, [r0, #2]
      dest++;
 800327c:	4428      	add	r0, r5
      count8b--;
    }
  }

  return ((void *)dest);
}
 800327e:	bd30      	pop	{r4, r5, pc}
  for ( i = 0; i < count32b; i++, dest += 4 )
 8003280:	4608      	mov	r0, r1
 8003282:	e7ef      	b.n	8003264 <USB_OTG_ReadPacket+0x24>

08003284 <USB_OTG_SelectCore>:
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8003284:	2300      	movs	r3, #0
  pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;
 8003286:	f44f 7200 	mov.w	r2, #512	; 0x200
{
 800328a:	b4f0      	push	{r4, r5, r6, r7}
  pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 800328c:	8043      	strh	r3, [r0, #2]
  pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;
 800328e:	8082      	strh	r2, [r0, #4]
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8003290:	2900      	cmp	r1, #0
 8003292:	f040 8148 	bne.w	8003526 <USB_OTG_SelectCore+0x2a2>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 8003296:	f44f 6481 	mov.w	r4, #1032	; 0x408
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 800329a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 800329e:	2302      	movs	r3, #2
    pdev->cfg.host_channels    = 8 ;
 80032a0:	8004      	strh	r4, [r0, #0]
 80032a2:	4fba      	ldr	r7, [pc, #744]	; (800358c <USB_OTG_SelectCore+0x308>)
 80032a4:	4eba      	ldr	r6, [pc, #744]	; (8003590 <USB_OTG_SelectCore+0x30c>)
 80032a6:	4dbb      	ldr	r5, [pc, #748]	; (8003594 <USB_OTG_SelectCore+0x310>)
 80032a8:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 80035a8 <USB_OTG_SelectCore+0x324>
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 80032ac:	7341      	strb	r1, [r0, #13]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 80032ae:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 80032b2:	80c2      	strh	r2, [r0, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 80032b4:	7203      	strb	r3, [r0, #8]
 80032b6:	2204      	movs	r2, #4
 80032b8:	2108      	movs	r1, #8
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 80032ba:	4623      	mov	r3, r4
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 80032bc:	e9c0 4c04 	strd	r4, ip, [r0, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80032c0:	f503 6410 	add.w	r4, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80032c4:	61c4      	str	r4, [r0, #28]
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80032c6:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80032ca:	6584      	str	r4, [r0, #88]	; 0x58
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80032cc:	f503 6412 	add.w	r4, r3, #2336	; 0x920
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80032d0:	6204      	str	r4, [r0, #32]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032d2:	2a02      	cmp	r2, #2
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80032d4:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80032d8:	65c4      	str	r4, [r0, #92]	; 0x5c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032da:	d06a      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80032dc:	f503 6414 	add.w	r4, r3, #2368	; 0x940
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80032e0:	6244      	str	r4, [r0, #36]	; 0x24
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032e2:	2a03      	cmp	r2, #3
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80032e4:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80032e8:	6604      	str	r4, [r0, #96]	; 0x60
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032ea:	d062      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80032ec:	f503 6416 	add.w	r4, r3, #2400	; 0x960
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80032f0:	6284      	str	r4, [r0, #40]	; 0x28
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032f2:	2a04      	cmp	r2, #4
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80032f4:	f503 6436 	add.w	r4, r3, #2912	; 0xb60
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80032f8:	6644      	str	r4, [r0, #100]	; 0x64
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80032fa:	d05a      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80032fc:	f503 6418 	add.w	r4, r3, #2432	; 0x980
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003300:	62c4      	str	r4, [r0, #44]	; 0x2c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003302:	2a05      	cmp	r2, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003304:	f503 6438 	add.w	r4, r3, #2944	; 0xb80
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003308:	6684      	str	r4, [r0, #104]	; 0x68
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800330a:	d052      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800330c:	f503 641a 	add.w	r4, r3, #2464	; 0x9a0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003310:	6304      	str	r4, [r0, #48]	; 0x30
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003312:	2a06      	cmp	r2, #6
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003314:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003318:	66c4      	str	r4, [r0, #108]	; 0x6c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800331a:	d04a      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800331c:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003320:	6344      	str	r4, [r0, #52]	; 0x34
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003322:	2a07      	cmp	r2, #7
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003324:	f503 643c 	add.w	r4, r3, #3008	; 0xbc0
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003328:	6704      	str	r4, [r0, #112]	; 0x70
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800332a:	d042      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800332c:	f503 641e 	add.w	r4, r3, #2528	; 0x9e0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003330:	6384      	str	r4, [r0, #56]	; 0x38
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003332:	2a08      	cmp	r2, #8
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003334:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003338:	6744      	str	r4, [r0, #116]	; 0x74
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800333a:	d03a      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800333c:	f503 6420 	add.w	r4, r3, #2560	; 0xa00
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003340:	63c4      	str	r4, [r0, #60]	; 0x3c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003342:	2a09      	cmp	r2, #9
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003344:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003348:	6784      	str	r4, [r0, #120]	; 0x78
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800334a:	d032      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800334c:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003350:	6404      	str	r4, [r0, #64]	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003352:	2a0a      	cmp	r2, #10
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003354:	f503 6442 	add.w	r4, r3, #3104	; 0xc20
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003358:	67c4      	str	r4, [r0, #124]	; 0x7c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800335a:	d02a      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800335c:	f503 6424 	add.w	r4, r3, #2624	; 0xa40
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003360:	6444      	str	r4, [r0, #68]	; 0x44
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003362:	2a0b      	cmp	r2, #11
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003364:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003368:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800336c:	d021      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800336e:	f503 6426 	add.w	r4, r3, #2656	; 0xa60
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003372:	6484      	str	r4, [r0, #72]	; 0x48
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003374:	2a0c      	cmp	r2, #12
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003376:	f503 6446 	add.w	r4, r3, #3168	; 0xc60
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800337a:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800337e:	d018      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8003380:	f503 6428 	add.w	r4, r3, #2688	; 0xa80
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003384:	64c4      	str	r4, [r0, #76]	; 0x4c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003386:	2a0d      	cmp	r2, #13
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003388:	f503 6448 	add.w	r4, r3, #3200	; 0xc80
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800338c:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003390:	d00f      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8003392:	f503 642a 	add.w	r4, r3, #2720	; 0xaa0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003396:	6504      	str	r4, [r0, #80]	; 0x50
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003398:	2a0e      	cmp	r2, #14
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 800339a:	f503 644a 	add.w	r4, r3, #3232	; 0xca0
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800339e:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80033a2:	d006      	beq.n	80033b2 <USB_OTG_SelectCore+0x12e>
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 80033a4:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80033a8:	6542      	str	r2, [r0, #84]	; 0x54
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80033aa:	f503 624c 	add.w	r2, r3, #3264	; 0xcc0
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80033ae:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80033b2:	6185      	str	r5, [r0, #24]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80033b4:	f8c0 60d0 	str.w	r6, [r0, #208]	; 0xd0
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033b8:	2900      	cmp	r1, #0
 80033ba:	f000 80af 	beq.w	800351c <USB_OTG_SelectCore+0x298>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033be:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033c2:	2901      	cmp	r1, #1
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033c4:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033c8:	f000 80f2 	beq.w	80035b0 <USB_OTG_SelectCore+0x32c>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80033cc:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033d0:	2902      	cmp	r1, #2
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033d2:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033d6:	d04b      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80033d8:	f503 62a8 	add.w	r2, r3, #1344	; 0x540
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033dc:	2903      	cmp	r1, #3
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033de:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033e2:	d045      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80033e4:	f503 62ac 	add.w	r2, r3, #1376	; 0x560
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033e8:	2904      	cmp	r1, #4
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033ea:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033ee:	d03f      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80033f0:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033f4:	2905      	cmp	r1, #5
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80033f6:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80033fa:	d039      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80033fc:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003400:	2906      	cmp	r1, #6
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8003402:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003406:	d033      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003408:	f503 62b8 	add.w	r2, r3, #1472	; 0x5c0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800340c:	2907      	cmp	r1, #7
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800340e:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003412:	d02d      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003414:	f503 62bc 	add.w	r2, r3, #1504	; 0x5e0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003418:	2908      	cmp	r1, #8
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800341a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800341e:	d027      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003420:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003424:	2909      	cmp	r1, #9
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8003426:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800342a:	d021      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 800342c:	f503 62c4 	add.w	r2, r3, #1568	; 0x620
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003430:	290a      	cmp	r1, #10
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8003432:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003436:	d01b      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003438:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800343c:	290b      	cmp	r1, #11
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800343e:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003442:	d015      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003444:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003448:	290c      	cmp	r1, #12
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800344a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800344e:	d00f      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003450:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003454:	290d      	cmp	r1, #13
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8003456:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800345a:	d009      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 800345c:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003460:	290e      	cmp	r1, #14
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8003462:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003466:	d003      	beq.n	8003470 <USB_OTG_SelectCore+0x1ec>
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8003468:	f503 62d8 	add.w	r2, r3, #1728	; 0x6c0
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800346c:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003470:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003474:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003478:	2902      	cmp	r1, #2
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800347a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800347e:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003482:	d04b      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003484:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003488:	2903      	cmp	r1, #3
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800348a:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800348e:	d045      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003490:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003494:	2904      	cmp	r1, #4
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003496:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800349a:	d03f      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800349c:	f503 42a0 	add.w	r2, r3, #20480	; 0x5000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034a0:	2905      	cmp	r1, #5
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034a2:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034a6:	d039      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034a8:	f503 42c0 	add.w	r2, r3, #24576	; 0x6000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034ac:	2906      	cmp	r1, #6
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034ae:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034b2:	d033      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034b4:	f503 42e0 	add.w	r2, r3, #28672	; 0x7000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034b8:	2907      	cmp	r1, #7
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034ba:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034be:	d02d      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034c4:	2908      	cmp	r1, #8
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034c6:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034ca:	d027      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034cc:	f503 4210 	add.w	r2, r3, #36864	; 0x9000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034d0:	2909      	cmp	r1, #9
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034d2:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034d6:	d021      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034d8:	f503 4220 	add.w	r2, r3, #40960	; 0xa000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034dc:	290a      	cmp	r1, #10
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034de:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034e2:	d01b      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034e4:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034e8:	290b      	cmp	r1, #11
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034ea:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034ee:	d015      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034f0:	f503 4240 	add.w	r2, r3, #49152	; 0xc000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034f4:	290c      	cmp	r1, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034f6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80034fa:	d00f      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80034fc:	f503 4250 	add.w	r2, r3, #53248	; 0xd000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003500:	290d      	cmp	r1, #13
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003502:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003506:	d009      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003508:	f503 4260 	add.w	r2, r3, #57344	; 0xe000
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800350c:	290e      	cmp	r1, #14
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 800350e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8003512:	d003      	beq.n	800351c <USB_OTG_SelectCore+0x298>
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003514:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8003518:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 800351c:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
  
  return status;
}
 8003520:	2000      	movs	r0, #0
 8003522:	bcf0      	pop	{r4, r5, r6, r7}
 8003524:	4770      	bx	lr
  else if (coreID == USB_OTG_HS_CORE_ID)
 8003526:	2901      	cmp	r1, #1
 8003528:	d016      	beq.n	8003558 <USB_OTG_SelectCore+0x2d4>
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800352a:	7842      	ldrb	r2, [r0, #1]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800352c:	7801      	ldrb	r1, [r0, #0]
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 800352e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8003532:	e9c0 3404 	strd	r3, r4, [r0, #16]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003536:	b30a      	cbz	r2, 800357c <USB_OTG_SelectCore+0x2f8>
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003538:	f44f 6410 	mov.w	r4, #2304	; 0x900
 800353c:	61c4      	str	r4, [r0, #28]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800353e:	2a01      	cmp	r2, #1
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8003540:	f44f 6430 	mov.w	r4, #2816	; 0xb00
 8003544:	6584      	str	r4, [r0, #88]	; 0x58
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003546:	f44f 6760 	mov.w	r7, #3584	; 0xe00
 800354a:	f44f 6688 	mov.w	r6, #1088	; 0x440
 800354e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003552:	f47f aebb 	bne.w	80032cc <USB_OTG_SelectCore+0x48>
 8003556:	e72c      	b.n	80033b2 <USB_OTG_SelectCore+0x12e>
    pdev->cfg.phy_itface = USB_OTG_ULPI_PHY;
 8003558:	4c0f      	ldr	r4, [pc, #60]	; (8003598 <USB_OTG_SelectCore+0x314>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 800355a:	7341      	strb	r1, [r0, #13]
    pdev->cfg.host_channels    = 12 ;
 800355c:	f240 620c 	movw	r2, #1548	; 0x60c
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8003560:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    pdev->cfg.host_channels    = 12 ;
 8003564:	8002      	strh	r2, [r0, #0]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8003566:	80c3      	strh	r3, [r0, #6]
    pdev->cfg.phy_itface = USB_OTG_ULPI_PHY;
 8003568:	7201      	strb	r1, [r0, #8]
 800356a:	4f0c      	ldr	r7, [pc, #48]	; (800359c <USB_OTG_SelectCore+0x318>)
 800356c:	4e0c      	ldr	r6, [pc, #48]	; (80035a0 <USB_OTG_SelectCore+0x31c>)
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <USB_OTG_SelectCore+0x320>)
 8003570:	f8df c038 	ldr.w	ip, [pc, #56]	; 80035ac <USB_OTG_SelectCore+0x328>
 8003574:	2206      	movs	r2, #6
 8003576:	210c      	movs	r1, #12
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8003578:	4623      	mov	r3, r4
 800357a:	e69f      	b.n	80032bc <USB_OTG_SelectCore+0x38>
  uint32_t i , baseAddress = 0;
 800357c:	4613      	mov	r3, r2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800357e:	f44f 6760 	mov.w	r7, #3584	; 0xe00
 8003582:	f44f 6688 	mov.w	r6, #1088	; 0x440
 8003586:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800358a:	e712      	b.n	80033b2 <USB_OTG_SelectCore+0x12e>
 800358c:	50000e00 	.word	0x50000e00
 8003590:	50000440 	.word	0x50000440
 8003594:	50000400 	.word	0x50000400
 8003598:	40040000 	.word	0x40040000
 800359c:	40040e00 	.word	0x40040e00
 80035a0:	40040440 	.word	0x40040440
 80035a4:	40040400 	.word	0x40040400
 80035a8:	50000800 	.word	0x50000800
 80035ac:	40040800 	.word	0x40040800
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80035b8:	e7b0      	b.n	800351c <USB_OTG_SelectCore+0x298>
 80035ba:	bf00      	nop

080035bc <USB_OTG_CoreInit>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80035bc:	b570      	push	{r4, r5, r6, lr}
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035be:	7a03      	ldrb	r3, [r0, #8]
 80035c0:	2b01      	cmp	r3, #1
{
 80035c2:	b082      	sub	sp, #8
 80035c4:	4604      	mov	r4, r0
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	d14a      	bne.n	800365e <USB_OTG_CoreInit+0xa2>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80035c8:	6902      	ldr	r2, [r0, #16]
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 80035ca:	7a41      	ldrb	r1, [r0, #9]
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80035cc:	6b96      	ldr	r6, [r2, #56]	; 0x38
    gccfg.b.pwdn = 0;
 80035ce:	f36f 4610 	bfc	r6, #16, #1
    if (pdev->cfg.Sof_output)
 80035d2:	2900      	cmp	r1, #0
 80035d4:	d040      	beq.n	8003658 <USB_OTG_CoreInit+0x9c>
 80035d6:	f363 5614 	bfi	r6, r3, #20, #1
    {
      gccfg.b.sofouten = 1;   
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80035da:	6396      	str	r6, [r2, #56]	; 0x38
    usbcfg.b.ulpi_fsls = 0;
    usbcfg.b.ulpi_clk_sus_m = 0;
    usbcfg.b.ulpi_ext_vbus_drv =0;
    usbcfg.b.ulpi_int_vbus_indicator =0;

    if(pdev->cfg.low_power==1U)
 80035dc:	7aa1      	ldrb	r1, [r4, #10]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80035de:	68d3      	ldr	r3, [r2, #12]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80035e0:	4d5b      	ldr	r5, [pc, #364]	; (8003750 <USB_OTG_CoreInit+0x194>)
    if(pdev->cfg.low_power==1U)
 80035e2:	f1a1 0101 	sub.w	r1, r1, #1
    usbcfg.b.phyif             = 0; /* 8 bits */ //for HS mode it is reserv bit
 80035e6:	f423 03f4 	bic.w	r3, r3, #7995392	; 0x7a0000
    if(pdev->cfg.low_power==1U)
 80035ea:	fab1 f181 	clz	r1, r1
 80035ee:	0949      	lsrs	r1, r1, #5
    usbcfg.b.phyif             = 0; /* 8 bits */ //for HS mode it is reserv bit
 80035f0:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 80035f4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
      {
	usbcfg.b.ulpi_ext_vbus_drv =1;
      }

    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80035f8:	60d3      	str	r3, [r2, #12]
    USB_OTG_BSP_uDelay(3);
 80035fa:	2003      	movs	r0, #3
  greset.d32 = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	9300      	str	r3, [sp, #0]
    USB_OTG_BSP_uDelay(3);
 8003600:	f7ff fe00 	bl	8003204 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003604:	6923      	ldr	r3, [r4, #16]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 800360a:	e006      	b.n	800361a <USB_OTG_CoreInit+0x5e>
    USB_OTG_BSP_uDelay(3);
 800360c:	f7ff fdfa 	bl	8003204 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003610:	6923      	ldr	r3, [r4, #16]
    if (++count > 200000)
 8003612:	3d01      	subs	r5, #1
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 8003618:	d018      	beq.n	800364c <USB_OTG_CoreInit+0x90>
  while (greset.b.ahbidle == 0);
 800361a:	9a00      	ldr	r2, [sp, #0]
 800361c:	2a00      	cmp	r2, #0
    USB_OTG_BSP_uDelay(3);
 800361e:	f04f 0003 	mov.w	r0, #3
  while (greset.b.ahbidle == 0);
 8003622:	daf3      	bge.n	800360c <USB_OTG_CoreInit+0x50>
  greset.b.csftrst = 1;
 8003624:	9900      	ldr	r1, [sp, #0]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003626:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <USB_OTG_CoreInit+0x194>)
  greset.b.csftrst = 1;
 8003628:	f041 0101 	orr.w	r1, r1, #1
 800362c:	9100      	str	r1, [sp, #0]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800362e:	9900      	ldr	r1, [sp, #0]
 8003630:	6119      	str	r1, [r3, #16]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003632:	6919      	ldr	r1, [r3, #16]
 8003634:	9100      	str	r1, [sp, #0]
    if (++count > 200000)
 8003636:	e003      	b.n	8003640 <USB_OTG_CoreInit+0x84>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	9100      	str	r1, [sp, #0]
    if (++count > 200000)
 800363c:	3a01      	subs	r2, #1
 800363e:	d002      	beq.n	8003646 <USB_OTG_CoreInit+0x8a>
  while (greset.b.csftrst == 1);
 8003640:	9900      	ldr	r1, [sp, #0]
 8003642:	07c8      	lsls	r0, r1, #31
 8003644:	d4f8      	bmi.n	8003638 <USB_OTG_CoreInit+0x7c>
  USB_OTG_BSP_uDelay(3);
 8003646:	2003      	movs	r0, #3
 8003648:	f7ff fddc 	bl	8003204 <USB_OTG_BSP_uDelay>
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
    
    if(pdev->cfg.dma_enable == 1)
 800364c:	78e3      	ldrb	r3, [r4, #3]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d056      	beq.n	8003700 <USB_OTG_CoreInit+0x144>
    
  }
  /* initialize OTG features */

  return status;
}
 8003652:	2000      	movs	r0, #0
 8003654:	b002      	add	sp, #8
 8003656:	bd70      	pop	{r4, r5, r6, pc}
      gccfg.b.sofouten = 1;   
 8003658:	f3c6 5300 	ubfx	r3, r6, #20, #1
 800365c:	e7bb      	b.n	80035d6 <USB_OTG_CoreInit+0x1a>
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 800365e:	6902      	ldr	r2, [r0, #16]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003660:	4d3b      	ldr	r5, [pc, #236]	; (8003750 <USB_OTG_CoreInit+0x194>)
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8003662:	68d3      	ldr	r3, [r2, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 8003664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8003668:	60d3      	str	r3, [r2, #12]
 800366a:	2600      	movs	r6, #0
    USB_OTG_BSP_uDelay(3);
 800366c:	2003      	movs	r0, #3
  greset.d32 = 0;
 800366e:	9601      	str	r6, [sp, #4]
    USB_OTG_BSP_uDelay(3);
 8003670:	f7ff fdc8 	bl	8003204 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 800367a:	e006      	b.n	800368a <USB_OTG_CoreInit+0xce>
    USB_OTG_BSP_uDelay(3);
 800367c:	f7ff fdc2 	bl	8003204 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003680:	6923      	ldr	r3, [r4, #16]
    if (++count > 200000)
 8003682:	3d01      	subs	r5, #1
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 8003688:	d019      	beq.n	80036be <USB_OTG_CoreInit+0x102>
  while (greset.b.ahbidle == 0);
 800368a:	9a01      	ldr	r2, [sp, #4]
 800368c:	2a00      	cmp	r2, #0
    USB_OTG_BSP_uDelay(3);
 800368e:	f04f 0003 	mov.w	r0, #3
  while (greset.b.ahbidle == 0);
 8003692:	daf3      	bge.n	800367c <USB_OTG_CoreInit+0xc0>
  greset.b.csftrst = 1;
 8003694:	9901      	ldr	r1, [sp, #4]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003696:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <USB_OTG_CoreInit+0x194>)
  greset.b.csftrst = 1;
 8003698:	f041 0101 	orr.w	r1, r1, #1
 800369c:	9101      	str	r1, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800369e:	9901      	ldr	r1, [sp, #4]
 80036a0:	6119      	str	r1, [r3, #16]
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80036a6:	e003      	b.n	80036b0 <USB_OTG_CoreInit+0xf4>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80036a8:	6919      	ldr	r1, [r3, #16]
 80036aa:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80036ac:	3a01      	subs	r2, #1
 80036ae:	d002      	beq.n	80036b6 <USB_OTG_CoreInit+0xfa>
  while (greset.b.csftrst == 1);
 80036b0:	9901      	ldr	r1, [sp, #4]
 80036b2:	07c9      	lsls	r1, r1, #31
 80036b4:	d4f8      	bmi.n	80036a8 <USB_OTG_CoreInit+0xec>
  USB_OTG_BSP_uDelay(3);
 80036b6:	2003      	movs	r0, #3
 80036b8:	f7ff fda4 	bl	8003204 <USB_OTG_BSP_uDelay>
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80036bc:	6923      	ldr	r3, [r4, #16]
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80036be:	7a22      	ldrb	r2, [r4, #8]
    if(pdev->cfg.Sof_output)
 80036c0:	7a61      	ldrb	r1, [r4, #9]
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80036c2:	f1a2 0203 	sub.w	r2, r2, #3
 80036c6:	fab2 f282 	clz	r2, r2
 80036ca:	0952      	lsrs	r2, r2, #5
    if(pdev->cfg.Sof_output)
 80036cc:	3900      	subs	r1, #0
    gccfg.b.pwdn = 1;
 80036ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
    if(pdev->cfg.Sof_output)
 80036d2:	bf18      	it	ne
 80036d4:	2101      	movne	r1, #1
    gccfg.b.pwdn = 1;
 80036d6:	f042 020d 	orr.w	r2, r2, #13
 80036da:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80036de:	f362 4617 	bfi	r6, r2, #16, #8
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80036e2:	639e      	str	r6, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 80036e4:	2014      	movs	r0, #20
 80036e6:	f7ff fd8f 	bl	8003208 <USB_OTG_BSP_mDelay>
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80036ea:	7a21      	ldrb	r1, [r4, #8]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80036ec:	6922      	ldr	r2, [r4, #16]
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80036ee:	2903      	cmp	r1, #3
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80036f0:	68d3      	ldr	r3, [r2, #12]
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80036f2:	d013      	beq.n	800371c <USB_OTG_CoreInit+0x160>
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80036f4:	60d3      	str	r3, [r2, #12]
  if(pdev->cfg.dma_enable == 1)
 80036f6:	78e3      	ldrb	r3, [r4, #3]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d1aa      	bne.n	8003652 <USB_OTG_CoreInit+0x96>
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 80036fc:	6921      	ldr	r1, [r4, #16]
 80036fe:	e002      	b.n	8003706 <USB_OTG_CoreInit+0x14a>
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8003700:	6921      	ldr	r1, [r4, #16]
 8003702:	232a      	movs	r3, #42	; 0x2a
 8003704:	608b      	str	r3, [r1, #8]
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8003706:	688b      	ldr	r3, [r1, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8003708:	f023 023e 	bic.w	r2, r3, #62	; 0x3e
 800370c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8003710:	f362 0307 	bfi	r3, r2, #0, #8
}
 8003714:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8003716:	608b      	str	r3, [r1, #8]
}
 8003718:	b002      	add	sp, #8
 800371a:	bd70      	pop	{r4, r5, r6, pc}
      usbcfg.b.otgutmifssel = 1;
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8003720:	60d3      	str	r3, [r2, #12]
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 8003722:	6b15      	ldr	r5, [r2, #48]	; 0x30
      i2cctl.b.addr = 0x2D;
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <USB_OTG_CoreInit+0x198>)
 8003726:	ea03 4315 	and.w	r3, r3, r5, lsr #16
 800372a:	f443 53a1 	orr.w	r3, r3, #5152	; 0x1420
 800372e:	f043 030d 	orr.w	r3, r3, #13
 8003732:	f363 451f 	bfi	r5, r3, #16, #16
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8003736:	6315      	str	r5, [r2, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 8003738:	20c8      	movs	r0, #200	; 0xc8
 800373a:	f7ff fd65 	bl	8003208 <USB_OTG_BSP_mDelay>
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 800373e:	6923      	ldr	r3, [r4, #16]
      i2cctl.b.i2cen = 1;
 8003740:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8003744:	631d      	str	r5, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 8003746:	20c8      	movs	r0, #200	; 0xc8
 8003748:	f7ff fd5e 	bl	8003208 <USB_OTG_BSP_mDelay>
 800374c:	e7d3      	b.n	80036f6 <USB_OTG_CoreInit+0x13a>
 800374e:	bf00      	nop
 8003750:	00030d40 	.word	0x00030d40
 8003754:	ffffe300 	.word	0xffffe300

08003758 <USB_OTG_EnableGlobalInt>:
//--------------------------------------------------------------
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003758:	4603      	mov	r3, r0
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
  return status;
}
 800375a:	2000      	movs	r0, #0
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	6893      	ldr	r3, [r2, #8]
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6093      	str	r3, [r2, #8]
}
 8003766:	4770      	bx	lr

08003768 <USB_OTG_DisableGlobalInt>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003768:	4603      	mov	r3, r0
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
  return status;
}
 800376a:	2000      	movs	r0, #0
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	6893      	ldr	r3, [r2, #8]
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	6093      	str	r3, [r2, #8]
}
 8003776:	4770      	bx	lr

08003778 <USB_OTG_FlushTxFifo>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8003778:	b500      	push	{lr}
 800377a:	b083      	sub	sp, #12
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  USB_OTG_GREGS *local_pdev_gregs = pdev->regs.GREGS;
  
  uint32_t count = 0;
  greset.d32 = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 8003780:	9b01      	ldr	r3, [sp, #4]
  USB_OTG_GREGS *local_pdev_gregs = pdev->regs.GREGS;
 8003782:	6900      	ldr	r0, [r0, #16]
  greset.b.txfflsh = 1;
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	f361 138a 	bfi	r3, r1, #6, #5
 8003790:	9301      	str	r3, [sp, #4]
  USB_OTG_WRITE_REG32( &local_pdev_gregs->GRSTCTL, greset.d32 );
 8003792:	9b01      	ldr	r3, [sp, #4]
 8003794:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 8003796:	6902      	ldr	r2, [r0, #16]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <USB_OTG_FlushTxFifo+0x44>)
 800379a:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 800379c:	e003      	b.n	80037a6 <USB_OTG_FlushTxFifo+0x2e>
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 800379e:	6902      	ldr	r2, [r0, #16]
 80037a0:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80037a2:	3b01      	subs	r3, #1
 80037a4:	d002      	beq.n	80037ac <USB_OTG_FlushTxFifo+0x34>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80037a6:	9a01      	ldr	r2, [sp, #4]
 80037a8:	0692      	lsls	r2, r2, #26
 80037aa:	d4f8      	bmi.n	800379e <USB_OTG_FlushTxFifo+0x26>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80037ac:	2003      	movs	r0, #3
 80037ae:	f7ff fd29 	bl	8003204 <USB_OTG_BSP_uDelay>
  return status;
}
 80037b2:	2000      	movs	r0, #0
 80037b4:	b003      	add	sp, #12
 80037b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ba:	bf00      	nop
 80037bc:	00030d40 	.word	0x00030d40

080037c0 <USB_OTG_FlushRxFifo>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80037c0:	b500      	push	{lr}
 80037c2:	b083      	sub	sp, #12
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  USB_OTG_GREGS *local_pdev_gregs = pdev->regs.GREGS;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 80037c8:	9b01      	ldr	r3, [sp, #4]
  USB_OTG_GREGS *local_pdev_gregs = pdev->regs.GREGS;
 80037ca:	6901      	ldr	r1, [r0, #16]
  greset.b.rxfflsh = 1;
 80037cc:	f043 0310 	orr.w	r3, r3, #16
 80037d0:	9301      	str	r3, [sp, #4]
  USB_OTG_WRITE_REG32( &local_pdev_gregs->GRSTCTL, greset.d32 );
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	610b      	str	r3, [r1, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80037d6:	690a      	ldr	r2, [r1, #16]
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <USB_OTG_FlushRxFifo+0x3c>)
 80037da:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80037dc:	e003      	b.n	80037e6 <USB_OTG_FlushRxFifo+0x26>
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80037de:	690a      	ldr	r2, [r1, #16]
 80037e0:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80037e2:	3b01      	subs	r3, #1
 80037e4:	d002      	beq.n	80037ec <USB_OTG_FlushRxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80037e6:	9a01      	ldr	r2, [sp, #4]
 80037e8:	06d2      	lsls	r2, r2, #27
 80037ea:	d4f8      	bmi.n	80037de <USB_OTG_FlushRxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80037ec:	2003      	movs	r0, #3
 80037ee:	f7ff fd09 	bl	8003204 <USB_OTG_BSP_uDelay>
  return status;
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	b003      	add	sp, #12
 80037f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037fa:	bf00      	nop
 80037fc:	00030d40 	.word	0x00030d40

08003800 <USB_OTG_SetCurrentMode>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8003800:	b510      	push	{r4, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8003802:	6904      	ldr	r4, [r0, #16]
 8003804:	68e3      	ldr	r3, [r4, #12]
  
  usbcfg.b.force_host = 0;
 8003806:	f3c3 6207 	ubfx	r2, r3, #24, #8
 800380a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 800380e:	2901      	cmp	r1, #1
  usbcfg.b.force_host = 0;
 8003810:	f362 631f 	bfi	r3, r2, #24, #8
  if ( mode == HOST_MODE)
 8003814:	d008      	beq.n	8003828 <USB_OTG_SetCurrentMode+0x28>
  {
    usbcfg.b.force_host = 1;
  }
  else if ( mode == DEVICE_MODE)
 8003816:	b909      	cbnz	r1, 800381c <USB_OTG_SetCurrentMode+0x1c>
  {
    usbcfg.b.force_dev = 1;
 8003818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 800381c:	2032      	movs	r0, #50	; 0x32
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 800381e:	60e3      	str	r3, [r4, #12]
  USB_OTG_BSP_mDelay(50);
 8003820:	f7ff fcf2 	bl	8003208 <USB_OTG_BSP_mDelay>
  return status;
}
 8003824:	2000      	movs	r0, #0
 8003826:	bd10      	pop	{r4, pc}
    usbcfg.b.force_host = 1;
 8003828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382c:	e7f6      	b.n	800381c <USB_OTG_SetCurrentMode+0x1c>
 800382e:	bf00      	nop

08003830 <USB_OTG_IsDeviceMode>:


//--------------------------------------------------------------
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8003830:	6903      	ldr	r3, [r0, #16]
 8003832:	6958      	ldr	r0, [r3, #20]


//--------------------------------------------------------------
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8003834:	43c0      	mvns	r0, r0
}
 8003836:	f000 0001 	and.w	r0, r0, #1
 800383a:	4770      	bx	lr

0800383c <USB_OTG_ReadCoreItr>:

//--------------------------------------------------------------
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 800383c:	6903      	ldr	r3, [r0, #16]
 800383e:	6958      	ldr	r0, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8003840:	699b      	ldr	r3, [r3, #24]
  return v;
}
 8003842:	4018      	ands	r0, r3
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <USB_OTG_CoreInitDev>:
}


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8003848:	b570      	push	{r4, r5, r6, lr}
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;

  dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800384a:	6942      	ldr	r2, [r0, #20]
  gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
    if(pdev->cfg.vbus_sensing_enable==0U)
 800384c:	7ac3      	ldrb	r3, [r0, #11]
  dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800384e:	6851      	ldr	r1, [r2, #4]
{
 8003850:	4604      	mov	r4, r0
 8003852:	b082      	sub	sp, #8
  gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8003854:	6850      	ldr	r0, [r2, #4]
    if(pdev->cfg.vbus_sensing_enable==0U)
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 820b 	bne.w	8003c72 <USB_OTG_CoreInitDev+0x42a>
      {
        dctl.b.sftdiscon =1;
        gccfg.b.disablevbussensing =1;
        gccfg.b.vbussensingA=0;
 800385c:	f363 4092 	bfi	r0, r3, #18, #1
    else
      {
        gccfg.b.disablevbussensing =0;
        gccfg.b.vbussensingB=1;
      }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL,dctl.d32);
 8003860:	f041 0102 	orr.w	r1, r1, #2
        gccfg.b.disablevbussensing =1;
 8003864:	2501      	movs	r5, #1
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL,dctl.d32);
 8003866:	6051      	str	r1, [r2, #4]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800386e:	f021 0128 	bic.w	r1, r1, #40	; 0x28
 8003872:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003876:	430b      	orrs	r3, r1
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8003878:	6921      	ldr	r1, [r4, #16]
 800387a:	f363 4017 	bfi	r0, r3, #16, #8

  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 800387e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8003882:	6388      	str	r0, [r1, #56]	; 0x38
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8003884:	2000      	movs	r0, #0
 8003886:	6018      	str	r0, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8003888:	6813      	ldr	r3, [r2, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 800388a:	f360 23cc 	bfi	r3, r0, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 800388e:	6013      	str	r3, [r2, #0]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
  }
#endif
#ifdef  USB_OTG_HS_CORE
  if(pdev->cfg.coreID == USB_OTG_HS_CORE_ID  )
 8003890:	7b63      	ldrb	r3, [r4, #13]
 8003892:	2b01      	cmp	r3, #1
 8003894:	f000 81fd 	beq.w	8003c92 <USB_OTG_CoreInitDev+0x44a>
  greset.d32 = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 800389c:	9b01      	ldr	r3, [sp, #4]
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 80038a4:	9a01      	ldr	r2, [sp, #4]
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80038a6:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <USB_OTG_CoreInitDev+0x25c>)
  greset.b.txfnum  = num;
 80038a8:	2010      	movs	r0, #16
 80038aa:	f360 128a 	bfi	r2, r0, #6, #5
 80038ae:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &local_pdev_gregs->GRSTCTL, greset.d32 );
 80038b0:	9a01      	ldr	r2, [sp, #4]
 80038b2:	610a      	str	r2, [r1, #16]
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80038b4:	690a      	ldr	r2, [r1, #16]
 80038b6:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80038b8:	e003      	b.n	80038c2 <USB_OTG_CoreInitDev+0x7a>
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80038ba:	690a      	ldr	r2, [r1, #16]
 80038bc:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80038be:	3b01      	subs	r3, #1
 80038c0:	d002      	beq.n	80038c8 <USB_OTG_CoreInitDev+0x80>
  while (greset.b.txfflsh == 1);
 80038c2:	9a01      	ldr	r2, [sp, #4]
 80038c4:	0690      	lsls	r0, r2, #26
 80038c6:	d4f8      	bmi.n	80038ba <USB_OTG_CoreInitDev+0x72>
  USB_OTG_BSP_uDelay(3);
 80038c8:	2003      	movs	r0, #3
 80038ca:	f7ff fc9b 	bl	8003204 <USB_OTG_BSP_uDelay>
  greset.d32 = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
  greset.b.rxfflsh = 1;
 80038d2:	9b00      	ldr	r3, [sp, #0]
  USB_OTG_GREGS *local_pdev_gregs = pdev->regs.GREGS;
 80038d4:	6921      	ldr	r1, [r4, #16]
  greset.b.rxfflsh = 1;
 80038d6:	f043 0310 	orr.w	r3, r3, #16
 80038da:	9300      	str	r3, [sp, #0]
  USB_OTG_WRITE_REG32( &local_pdev_gregs->GRSTCTL, greset.d32 );
 80038dc:	9b00      	ldr	r3, [sp, #0]
 80038de:	610b      	str	r3, [r1, #16]
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80038e0:	690a      	ldr	r2, [r1, #16]
 80038e2:	4b70      	ldr	r3, [pc, #448]	; (8003aa4 <USB_OTG_CoreInitDev+0x25c>)
 80038e4:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 80038e6:	e003      	b.n	80038f0 <USB_OTG_CoreInitDev+0xa8>
    greset.d32 = USB_OTG_READ_REG32( &local_pdev_gregs->GRSTCTL);
 80038e8:	690a      	ldr	r2, [r1, #16]
 80038ea:	9200      	str	r2, [sp, #0]
    if (++count > 200000)
 80038ec:	3b01      	subs	r3, #1
 80038ee:	d002      	beq.n	80038f6 <USB_OTG_CoreInitDev+0xae>
  while (greset.b.rxfflsh == 1);
 80038f0:	9a00      	ldr	r2, [sp, #0]
 80038f2:	06d2      	lsls	r2, r2, #27
 80038f4:	d4f8      	bmi.n	80038e8 <USB_OTG_CoreInitDev+0xa0>
  USB_OTG_BSP_uDelay(3);
 80038f6:	2003      	movs	r0, #3
 80038f8:	f7ff fc84 	bl	8003204 <USB_OTG_BSP_uDelay>
#endif
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 80038fc:	6961      	ldr	r1, [r4, #20]
 80038fe:	2200      	movs	r2, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8003904:	610a      	str	r2, [r1, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8003906:	614a      	str	r2, [r1, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003908:	618b      	str	r3, [r1, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 800390a:	61ca      	str	r2, [r1, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800390c:	7863      	ldrb	r3, [r4, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8186 	beq.w	8003c20 <USB_OTG_CoreInitDev+0x3d8>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003914:	69e5      	ldr	r5, [r4, #28]
 8003916:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003918:	2e00      	cmp	r6, #0
 800391a:	bfac      	ite	ge
 800391c:	2600      	movge	r6, #0
 800391e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003922:	20ff      	movs	r0, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003924:	2b01      	cmp	r3, #1
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003926:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003928:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800392a:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800392c:	f000 81e2 	beq.w	8003cf4 <USB_OTG_CoreInitDev+0x4ac>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003930:	6a25      	ldr	r5, [r4, #32]
 8003932:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003934:	2e00      	cmp	r6, #0
 8003936:	bfac      	ite	ge
 8003938:	2600      	movge	r6, #0
 800393a:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800393e:	2b02      	cmp	r3, #2
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003940:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003942:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003944:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003946:	f000 80af 	beq.w	8003aa8 <USB_OTG_CoreInitDev+0x260>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 800394a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800394c:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 800394e:	2e00      	cmp	r6, #0
 8003950:	bfac      	ite	ge
 8003952:	2600      	movge	r6, #0
 8003954:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003958:	2b03      	cmp	r3, #3
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 800395a:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 800395c:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800395e:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003960:	f000 80a2 	beq.w	8003aa8 <USB_OTG_CoreInitDev+0x260>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003964:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003966:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003968:	2e00      	cmp	r6, #0
 800396a:	bfac      	ite	ge
 800396c:	2600      	movge	r6, #0
 800396e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003972:	2b04      	cmp	r3, #4
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003974:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003976:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003978:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800397a:	f000 8095 	beq.w	8003aa8 <USB_OTG_CoreInitDev+0x260>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 800397e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003980:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003982:	2e00      	cmp	r6, #0
 8003984:	bfac      	ite	ge
 8003986:	2600      	movge	r6, #0
 8003988:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800398c:	2b05      	cmp	r3, #5
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 800398e:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003990:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003992:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003994:	f000 8088 	beq.w	8003aa8 <USB_OTG_CoreInitDev+0x260>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003998:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800399a:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 800399c:	2e00      	cmp	r6, #0
 800399e:	bfac      	ite	ge
 80039a0:	2600      	movge	r6, #0
 80039a2:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039a6:	2b06      	cmp	r3, #6
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 80039a8:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 80039aa:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80039ac:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039ae:	d07b      	beq.n	8003aa8 <USB_OTG_CoreInitDev+0x260>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 80039b0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80039b2:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	bfac      	ite	ge
 80039b8:	2600      	movge	r6, #0
 80039ba:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039be:	2b07      	cmp	r3, #7
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 80039c0:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 80039c2:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80039c4:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039c6:	d05f      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 80039c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80039ca:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 80039cc:	2e00      	cmp	r6, #0
 80039ce:	bfac      	ite	ge
 80039d0:	2600      	movge	r6, #0
 80039d2:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039d6:	2b08      	cmp	r3, #8
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 80039d8:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 80039da:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80039dc:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039de:	d053      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 80039e0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80039e2:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 80039e4:	2e00      	cmp	r6, #0
 80039e6:	bfac      	ite	ge
 80039e8:	2600      	movge	r6, #0
 80039ea:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039ee:	2b09      	cmp	r3, #9
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 80039f0:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 80039f2:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80039f4:	60a8      	str	r0, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80039f6:	d047      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 80039f8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80039fa:	682a      	ldr	r2, [r5, #0]
    if (depctl.b.epena)
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	bfac      	ite	ge
 8003a00:	2200      	movge	r2, #0
 8003a02:	f04f 4290 	movlt.w	r2, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a06:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a08:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a0a:	22ff      	movs	r2, #255	; 0xff
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a0c:	2b0a      	cmp	r3, #10
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a0e:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a10:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a12:	d039      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003a14:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003a16:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003a18:	4286      	cmp	r6, r0
 8003a1a:	bfac      	ite	ge
 8003a1c:	4606      	movge	r6, r0
 8003a1e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a22:	2b0b      	cmp	r3, #11
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a24:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a26:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a28:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a2a:	d02d      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003a2c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003a2e:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003a30:	4286      	cmp	r6, r0
 8003a32:	bfac      	ite	ge
 8003a34:	4606      	movge	r6, r0
 8003a36:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a3a:	2b0c      	cmp	r3, #12
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a3c:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a3e:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a40:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a42:	d021      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003a44:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003a46:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003a48:	4286      	cmp	r6, r0
 8003a4a:	bfac      	ite	ge
 8003a4c:	4606      	movge	r6, r0
 8003a4e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a52:	2b0d      	cmp	r3, #13
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a54:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a56:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a58:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a5a:	d015      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003a5c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003a5e:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003a60:	4286      	cmp	r6, r0
 8003a62:	bfac      	ite	ge
 8003a64:	4606      	movge	r6, r0
 8003a66:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a6a:	2b0e      	cmp	r3, #14
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a6c:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a6e:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a70:	60aa      	str	r2, [r5, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003a72:	d009      	beq.n	8003a88 <USB_OTG_CoreInitDev+0x240>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003a74:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003a76:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003a78:	4286      	cmp	r6, r0
 8003a7a:	bfac      	ite	ge
 8003a7c:	4606      	movge	r6, r0
 8003a7e:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003a82:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003a84:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003a86:	60aa      	str	r2, [r5, #8]
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003a88:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003a8a:	682a      	ldr	r2, [r5, #0]
    if (depctl.b.epena)
 8003a8c:	2a00      	cmp	r2, #0
 8003a8e:	f280 8121 	bge.w	8003cd4 <USB_OTG_CoreInitDev+0x48c>
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a96:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003a9c:	22ff      	movs	r2, #255	; 0xff
 8003a9e:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003aa0:	e00c      	b.n	8003abc <USB_OTG_CoreInitDev+0x274>
 8003aa2:	bf00      	nop
 8003aa4:	00030d40 	.word	0x00030d40
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003aa8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003aaa:	682a      	ldr	r2, [r5, #0]
    if (depctl.b.epena)
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	f2c0 8125 	blt.w	8003cfc <USB_OTG_CoreInitDev+0x4b4>
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003ab6:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	60aa      	str	r2, [r5, #8]
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003abc:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8003abe:	682a      	ldr	r2, [r5, #0]
    if (depctl.b.epena)
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	bfac      	ite	ge
 8003ac4:	2200      	movge	r2, #0
 8003ac6:	f04f 4290 	movlt.w	r2, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003aca:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003acc:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003ace:	22ff      	movs	r2, #255	; 0xff
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003ad0:	2b02      	cmp	r3, #2
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003ad2:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003ad4:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003ad6:	f240 80a3 	bls.w	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003ada:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003adc:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003ade:	4286      	cmp	r6, r0
 8003ae0:	bfac      	ite	ge
 8003ae2:	4606      	movge	r6, r0
 8003ae4:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003ae8:	2b03      	cmp	r3, #3
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003aea:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003aec:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003aee:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003af0:	f000 8096 	beq.w	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003af4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003af6:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003af8:	4286      	cmp	r6, r0
 8003afa:	bfac      	ite	ge
 8003afc:	4606      	movge	r6, r0
 8003afe:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b02:	2b04      	cmp	r3, #4
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b04:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b06:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b08:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b0a:	f000 8089 	beq.w	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b0e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8003b10:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b12:	4286      	cmp	r6, r0
 8003b14:	bfac      	ite	ge
 8003b16:	4606      	movge	r6, r0
 8003b18:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b1c:	2b05      	cmp	r3, #5
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b1e:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b20:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b22:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b24:	d07c      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b26:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b28:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b2a:	4286      	cmp	r6, r0
 8003b2c:	bfac      	ite	ge
 8003b2e:	4606      	movge	r6, r0
 8003b30:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b34:	2b06      	cmp	r3, #6
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b36:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b38:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b3a:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b3c:	d070      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b3e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003b40:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b42:	4286      	cmp	r6, r0
 8003b44:	bfac      	ite	ge
 8003b46:	4606      	movge	r6, r0
 8003b48:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b4c:	2b07      	cmp	r3, #7
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b4e:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b50:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b52:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b54:	d064      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b56:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003b58:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b5a:	4286      	cmp	r6, r0
 8003b5c:	bfac      	ite	ge
 8003b5e:	4606      	movge	r6, r0
 8003b60:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b64:	2b08      	cmp	r3, #8
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b66:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b68:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b6a:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b6c:	d058      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b6e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8003b70:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b72:	4286      	cmp	r6, r0
 8003b74:	bfac      	ite	ge
 8003b76:	4606      	movge	r6, r0
 8003b78:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b7c:	2b09      	cmp	r3, #9
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b7e:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b80:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b82:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b84:	d04c      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b86:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8003b88:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003b8a:	4286      	cmp	r6, r0
 8003b8c:	bfac      	ite	ge
 8003b8e:	4606      	movge	r6, r0
 8003b90:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b94:	2b0a      	cmp	r3, #10
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003b96:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003b98:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003b9a:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003b9c:	d040      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003b9e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003ba2:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003ba4:	4286      	cmp	r6, r0
 8003ba6:	bfac      	ite	ge
 8003ba8:	4606      	movge	r6, r0
 8003baa:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003bae:	2b0b      	cmp	r3, #11
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003bb0:	602e      	str	r6, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003bb2:	6128      	str	r0, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003bb4:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003bb6:	d033      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003bb8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003bbc:	6810      	ldr	r0, [r2, #0]
    if (depctl.b.epena)
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	bfac      	ite	ge
 8003bc2:	2000      	movge	r0, #0
 8003bc4:	f04f 4090 	movlt.w	r0, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003bc8:	6010      	str	r0, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003bca:	2500      	movs	r5, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003bcc:	20ff      	movs	r0, #255	; 0xff
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003bce:	2b0c      	cmp	r3, #12
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003bd0:	6115      	str	r5, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003bd2:	6090      	str	r0, [r2, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003bd4:	d024      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003bd6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003bda:	6816      	ldr	r6, [r2, #0]
    if (depctl.b.epena)
 8003bdc:	42ae      	cmp	r6, r5
 8003bde:	bfac      	ite	ge
 8003be0:	462e      	movge	r6, r5
 8003be2:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003be6:	2b0d      	cmp	r3, #13
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003be8:	6016      	str	r6, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003bea:	6115      	str	r5, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003bec:	6090      	str	r0, [r2, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003bee:	d017      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003bf0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bf4:	6816      	ldr	r6, [r2, #0]
    if (depctl.b.epena)
 8003bf6:	42ae      	cmp	r6, r5
 8003bf8:	bfac      	ite	ge
 8003bfa:	462e      	movge	r6, r5
 8003bfc:	f04f 4690 	movlt.w	r6, #1207959552	; 0x48000000
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003c00:	2b0e      	cmp	r3, #14
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003c02:	6016      	str	r6, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003c04:	6115      	str	r5, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003c06:	6090      	str	r0, [r2, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003c08:	d00a      	beq.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003c0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c0e:	681a      	ldr	r2, [r3, #0]
    if (depctl.b.epena)
 8003c10:	42aa      	cmp	r2, r5
 8003c12:	bfac      	ite	ge
 8003c14:	462a      	movge	r2, r5
 8003c16:	f04f 4290 	movlt.w	r2, #1207959552	; 0x48000000
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003c1a:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003c1c:	611d      	str	r5, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003c1e:	6098      	str	r0, [r3, #8]
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8003c20:	690b      	ldr	r3, [r1, #16]
 8003c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c26:	610b      	str	r3, [r1, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8003c28:	78e0      	ldrb	r0, [r4, #3]
 8003c2a:	2801      	cmp	r0, #1
 8003c2c:	d024      	beq.n	8003c78 <USB_OTG_CoreInitDev+0x430>
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003c2e:	6922      	ldr	r2, [r4, #16]
  intmsk.d32 = 0;
 8003c30:	2300      	movs	r3, #0
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c32:	f04f 31ff 	mov.w	r1, #4294967295
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
  
  if (pdev->cfg.dma_enable == 0)
  {
    intmsk.b.rxstsqlvl = 1;
 8003c36:	4298      	cmp	r0, r3
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8003c38:	4834      	ldr	r0, [pc, #208]	; (8003d0c <USB_OTG_CoreInitDev+0x4c4>)
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003c3a:	6193      	str	r3, [r2, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c3c:	6151      	str	r1, [r2, #20]
    intmsk.b.rxstsqlvl = 1;
 8003c3e:	bf08      	it	eq
 8003c40:	2310      	moveq	r3, #16
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8003c42:	6051      	str	r1, [r2, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c44:	6151      	str	r1, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8003c46:	6190      	str	r0, [r2, #24]
  intmsk.b.wkupintr =1;

//  if(pdev->cfg.Sof_output !=0U)
    intmsk.b.sofintr    = 1;

  if(pdev->cfg.vbus_sensing_enable == 1U)
 8003c48:	7ae1      	ldrb	r1, [r4, #11]
    intmsk.b.sofintr    = 1;
 8003c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c4e:	f443 2343 	orr.w	r3, r3, #798720	; 0xc3000
 8003c52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  if(pdev->cfg.vbus_sensing_enable == 1U)
 8003c56:	2901      	cmp	r1, #1
    intmsk.b.sofintr    = 1;
 8003c58:	f043 0308 	orr.w	r3, r3, #8
  if(pdev->cfg.vbus_sensing_enable == 1U)
 8003c5c:	d103      	bne.n	8003c66 <USB_OTG_CoreInitDev+0x41e>
  {
    intmsk.b.sessreqintr    = 1;
    intmsk.b.otgintr    = 1;
 8003c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c62:	f043 0304 	orr.w	r3, r3, #4
  }

  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8003c66:	6991      	ldr	r1, [r2, #24]
}
 8003c68:	2000      	movs	r0, #0
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6193      	str	r3, [r2, #24]
}
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
        gccfg.b.vbussensingB=1;
 8003c72:	2301      	movs	r3, #1
        gccfg.b.disablevbussensing =0;
 8003c74:	2500      	movs	r5, #0
 8003c76:	e5f6      	b.n	8003866 <USB_OTG_CoreInitDev+0x1e>
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003c78:	6922      	ldr	r2, [r4, #16]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <USB_OTG_CoreInitDev+0x4c8>)
 8003c7c:	630b      	str	r3, [r1, #48]	; 0x30
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8003c82:	4922      	ldr	r1, [pc, #136]	; (8003d0c <USB_OTG_CoreInitDev+0x4c4>)
  intmsk.d32 = 0;
 8003c84:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003c86:	6193      	str	r3, [r2, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c88:	6150      	str	r0, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8003c8a:	6050      	str	r0, [r2, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8003c8c:	6150      	str	r0, [r2, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8003c8e:	6191      	str	r1, [r2, #24]
  if (pdev->cfg.dma_enable == 0)
 8003c90:	e7da      	b.n	8003c48 <USB_OTG_CoreInitDev+0x400>
    if(pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003c92:	7a25      	ldrb	r5, [r4, #8]
 8003c94:	2d01      	cmp	r5, #1
 8003c96:	d028      	beq.n	8003cea <USB_OTG_CoreInitDev+0x4a2>
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8003c98:	6810      	ldr	r0, [r2, #0]
  dcfg.b.devspd = speed;
 8003c9a:	f363 0001 	bfi	r0, r3, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8003c9e:	6010      	str	r0, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <USB_OTG_CoreInitDev+0x4cc>)
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8003ca2:	481d      	ldr	r0, [pc, #116]	; (8003d18 <USB_OTG_CoreInitDev+0x4d0>)
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8003ca4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003ca8:	624d      	str	r5, [r1, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8003caa:	628a      	str	r2, [r1, #40]	; 0x28
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8003cac:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8003cb0:	321f      	adds	r2, #31
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8003cb2:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8003cb6:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8003cba:	f5a2 127f 	sub.w	r2, r2, #4177920	; 0x3fc000
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[3], txfifosize.d32 );
 8003cbe:	f241 333f 	movw	r3, #4927	; 0x133f
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8003cc2:	f5a2 527e 	sub.w	r2, r2, #16256	; 0x3f80
 8003cc6:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[3], txfifosize.d32 );
 8003cca:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
 8003cce:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 8003cd2:	e5e1      	b.n	8003898 <USB_OTG_CoreInitDev+0x50>
    if (depctl.b.epena)
 8003cd4:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003cd6:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	612a      	str	r2, [r5, #16]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003cdc:	2b01      	cmp	r3, #1
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003cde:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8003ce2:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003ce4:	f47f aeea 	bne.w	8003abc <USB_OTG_CoreInitDev+0x274>
 8003ce8:	e79a      	b.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8003cea:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devspd = speed;
 8003cec:	f360 0301 	bfi	r3, r0, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	e7d5      	b.n	8003ca0 <USB_OTG_CoreInitDev+0x458>
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003cf4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003cf6:	682e      	ldr	r6, [r5, #0]
    if (depctl.b.epena)
 8003cf8:	2e00      	cmp	r6, #0
 8003cfa:	da02      	bge.n	8003d02 <USB_OTG_CoreInitDev+0x4ba>
 8003cfc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003d00:	e7e9      	b.n	8003cd6 <USB_OTG_CoreInitDev+0x48e>
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003d02:	602a      	str	r2, [r5, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003d04:	612a      	str	r2, [r5, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003d06:	60a8      	str	r0, [r5, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003d08:	e78a      	b.n	8003c20 <USB_OTG_CoreInitDev+0x3d8>
 8003d0a:	bf00      	nop
 8003d0c:	80000800 	.word	0x80000800
 8003d10:	00810103 	.word	0x00810103
 8003d14:	00800200 	.word	0x00800200
 8003d18:	0fff0280 	.word	0x0fff0280

08003d1c <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003d1c:	6943      	ldr	r3, [r0, #20]
 8003d1e:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 8003d20:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8003d24:	2802      	cmp	r0, #2
 8003d26:	bf1d      	ittte	ne
 8003d28:	f020 0002 	bicne.w	r0, r0, #2
 8003d2c:	f1c0 0003 	rsbne	r0, r0, #3
 8003d30:	b2c0      	uxtbne	r0, r0
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
    break;
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8003d32:	2001      	moveq	r0, #1
    break;
  }
  
  return speed;
}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003d38:	6943      	ldr	r3, [r0, #20]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8003d3a:	69c1      	ldr	r1, [r0, #28]
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003d3c:	689a      	ldr	r2, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8003d3e:	6808      	ldr	r0, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8003d40:	f3c2 0241 	ubfx	r2, r2, #1, #2
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
    break;
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8003d44:	2a02      	cmp	r2, #2
 8003d46:	bf14      	ite	ne
 8003d48:	2200      	movne	r2, #0
 8003d4a:	2203      	moveq	r2, #3
 8003d4c:	f362 000a 	bfi	r0, r2, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8003d50:	6008      	str	r0, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  return status;
}
 8003d58:	2000      	movs	r0, #0
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8003d5a:	605a      	str	r2, [r3, #4]
}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop

08003d60 <USB_OTG_EPActivate>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003d60:	b430      	push	{r4, r5}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8003d62:	784b      	ldrb	r3, [r1, #1]
 8003d64:	2b01      	cmp	r3, #1
  daintmsk.d32 = 0;
 8003d66:	f04f 0200 	mov.w	r2, #0
  if (ep->is_in == 1)
 8003d6a:	d028      	beq.n	8003dbe <USB_OTG_EPActivate+0x5e>
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8003d6c:	780d      	ldrb	r5, [r1, #0]
 8003d6e:	f105 0316 	add.w	r3, r5, #22
 8003d72:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    daintmsk.ep.out = 1 << ep->num;
 8003d76:	2301      	movs	r3, #1
 8003d78:	40ab      	lsls	r3, r5
 8003d7a:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8003d7e:	6825      	ldr	r5, [r4, #0]
  if (!depctl.b.usbactep)
 8003d80:	042b      	lsls	r3, r5, #16
 8003d82:	d415      	bmi.n	8003db0 <USB_OTG_EPActivate+0x50>
  {
    depctl.b.mps    = ep->maxpacket;
 8003d84:	688b      	ldr	r3, [r1, #8]
 8003d86:	f891 c003 	ldrb.w	ip, [r1, #3]
 8003d8a:	88c9      	ldrh	r1, [r1, #6]
 8003d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	f00c 0c03 	and.w	ip, ip, #3
 8003d9c:	f001 010f 	and.w	r1, r1, #15
 8003da0:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
 8003da4:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
 8003da8:	4909      	ldr	r1, [pc, #36]	; (8003dd0 <USB_OTG_EPActivate+0x70>)
 8003daa:	4029      	ands	r1, r5
 8003dac:	430b      	orrs	r3, r1
    depctl.b.eptype = ep->type;
    depctl.b.txfnum = ep->tx_fifo_num;
    depctl.b.setd0pid = 1;
    depctl.b.usbactep = 1;
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8003dae:	6023      	str	r3, [r4, #0]
  }
  /* Enable the Interrupt for this EP */

    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8003db0:	6943      	ldr	r3, [r0, #20]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	430a      	orrs	r2, r1
  return status;
}
 8003db6:	2000      	movs	r0, #0
 8003db8:	bc30      	pop	{r4, r5}
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8003dba:	61da      	str	r2, [r3, #28]
}
 8003dbc:	4770      	bx	lr
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003dbe:	780c      	ldrb	r4, [r1, #0]
    daintmsk.ep.in = 1 << ep->num;
 8003dc0:	40a3      	lsls	r3, r4
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003dc2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 8003dc6:	f363 020f 	bfi	r2, r3, #0, #16
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003dca:	69e4      	ldr	r4, [r4, #28]
    daintmsk.ep.in = 1 << ep->num;
 8003dcc:	e7d7      	b.n	8003d7e <USB_OTG_EPActivate+0x1e>
 8003dce:	bf00      	nop
 8003dd0:	ec337800 	.word	0xec337800

08003dd4 <USB_OTG_EPDeactivate>:
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8003dd4:	784b      	ldrb	r3, [r1, #1]
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003dd6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1)
 8003dd8:	2b01      	cmp	r3, #1
  daintmsk.d32 = 0;  
 8003dda:	f04f 0c00 	mov.w	ip, #0
  if (ep->is_in == 1)
 8003dde:	d00f      	beq.n	8003e00 <USB_OTG_EPDeactivate+0x2c>
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8003de0:	f102 0116 	add.w	r1, r2, #22
    daintmsk.ep.out = 1 << ep->num;
 8003de4:	2301      	movs	r3, #1
 8003de6:	4093      	lsls	r3, r2
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8003de8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    daintmsk.ep.out = 1 << ep->num;
 8003dec:	f363 4c1f 	bfi	ip, r3, #16, #16
  depctl.b.usbactep = 0;
  USB_OTG_WRITE_REG32(addr, depctl.d32);
  /* Disable the Interrupt for this EP */
  

    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8003df0:	6942      	ldr	r2, [r0, #20]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8003df2:	2000      	movs	r0, #0
 8003df4:	6008      	str	r0, [r1, #0]
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8003df6:	69d3      	ldr	r3, [r2, #28]
 8003df8:	ea23 030c 	bic.w	r3, r3, ip
 8003dfc:	61d3      	str	r3, [r2, #28]
  return status;
}
 8003dfe:	4770      	bx	lr
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003e00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 8003e04:	4093      	lsls	r3, r2
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8003e06:	69c9      	ldr	r1, [r1, #28]
    daintmsk.ep.in = 1 << ep->num;
 8003e08:	f363 0c0f 	bfi	ip, r3, #0, #16
 8003e0c:	e7f0      	b.n	8003df0 <USB_OTG_EPDeactivate+0x1c>
 8003e0e:	bf00      	nop

08003e10 <USB_OTG_EPStartXfer>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8003e14:	784b      	ldrb	r3, [r1, #1]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d030      	beq.n	8003e7c <USB_OTG_EPStartXfer+0x6c>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8003e1a:	780b      	ldrb	r3, [r1, #0]
 8003e1c:	3316      	adds	r3, #22
 8003e1e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8003e22:	694b      	ldr	r3, [r1, #20]
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8003e24:	6822      	ldr	r2, [r4, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8003e26:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8003e28:	b31b      	cbz	r3, 8003e72 <USB_OTG_EPStartXfer+0x62>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8003e2a:	688e      	ldr	r6, [r1, #8]
 8003e2c:	4433      	add	r3, r6
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	fbb3 f3f6 	udiv	r3, r3, r6
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8003e34:	f3c3 0c09 	ubfx	ip, r3, #0, #10
 8003e38:	fb06 fc0c 	mul.w	ip, r6, ip
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8003e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8003e40:	f3cc 0c12 	ubfx	ip, ip, #0, #19
 8003e44:	ea4c 4cc3 	orr.w	ip, ip, r3, lsl #19
 8003e48:	f36c 051c 	bfi	r5, ip, #0, #29
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003e4c:	6125      	str	r5, [r4, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8003e4e:	78c3      	ldrb	r3, [r0, #3]
 8003e50:	2b01      	cmp	r3, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8003e52:	bf04      	itt	eq
 8003e54:	690b      	ldreq	r3, [r1, #16]
 8003e56:	6163      	streq	r3, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003e58:	78cb      	ldrb	r3, [r1, #3]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d045      	beq.n	8003eea <USB_OTG_EPStartXfer+0xda>
      {
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003e5e:	f3c2 6307 	ubfx	r3, r2, #24, #8
 8003e62:	f063 037b 	orn	r3, r3, #123	; 0x7b
 8003e66:	f363 621f 	bfi	r2, r3, #24, #8
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8003e6a:	6022      	str	r2, [r4, #0]
  }
  return status;
}
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      deptsiz.b.xfersize = ep->maxpacket;
 8003e72:	688b      	ldr	r3, [r1, #8]
 8003e74:	f3c3 0c12 	ubfx	ip, r3, #0, #19
      deptsiz.b.pktcnt = 1;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e7e3      	b.n	8003e44 <USB_OTG_EPStartXfer+0x34>
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8003e7c:	f891 e000 	ldrb.w	lr, [r1]
    if (ep->xfer_len == 0)
 8003e80:	694e      	ldr	r6, [r1, #20]
 8003e82:	eb00 0c8e 	add.w	ip, r0, lr, lsl #2
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8003e86:	f8dc 701c 	ldr.w	r7, [ip, #28]
 8003e8a:	683a      	ldr	r2, [r7, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8003e8c:	693c      	ldr	r4, [r7, #16]
    if (ep->xfer_len == 0)
 8003e8e:	b38e      	cbz	r6, 8003ef4 <USB_OTG_EPStartXfer+0xe4>
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8003e90:	f8d1 9008 	ldr.w	r9, [r1, #8]
      deptsiz.b.xfersize = ep->xfer_len;
 8003e94:	f004 4560 	and.w	r5, r4, #3758096384	; 0xe0000000
 8003e98:	4c35      	ldr	r4, [pc, #212]	; (8003f70 <USB_OTG_EPStartXfer+0x160>)
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8003e9a:	eb06 0809 	add.w	r8, r6, r9
 8003e9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ea2:	fbb8 f8f9 	udiv	r8, r8, r9
      deptsiz.b.xfersize = ep->xfer_len;
 8003ea6:	ea04 44c8 	and.w	r4, r4, r8, lsl #19
 8003eaa:	f3c6 0812 	ubfx	r8, r6, #0, #19
 8003eae:	ea44 0408 	orr.w	r4, r4, r8
      if (ep->type == EP_TYPE_ISOC)
 8003eb2:	f891 8003 	ldrb.w	r8, [r1, #3]
      deptsiz.b.xfersize = ep->xfer_len;
 8003eb6:	432c      	orrs	r4, r5
      if (ep->type == EP_TYPE_ISOC)
 8003eb8:	f1b8 0f01 	cmp.w	r8, #1
      deptsiz.b.xfersize = ep->xfer_len;
 8003ebc:	4625      	mov	r5, r4
      if (ep->type == EP_TYPE_ISOC)
 8003ebe:	d046      	beq.n	8003f4e <USB_OTG_EPStartXfer+0x13e>
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8003ec0:	613c      	str	r4, [r7, #16]
    if (pdev->cfg.dma_enable == 1)
 8003ec2:	78c4      	ldrb	r4, [r0, #3]
 8003ec4:	2c01      	cmp	r4, #1
 8003ec6:	d050      	beq.n	8003f6a <USB_OTG_EPStartXfer+0x15a>
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8003ec8:	6941      	ldr	r1, [r0, #20]
          fifoemptymsk = 1 << ep->num;
 8003eca:	fa03 fe0e 	lsl.w	lr, r3, lr
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8003ece:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003ed0:	ea4e 0303 	orr.w	r3, lr, r3
 8003ed4:	634b      	str	r3, [r1, #52]	; 0x34
    depctl.b.cnak = 1;
 8003ed6:	f3c2 6307 	ubfx	r3, r2, #24, #8
 8003eda:	f063 037b 	orn	r3, r3, #123	; 0x7b
 8003ede:	f363 621f 	bfi	r2, r3, #24, #8
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8003ee2:	603a      	str	r2, [r7, #0]
}
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->even_odd_frame)
 8003eea:	794b      	ldrb	r3, [r1, #5]
 8003eec:	b363      	cbz	r3, 8003f48 <USB_OTG_EPStartXfer+0x138>
        depctl.b.setd1pid = 1;
 8003eee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ef2:	e7b4      	b.n	8003e5e <USB_OTG_EPStartXfer+0x4e>
      deptsiz.b.xfersize = 0;
 8003ef4:	f004 4460 	and.w	r4, r4, #3758096384	; 0xe0000000
 8003ef8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
      if (ep->type == EP_TYPE_ISOC)
 8003efc:	78cd      	ldrb	r5, [r1, #3]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8003efe:	613c      	str	r4, [r7, #16]
    if (pdev->cfg.dma_enable == 1)
 8003f00:	78c3      	ldrb	r3, [r0, #3]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d02c      	beq.n	8003f60 <USB_OTG_EPStartXfer+0x150>
      if (ep->type != EP_TYPE_ISOC)
 8003f06:	2d01      	cmp	r5, #1
 8003f08:	d1e5      	bne.n	8003ed6 <USB_OTG_EPStartXfer+0xc6>
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003f0a:	6940      	ldr	r0, [r0, #20]
 8003f0c:	6880      	ldr	r0, [r0, #8]
      if (((dsts.b.soffn)&0x1) == 0)
 8003f0e:	05c0      	lsls	r0, r0, #23
        depctl.b.setd1pid = 1;
 8003f10:	bf54      	ite	pl
 8003f12:	f042 5200 	orrpl.w	r2, r2, #536870912	; 0x20000000
        depctl.b.setd0pid = 1;
 8003f16:	f042 5280 	orrmi.w	r2, r2, #268435456	; 0x10000000
    depctl.b.cnak = 1;
 8003f1a:	f3c2 6007 	ubfx	r0, r2, #24, #8
 8003f1e:	f060 007b 	orn	r0, r0, #123	; 0x7b
 8003f22:	f360 621f 	bfi	r2, r0, #24, #8
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8003f26:	603a      	str	r2, [r7, #0]
  if (pdev->cfg.dma_enable == 0)
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d19f      	bne.n	8003e6c <USB_OTG_EPStartXfer+0x5c>
    count32b =  (len + 3) / 4;
 8003f2c:	b2b0      	uxth	r0, r6
 8003f2e:	3003      	adds	r0, #3
    for (i = 0; i < count32b; i++, src+=4)
 8003f30:	1080      	asrs	r0, r0, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8003f32:	f8dc 40d4 	ldr.w	r4, [ip, #212]	; 0xd4
    for (i = 0; i < count32b; i++, src+=4)
 8003f36:	d099      	beq.n	8003e6c <USB_OTG_EPStartXfer+0x5c>
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8003f38:	68ca      	ldr	r2, [r1, #12]
	USB_OTG_WRITE_REG32( fifo, *((uint32_t *)src) );
 8003f3a:	f852 1b04 	ldr.w	r1, [r2], #4
 8003f3e:	6021      	str	r1, [r4, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8003f40:	3301      	adds	r3, #1
 8003f42:	4298      	cmp	r0, r3
 8003f44:	d1f9      	bne.n	8003f3a <USB_OTG_EPStartXfer+0x12a>
 8003f46:	e791      	b.n	8003e6c <USB_OTG_EPStartXfer+0x5c>
        depctl.b.setd0pid = 1;
 8003f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f4c:	e787      	b.n	8003e5e <USB_OTG_EPStartXfer+0x4e>
        deptsiz.b.mc = 1;
 8003f4e:	f368 755e 	bfi	r5, r8, #29, #2
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8003f52:	613d      	str	r5, [r7, #16]
    if (pdev->cfg.dma_enable == 1)
 8003f54:	78c3      	ldrb	r3, [r0, #3]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d1d7      	bne.n	8003f0a <USB_OTG_EPStartXfer+0xfa>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8003f5a:	690c      	ldr	r4, [r1, #16]
 8003f5c:	617c      	str	r4, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003f5e:	e7d4      	b.n	8003f0a <USB_OTG_EPStartXfer+0xfa>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8003f60:	690c      	ldr	r4, [r1, #16]
 8003f62:	617c      	str	r4, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003f64:	2d01      	cmp	r5, #1
 8003f66:	d1b6      	bne.n	8003ed6 <USB_OTG_EPStartXfer+0xc6>
 8003f68:	e7cf      	b.n	8003f0a <USB_OTG_EPStartXfer+0xfa>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8003f6a:	690b      	ldr	r3, [r1, #16]
 8003f6c:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003f6e:	e7b2      	b.n	8003ed6 <USB_OTG_EPStartXfer+0xc6>
 8003f70:	1ff80000 	.word	0x1ff80000

08003f74 <USB_OTG_EP0StartXfer>:


//--------------------------------------------------------------
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003f74:	b430      	push	{r4, r5}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8003f76:	784b      	ldrb	r3, [r1, #1]
 8003f78:	2b01      	cmp	r3, #1
{
 8003f7a:	b082      	sub	sp, #8
  if (ep->is_in == 1)
 8003f7c:	d026      	beq.n	8003fcc <USB_OTG_EP0StartXfer+0x58>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003f7e:	780b      	ldrb	r3, [r1, #0]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8003f80:	688a      	ldr	r2, [r1, #8]
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003f82:	3316      	adds	r3, #22
 8003f84:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003f88:	682c      	ldr	r4, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8003f8a:	692b      	ldr	r3, [r5, #16]
 8003f8c:	9300      	str	r3, [sp, #0]
    if (ep->xfer_len == 0)
 8003f8e:	694b      	ldr	r3, [r1, #20]
 8003f90:	b9d3      	cbnz	r3, 8003fc8 <USB_OTG_EP0StartXfer+0x54>
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 8003f92:	9b00      	ldr	r3, [sp, #0]
 8003f94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      deptsiz.b.pktcnt = 1;
 8003f98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fa4:	4313      	orrs	r3, r2
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003fa6:	612b      	str	r3, [r5, #16]
    if (pdev->cfg.dma_enable == 1)
 8003fa8:	78c3      	ldrb	r3, [r0, #3]
 8003faa:	2b01      	cmp	r3, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8003fac:	bf04      	itt	eq
 8003fae:	690b      	ldreq	r3, [r1, #16]
 8003fb0:	616b      	streq	r3, [r5, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003fb2:	f3c4 6307 	ubfx	r3, r4, #24, #8
 8003fb6:	f063 037b 	orn	r3, r3, #123	; 0x7b
 8003fba:	f363 641f 	bfi	r4, r3, #24, #8
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8003fbe:	602c      	str	r4, [r5, #0]
    
  }
  return status;
}
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bc30      	pop	{r4, r5}
 8003fc6:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8003fc8:	614a      	str	r2, [r1, #20]
 8003fca:	e7e2      	b.n	8003f92 <USB_OTG_EP0StartXfer+0x1e>
    in_regs = pdev->regs.INEP_REGS[0];
 8003fcc:	69c5      	ldr	r5, [r0, #28]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8003fce:	682c      	ldr	r4, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8003fd0:	692b      	ldr	r3, [r5, #16]
 8003fd2:	9300      	str	r3, [sp, #0]
    if (ep->xfer_len == 0)
 8003fd4:	694b      	ldr	r3, [r1, #20]
 8003fd6:	bb03      	cbnz	r3, 800401a <USB_OTG_EP0StartXfer+0xa6>
      deptsiz.b.xfersize = 0;
 8003fd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fdc:	9b00      	ldr	r3, [sp, #0]
 8003fde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fe6:	4313      	orrs	r3, r2
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8003fe8:	612b      	str	r3, [r5, #16]
      deptsiz.b.xfersize = 0;
 8003fea:	9300      	str	r3, [sp, #0]
    if (pdev->cfg.dma_enable == 1)
 8003fec:	78c3      	ldrb	r3, [r0, #3]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d01c      	beq.n	800402c <USB_OTG_EP0StartXfer+0xb8>
    depctl.b.cnak = 1;
 8003ff2:	f3c4 6207 	ubfx	r2, r4, #24, #8
 8003ff6:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8003ffa:	f362 641f 	bfi	r4, r2, #24, #8
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8003ffe:	602c      	str	r4, [r5, #0]
    if (pdev->cfg.dma_enable == 0)
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1dd      	bne.n	8003fc0 <USB_OTG_EP0StartXfer+0x4c>
      if (ep->xfer_len > 0)
 8004004:	694b      	ldr	r3, [r1, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0da      	beq.n	8003fc0 <USB_OTG_EP0StartXfer+0x4c>
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800400a:	6942      	ldr	r2, [r0, #20]
          fifoemptymsk |= 1 << ep->num;
 800400c:	7808      	ldrb	r0, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800400e:	6b51      	ldr	r1, [r2, #52]	; 0x34
          fifoemptymsk |= 1 << ep->num;
 8004010:	2301      	movs	r3, #1
 8004012:	4083      	lsls	r3, r0
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8004014:	430b      	orrs	r3, r1
 8004016:	6353      	str	r3, [r2, #52]	; 0x34
 8004018:	e7d2      	b.n	8003fc0 <USB_OTG_EP0StartXfer+0x4c>
      if (ep->xfer_len > ep->maxpacket)
 800401a:	688a      	ldr	r2, [r1, #8]
 800401c:	4293      	cmp	r3, r2
        ep->xfer_len = ep->maxpacket;
 800401e:	bf86      	itte	hi
 8004020:	614a      	strhi	r2, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 8004022:	f002 037f 	andhi.w	r3, r2, #127	; 0x7f
        deptsiz.b.xfersize = ep->xfer_len;
 8004026:	f003 037f 	andls.w	r3, r3, #127	; 0x7f
      deptsiz.b.pktcnt = 1;
 800402a:	e7d5      	b.n	8003fd8 <USB_OTG_EP0StartXfer+0x64>
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800402c:	780a      	ldrb	r2, [r1, #0]
 800402e:	6909      	ldr	r1, [r1, #16]
 8004030:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    depctl.b.cnak = 1;
 8004034:	f3c4 6307 	ubfx	r3, r4, #24, #8
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8004038:	69d2      	ldr	r2, [r2, #28]
    depctl.b.cnak = 1;
 800403a:	f063 037b 	orn	r3, r3, #123	; 0x7b
 800403e:	f363 641f 	bfi	r4, r3, #24, #8
}
 8004042:	2000      	movs	r0, #0
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8004044:	6151      	str	r1, [r2, #20]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8004046:	602c      	str	r4, [r5, #0]
}
 8004048:	b002      	add	sp, #8
 800404a:	bc30      	pop	{r4, r5}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop

08004050 <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8004050:	784b      	ldrb	r3, [r1, #1]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d009      	beq.n	800406a <USB_OTG_EPSetStall+0x1a>
    depctl.b.stall = 1;
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8004056:	780b      	ldrb	r3, [r1, #0]
 8004058:	3316      	adds	r3, #22
 800405a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800405e:	6813      	ldr	r3, [r2, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8004060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8004064:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8004066:	2000      	movs	r0, #0
 8004068:	4770      	bx	lr
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800406a:	780a      	ldrb	r2, [r1, #0]
    depctl.b.stall = 1;
 800406c:	4909      	ldr	r1, [pc, #36]	; (8004094 <USB_OTG_EPSetStall+0x44>)
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800406e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004072:	69c0      	ldr	r0, [r0, #28]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8004074:	6802      	ldr	r2, [r0, #0]
    if (depctl.b.epena)
 8004076:	2a00      	cmp	r2, #0
      depctl.b.epdis = 1;
 8004078:	bfa8      	it	ge
 800407a:	f3c2 7380 	ubfxge	r3, r2, #30, #1
    depctl.b.stall = 1;
 800407e:	039b      	lsls	r3, r3, #14
 8004080:	ea01 4112 	and.w	r1, r1, r2, lsr #16
 8004084:	f043 0320 	orr.w	r3, r3, #32
 8004088:	430b      	orrs	r3, r1
 800408a:	f363 421f 	bfi	r2, r3, #16, #16
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800408e:	6002      	str	r2, [r0, #0]
}
 8004090:	2000      	movs	r0, #0
 8004092:	4770      	bx	lr
 8004094:	ffffbfdf 	.word	0xffffbfdf

08004098 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 8004098:	784b      	ldrb	r3, [r1, #1]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800409a:	78ca      	ldrb	r2, [r1, #3]
  if (ep->is_in == 1)
 800409c:	2b01      	cmp	r3, #1
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800409e:	780b      	ldrb	r3, [r1, #0]
 80040a0:	bf0b      	itete	eq
 80040a2:	eb00 0083 	addeq.w	r0, r0, r3, lsl #2
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80040a6:	3316      	addne	r3, #22
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80040a8:	69c0      	ldreq	r0, [r0, #28]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80040aa:	f850 0023 	ldrne.w	r0, [r0, r3, lsl #2]
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80040ae:	6803      	ldr	r3, [r0, #0]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80040b0:	3a02      	subs	r2, #2
 80040b2:	2a01      	cmp	r2, #1
  depctl.b.stall = 0;
 80040b4:	f36f 5355 	bfc	r3, #21, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 80040b8:	bf8c      	ite	hi
 80040ba:	f3c3 7200 	ubfxhi	r2, r3, #28, #1
 80040be:	2201      	movls	r2, #1
 80040c0:	f362 731c 	bfi	r3, r2, #28, #1
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80040c4:	6003      	str	r3, [r0, #0]
  return status;
}
 80040c6:	2000      	movs	r0, #0
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <USB_OTG_ReadDevAllOutEp_itr>:

//--------------------------------------------------------------
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  USB_OTG_DREGS *local_pdev_dregs = pdev->regs.DREGS;
 80040cc:	6943      	ldr	r3, [r0, #20]
  v  = USB_OTG_READ_REG32(&local_pdev_dregs->DAINT);
 80040ce:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&local_pdev_dregs->DAINTMSK);
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4018      	ands	r0, r3
  return ((v & 0xffff0000) >> 16);
}
 80040d4:	0c00      	lsrs	r0, r0, #16
 80040d6:	4770      	bx	lr

080040d8 <USB_OTG_ReadDevOutEP_itr>:
//--------------------------------------------------------------
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  USB_OTG_CORE_REGS *local_pdev = &pdev->regs;
  v  = USB_OTG_READ_REG32(&local_pdev->OUTEP_REGS[epnum]->DOEPINT);
 80040d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&local_pdev->DREGS->DOEPMSK);
 80040dc:	6943      	ldr	r3, [r0, #20]
  v  = USB_OTG_READ_REG32(&local_pdev->OUTEP_REGS[epnum]->DOEPINT);
 80040de:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80040e0:	6890      	ldr	r0, [r2, #8]
  v &= USB_OTG_READ_REG32(&local_pdev->DREGS->DOEPMSK);
 80040e2:	695b      	ldr	r3, [r3, #20]
  return v;
}
 80040e4:	4018      	ands	r0, r3
 80040e6:	4770      	bx	lr

080040e8 <USB_OTG_ReadDevAllInEPItr>:

//--------------------------------------------------------------
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  USB_OTG_DREGS *local_pdev_dregs = pdev->regs.DREGS;
 80040e8:	6943      	ldr	r3, [r0, #20]
  v = USB_OTG_READ_REG32(&local_pdev_dregs->DAINT);
 80040ea:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&local_pdev_dregs->DAINTMSK);
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4018      	ands	r0, r3
  return (v & 0xffff);
}
 80040f0:	b280      	uxth	r0, r0
 80040f2:	4770      	bx	lr

080040f4 <USB_OTG_EP0_OutStart>:
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
  doeptsize0.b.xfersize = 8 * 3;
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 80040f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <USB_OTG_EP0_OutStart+0x1c>)
 80040f8:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80040fa:	78c2      	ldrb	r2, [r0, #3]
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	d106      	bne.n	800410e <USB_OTG_EP0_OutStart+0x1a>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8004100:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 8004104:	6158      	str	r0, [r3, #20]
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8004106:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 800410a:	6819      	ldr	r1, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800410c:	601a      	str	r2, [r3, #0]
  }
}
 800410e:	4770      	bx	lr
 8004110:	c0080018 	.word	0xc0080018

08004114 <USB_OTG_Start>:
}

USB_OTG_STS USB_OTG_Start(USB_OTG_CORE_HANDLE *pdev)
{

  if ((pdev->cfg.battery_charging_enable == 1U) &&
 8004114:	7b03      	ldrb	r3, [r0, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d011      	beq.n	800413e <USB_OTG_Start+0x2a>
      (pdev->cfg.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
      pdev->regs.GREGS->GCCFG |= USB_OTG_GCCFG_PWRDWN;						//pwrdwn
 800411a:	6902      	ldr	r2, [r0, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 800411c:	6893      	ldr	r3, [r2, #8]
  *(pdev->regs.PCGCCTL)  &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800411e:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6093      	str	r3, [r2, #8]
  *(pdev->regs.PCGCCTL)  &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004128:	680b      	ldr	r3, [r1, #0]
  pdev->regs.DREGS->DCTL &= ~USB_OTG_DCTL_SDIS;
 800412a:	6942      	ldr	r2, [r0, #20]
  *(pdev->regs.PCGCCTL)  &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800412c:	f023 0303 	bic.w	r3, r3, #3
 8004130:	600b      	str	r3, [r1, #0]
  pdev->regs.DREGS->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004132:	6853      	ldr	r3, [r2, #4]
 8004134:	f023 0302 	bic.w	r3, r3, #2

  USB_OTG_EnableGlobalInt(pdev);
  USB_OTG_DevConnect(pdev);

  return USB_OTG_OK;
}
 8004138:	2000      	movs	r0, #0
  pdev->regs.DREGS->DCTL &= ~USB_OTG_DCTL_SDIS;
 800413a:	6053      	str	r3, [r2, #4]
}
 800413c:	4770      	bx	lr
  if ((pdev->cfg.battery_charging_enable == 1U) &&
 800413e:	7a03      	ldrb	r3, [r0, #8]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d0ea      	beq.n	800411a <USB_OTG_Start+0x6>
      pdev->regs.GREGS->GCCFG |= USB_OTG_GCCFG_PWRDWN;						//pwrdwn
 8004144:	6902      	ldr	r2, [r0, #16]
 8004146:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6393      	str	r3, [r2, #56]	; 0x38
 800414e:	e7e5      	b.n	800411c <USB_OTG_Start+0x8>

08004150 <DCD_Init>:
#include "usb_bsp.h"

//--------------------------------------------------------------
void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8004154:	f7ff f896 	bl	8003284 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004158:	7862      	ldrb	r2, [r4, #1]
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800415a:	2001      	movs	r0, #1
 800415c:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004160:	2a00      	cmp	r2, #0
 8004162:	f000 81d0 	beq.w	8004506 <DCD_Init+0x3b6>
  {
    ep = &pdev->dev.in_ep[i];
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
 8004166:	f44f 7180 	mov.w	r1, #256	; 0x100
    ep->tx_fifo_num = i;
 800416a:	2300      	movs	r3, #0
    ep->num = i;
 800416c:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004170:	4282      	cmp	r2, r0
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8004172:	f04f 0140 	mov.w	r1, #64	; 0x40
    ep->xfer_buff = 0;
 8004176:	e9c4 1349 	strd	r1, r3, [r4, #292]	; 0x124
    ep->tx_fifo_num = i;
 800417a:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
    ep->type = EP_TYPE_CTRL;
 800417e:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    ep->xfer_len = 0;
 8004182:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004186:	f000 81d0 	beq.w	800452a <DCD_Init+0x3da>
    ep->tx_fifo_num = i;
 800418a:	f8a4 014a 	strh.w	r0, [r4, #330]	; 0x14a
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800418e:	2a02      	cmp	r2, #2
    ep->num = i;
 8004190:	f240 1001 	movw	r0, #257	; 0x101
    ep->xfer_buff = 0;
 8004194:	e9c4 1353 	strd	r1, r3, [r4, #332]	; 0x14c
    ep->type = EP_TYPE_CTRL;
 8004198:	f884 3147 	strb.w	r3, [r4, #327]	; 0x147
    ep->xfer_len = 0;
 800419c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    ep->num = i;
 80041a0:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041a4:	f000 80d2 	beq.w	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80041a8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80041ac:	f8a4 016c 	strh.w	r0, [r4, #364]	; 0x16c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041b0:	2a03      	cmp	r2, #3
    ep->tx_fifo_num = i;
 80041b2:	f04f 0002 	mov.w	r0, #2
    ep->xfer_buff = 0;
 80041b6:	e9c4 135d 	strd	r1, r3, [r4, #372]	; 0x174
    ep->tx_fifo_num = i;
 80041ba:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    ep->type = EP_TYPE_CTRL;
 80041be:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
    ep->xfer_len = 0;
 80041c2:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041c6:	f000 80c1 	beq.w	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80041ca:	f240 1003 	movw	r0, #259	; 0x103
 80041ce:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041d2:	2a04      	cmp	r2, #4
    ep->tx_fifo_num = i;
 80041d4:	f04f 0003 	mov.w	r0, #3
    ep->xfer_buff = 0;
 80041d8:	e9c4 1367 	strd	r1, r3, [r4, #412]	; 0x19c
    ep->tx_fifo_num = i;
 80041dc:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
    ep->type = EP_TYPE_CTRL;
 80041e0:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
    ep->xfer_len = 0;
 80041e4:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041e8:	f000 80b0 	beq.w	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80041ec:	f44f 7082 	mov.w	r0, #260	; 0x104
 80041f0:	f8a4 01bc 	strh.w	r0, [r4, #444]	; 0x1bc
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80041f4:	2a05      	cmp	r2, #5
    ep->tx_fifo_num = i;
 80041f6:	f04f 0004 	mov.w	r0, #4
    ep->xfer_buff = 0;
 80041fa:	e9c4 1371 	strd	r1, r3, [r4, #452]	; 0x1c4
    ep->tx_fifo_num = i;
 80041fe:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    ep->type = EP_TYPE_CTRL;
 8004202:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
    ep->xfer_len = 0;
 8004206:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800420a:	f000 809f 	beq.w	800434c <DCD_Init+0x1fc>
    ep->num = i;
 800420e:	f240 1005 	movw	r0, #261	; 0x105
 8004212:	f8a4 01e4 	strh.w	r0, [r4, #484]	; 0x1e4
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004216:	2a06      	cmp	r2, #6
    ep->tx_fifo_num = i;
 8004218:	f04f 0005 	mov.w	r0, #5
    ep->xfer_buff = 0;
 800421c:	e9c4 137b 	strd	r1, r3, [r4, #492]	; 0x1ec
    ep->tx_fifo_num = i;
 8004220:	f8a4 01ea 	strh.w	r0, [r4, #490]	; 0x1ea
    ep->type = EP_TYPE_CTRL;
 8004224:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
    ep->xfer_len = 0;
 8004228:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800422c:	f000 808e 	beq.w	800434c <DCD_Init+0x1fc>
    ep->num = i;
 8004230:	f44f 7083 	mov.w	r0, #262	; 0x106
 8004234:	f8a4 020c 	strh.w	r0, [r4, #524]	; 0x20c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004238:	2a07      	cmp	r2, #7
    ep->tx_fifo_num = i;
 800423a:	f04f 0006 	mov.w	r0, #6
    ep->xfer_buff = 0;
 800423e:	e9c4 1385 	strd	r1, r3, [r4, #532]	; 0x214
    ep->tx_fifo_num = i;
 8004242:	f8a4 0212 	strh.w	r0, [r4, #530]	; 0x212
    ep->type = EP_TYPE_CTRL;
 8004246:	f884 320f 	strb.w	r3, [r4, #527]	; 0x20f
    ep->xfer_len = 0;
 800424a:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800424e:	d07d      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 8004250:	f240 1007 	movw	r0, #263	; 0x107
 8004254:	f8a4 0234 	strh.w	r0, [r4, #564]	; 0x234
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004258:	2a08      	cmp	r2, #8
    ep->tx_fifo_num = i;
 800425a:	f04f 0007 	mov.w	r0, #7
    ep->xfer_buff = 0;
 800425e:	e9c4 138f 	strd	r1, r3, [r4, #572]	; 0x23c
    ep->tx_fifo_num = i;
 8004262:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    ep->type = EP_TYPE_CTRL;
 8004266:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    ep->xfer_len = 0;
 800426a:	f8c4 3248 	str.w	r3, [r4, #584]	; 0x248
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800426e:	d06d      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 8004270:	f44f 7084 	mov.w	r0, #264	; 0x108
 8004274:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004278:	2a09      	cmp	r2, #9
    ep->tx_fifo_num = i;
 800427a:	f04f 0008 	mov.w	r0, #8
    ep->xfer_buff = 0;
 800427e:	e9c4 1399 	strd	r1, r3, [r4, #612]	; 0x264
    ep->tx_fifo_num = i;
 8004282:	f8a4 0262 	strh.w	r0, [r4, #610]	; 0x262
    ep->type = EP_TYPE_CTRL;
 8004286:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
    ep->xfer_len = 0;
 800428a:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800428e:	d05d      	beq.n	800434c <DCD_Init+0x1fc>
    ep->tx_fifo_num = i;
 8004290:	2109      	movs	r1, #9
    ep->num = i;
 8004292:	f240 1009 	movw	r0, #265	; 0x109
    ep->tx_fifo_num = i;
 8004296:	f8a4 128a 	strh.w	r1, [r4, #650]	; 0x28a
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800429a:	2a0a      	cmp	r2, #10
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 800429c:	f04f 0140 	mov.w	r1, #64	; 0x40
    ep->xfer_buff = 0;
 80042a0:	e9c4 13a3 	strd	r1, r3, [r4, #652]	; 0x28c
    ep->num = i;
 80042a4:	f8a4 0284 	strh.w	r0, [r4, #644]	; 0x284
    ep->type = EP_TYPE_CTRL;
 80042a8:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
    ep->xfer_len = 0;
 80042ac:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042b0:	d04c      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80042b2:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80042b6:	f8a4 02ac 	strh.w	r0, [r4, #684]	; 0x2ac
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042ba:	2a0b      	cmp	r2, #11
    ep->tx_fifo_num = i;
 80042bc:	f04f 000a 	mov.w	r0, #10
    ep->xfer_buff = 0;
 80042c0:	e9c4 13ad 	strd	r1, r3, [r4, #692]	; 0x2b4
    ep->tx_fifo_num = i;
 80042c4:	f8a4 02b2 	strh.w	r0, [r4, #690]	; 0x2b2
    ep->type = EP_TYPE_CTRL;
 80042c8:	f884 32af 	strb.w	r3, [r4, #687]	; 0x2af
    ep->xfer_len = 0;
 80042cc:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042d0:	d03c      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80042d2:	f240 100b 	movw	r0, #267	; 0x10b
 80042d6:	f8a4 02d4 	strh.w	r0, [r4, #724]	; 0x2d4
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042da:	2a0c      	cmp	r2, #12
    ep->tx_fifo_num = i;
 80042dc:	f04f 000b 	mov.w	r0, #11
    ep->xfer_buff = 0;
 80042e0:	e9c4 13b7 	strd	r1, r3, [r4, #732]	; 0x2dc
    ep->tx_fifo_num = i;
 80042e4:	f8a4 02da 	strh.w	r0, [r4, #730]	; 0x2da
    ep->type = EP_TYPE_CTRL;
 80042e8:	f884 32d7 	strb.w	r3, [r4, #727]	; 0x2d7
    ep->xfer_len = 0;
 80042ec:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042f0:	d02c      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 80042f2:	f44f 7086 	mov.w	r0, #268	; 0x10c
 80042f6:	f8a4 02fc 	strh.w	r0, [r4, #764]	; 0x2fc
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042fa:	2a0d      	cmp	r2, #13
    ep->tx_fifo_num = i;
 80042fc:	f04f 000c 	mov.w	r0, #12
    ep->xfer_buff = 0;
 8004300:	e9c4 13c1 	strd	r1, r3, [r4, #772]	; 0x304
    ep->tx_fifo_num = i;
 8004304:	f8a4 0302 	strh.w	r0, [r4, #770]	; 0x302
    ep->type = EP_TYPE_CTRL;
 8004308:	f884 32ff 	strb.w	r3, [r4, #767]	; 0x2ff
    ep->xfer_len = 0;
 800430c:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004310:	d01c      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 8004312:	f240 100d 	movw	r0, #269	; 0x10d
 8004316:	f8a4 0324 	strh.w	r0, [r4, #804]	; 0x324
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800431a:	2a0e      	cmp	r2, #14
    ep->tx_fifo_num = i;
 800431c:	f04f 000d 	mov.w	r0, #13
    ep->xfer_buff = 0;
 8004320:	e9c4 13cb 	strd	r1, r3, [r4, #812]	; 0x32c
    ep->tx_fifo_num = i;
 8004324:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    ep->type = EP_TYPE_CTRL;
 8004328:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    ep->xfer_len = 0;
 800432c:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004330:	d00c      	beq.n	800434c <DCD_Init+0x1fc>
    ep->num = i;
 8004332:	f44f 7087 	mov.w	r0, #270	; 0x10e
    ep->xfer_buff = 0;
 8004336:	e9c4 13d5 	strd	r1, r3, [r4, #852]	; 0x354
    ep->num = i;
 800433a:	f8a4 034c 	strh.w	r0, [r4, #844]	; 0x34c
    ep->tx_fifo_num = i;
 800433e:	200e      	movs	r0, #14
 8004340:	f8a4 0352 	strh.w	r0, [r4, #850]	; 0x352
    ep->type = EP_TYPE_CTRL;
 8004344:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    ep->xfer_len = 0;
 8004348:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
    ep->num = i;
 800434c:	2300      	movs	r3, #0
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800434e:	2140      	movs	r1, #64	; 0x40
    ep->num = i;
 8004350:	2001      	movs	r0, #1
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004352:	2a02      	cmp	r2, #2
    ep->xfer_buff = 0;
 8004354:	e9c4 13df 	strd	r1, r3, [r4, #892]	; 0x37c
 8004358:	e9c4 13e9 	strd	r1, r3, [r4, #932]	; 0x3a4
    ep->num = i;
 800435c:	f8a4 3374 	strh.w	r3, [r4, #884]	; 0x374
    ep->tx_fifo_num = i;
 8004360:	f8a4 337a 	strh.w	r3, [r4, #890]	; 0x37a
    ep->type = EP_TYPE_CTRL;
 8004364:	f884 3377 	strb.w	r3, [r4, #887]	; 0x377
    ep->xfer_len = 0;
 8004368:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
    ep->num = i;
 800436c:	f8a4 039c 	strh.w	r0, [r4, #924]	; 0x39c
    ep->tx_fifo_num = i;
 8004370:	f8a4 03a2 	strh.w	r0, [r4, #930]	; 0x3a2
    ep->type = EP_TYPE_CTRL;
 8004374:	f884 339f 	strb.w	r3, [r4, #927]	; 0x39f
    ep->xfer_len = 0;
 8004378:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800437c:	f000 80c3 	beq.w	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 8004380:	2002      	movs	r0, #2
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004382:	2a03      	cmp	r2, #3
    ep->xfer_buff = 0;
 8004384:	e9c4 13f3 	strd	r1, r3, [r4, #972]	; 0x3cc
    ep->num = i;
 8004388:	f8a4 03c4 	strh.w	r0, [r4, #964]	; 0x3c4
    ep->tx_fifo_num = i;
 800438c:	f8a4 03ca 	strh.w	r0, [r4, #970]	; 0x3ca
    ep->type = EP_TYPE_CTRL;
 8004390:	f884 33c7 	strb.w	r3, [r4, #967]	; 0x3c7
    ep->xfer_len = 0;
 8004394:	f8c4 33d8 	str.w	r3, [r4, #984]	; 0x3d8
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004398:	f000 80b5 	beq.w	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 800439c:	2003      	movs	r0, #3
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800439e:	2a04      	cmp	r2, #4
    ep->xfer_buff = 0;
 80043a0:	e9c4 13fd 	strd	r1, r3, [r4, #1012]	; 0x3f4
    ep->num = i;
 80043a4:	f8a4 03ec 	strh.w	r0, [r4, #1004]	; 0x3ec
    ep->tx_fifo_num = i;
 80043a8:	f8a4 03f2 	strh.w	r0, [r4, #1010]	; 0x3f2
    ep->type = EP_TYPE_CTRL;
 80043ac:	f884 33ef 	strb.w	r3, [r4, #1007]	; 0x3ef
    ep->xfer_len = 0;
 80043b0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043b4:	f000 80a7 	beq.w	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80043b8:	2004      	movs	r0, #4
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043ba:	2a05      	cmp	r2, #5
    ep->num = i;
 80043bc:	f8a4 0414 	strh.w	r0, [r4, #1044]	; 0x414
    ep->tx_fifo_num = i;
 80043c0:	f8a4 041a 	strh.w	r0, [r4, #1050]	; 0x41a
    ep->type = EP_TYPE_CTRL;
 80043c4:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80043c8:	f8c4 141c 	str.w	r1, [r4, #1052]	; 0x41c
    ep->xfer_buff = 0;
 80043cc:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    ep->xfer_len = 0;
 80043d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043d4:	f000 8097 	beq.w	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80043d8:	2005      	movs	r0, #5
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043da:	2a06      	cmp	r2, #6
    ep->num = i;
 80043dc:	f8a4 043c 	strh.w	r0, [r4, #1084]	; 0x43c
    ep->tx_fifo_num = i;
 80043e0:	f8a4 0442 	strh.w	r0, [r4, #1090]	; 0x442
    ep->type = EP_TYPE_CTRL;
 80043e4:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80043e8:	f8c4 1444 	str.w	r1, [r4, #1092]	; 0x444
    ep->xfer_buff = 0;
 80043ec:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    ep->xfer_len = 0;
 80043f0:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043f4:	f000 8087 	beq.w	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80043f8:	2006      	movs	r0, #6
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80043fa:	2a07      	cmp	r2, #7
    ep->num = i;
 80043fc:	f8a4 0464 	strh.w	r0, [r4, #1124]	; 0x464
    ep->tx_fifo_num = i;
 8004400:	f8a4 046a 	strh.w	r0, [r4, #1130]	; 0x46a
    ep->type = EP_TYPE_CTRL;
 8004404:	f884 3467 	strb.w	r3, [r4, #1127]	; 0x467
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004408:	f8c4 146c 	str.w	r1, [r4, #1132]	; 0x46c
    ep->xfer_buff = 0;
 800440c:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
    ep->xfer_len = 0;
 8004410:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004414:	d077      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 8004416:	2007      	movs	r0, #7
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004418:	2a08      	cmp	r2, #8
    ep->num = i;
 800441a:	f8a4 048c 	strh.w	r0, [r4, #1164]	; 0x48c
    ep->tx_fifo_num = i;
 800441e:	f8a4 0492 	strh.w	r0, [r4, #1170]	; 0x492
    ep->type = EP_TYPE_CTRL;
 8004422:	f884 348f 	strb.w	r3, [r4, #1167]	; 0x48f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004426:	f8c4 1494 	str.w	r1, [r4, #1172]	; 0x494
    ep->xfer_buff = 0;
 800442a:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
    ep->xfer_len = 0;
 800442e:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004432:	d068      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 8004434:	2008      	movs	r0, #8
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004436:	2a09      	cmp	r2, #9
    ep->num = i;
 8004438:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
    ep->tx_fifo_num = i;
 800443c:	f8a4 04ba 	strh.w	r0, [r4, #1210]	; 0x4ba
    ep->type = EP_TYPE_CTRL;
 8004440:	f884 34b7 	strb.w	r3, [r4, #1207]	; 0x4b7
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004444:	f8c4 14bc 	str.w	r1, [r4, #1212]	; 0x4bc
    ep->xfer_buff = 0;
 8004448:	f8c4 34c0 	str.w	r3, [r4, #1216]	; 0x4c0
    ep->xfer_len = 0;
 800444c:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004450:	d059      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 8004452:	2009      	movs	r0, #9
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004454:	2a0a      	cmp	r2, #10
    ep->num = i;
 8004456:	f8a4 04dc 	strh.w	r0, [r4, #1244]	; 0x4dc
    ep->tx_fifo_num = i;
 800445a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
    ep->type = EP_TYPE_CTRL;
 800445e:	f884 34df 	strb.w	r3, [r4, #1247]	; 0x4df
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004462:	f8c4 14e4 	str.w	r1, [r4, #1252]	; 0x4e4
    ep->xfer_buff = 0;
 8004466:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
    ep->xfer_len = 0;
 800446a:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800446e:	d04a      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 8004470:	200a      	movs	r0, #10
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004472:	2a0b      	cmp	r2, #11
    ep->num = i;
 8004474:	f8a4 0504 	strh.w	r0, [r4, #1284]	; 0x504
    ep->tx_fifo_num = i;
 8004478:	f8a4 050a 	strh.w	r0, [r4, #1290]	; 0x50a
    ep->type = EP_TYPE_CTRL;
 800447c:	f884 3507 	strb.w	r3, [r4, #1287]	; 0x507
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004480:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    ep->xfer_buff = 0;
 8004484:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    ep->xfer_len = 0;
 8004488:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800448c:	d03b      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->type = EP_TYPE_CTRL;
 800448e:	2300      	movs	r3, #0
    ep->num = i;
 8004490:	200b      	movs	r0, #11
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8004492:	2140      	movs	r1, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8004494:	2a0c      	cmp	r2, #12
    ep->num = i;
 8004496:	f8a4 052c 	strh.w	r0, [r4, #1324]	; 0x52c
    ep->tx_fifo_num = i;
 800449a:	f8a4 0532 	strh.w	r0, [r4, #1330]	; 0x532
    ep->type = EP_TYPE_CTRL;
 800449e:	f884 352f 	strb.w	r3, [r4, #1327]	; 0x52f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80044a2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ep->xfer_buff = 0;
 80044a6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    ep->xfer_len = 0;
 80044aa:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80044ae:	d02a      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80044b0:	200c      	movs	r0, #12
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80044b2:	2a0d      	cmp	r2, #13
    ep->num = i;
 80044b4:	f8a4 0554 	strh.w	r0, [r4, #1364]	; 0x554
    ep->tx_fifo_num = i;
 80044b8:	f8a4 055a 	strh.w	r0, [r4, #1370]	; 0x55a
    ep->type = EP_TYPE_CTRL;
 80044bc:	f884 3557 	strb.w	r3, [r4, #1367]	; 0x557
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80044c0:	f8c4 155c 	str.w	r1, [r4, #1372]	; 0x55c
    ep->xfer_buff = 0;
 80044c4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    ep->xfer_len = 0;
 80044c8:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80044cc:	d01b      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80044ce:	200d      	movs	r0, #13
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80044d0:	2a0e      	cmp	r2, #14
    ep->num = i;
 80044d2:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ep->tx_fifo_num = i;
 80044d6:	f8a4 0582 	strh.w	r0, [r4, #1410]	; 0x582
    ep->type = EP_TYPE_CTRL;
 80044da:	f884 357f 	strb.w	r3, [r4, #1407]	; 0x57f
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80044de:	f8c4 1584 	str.w	r1, [r4, #1412]	; 0x584
    ep->xfer_buff = 0;
 80044e2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    ep->xfer_len = 0;
 80044e6:	f8c4 3590 	str.w	r3, [r4, #1424]	; 0x590
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80044ea:	d00c      	beq.n	8004506 <DCD_Init+0x3b6>
    ep->num = i;
 80044ec:	220e      	movs	r2, #14
 80044ee:	f8a4 25a4 	strh.w	r2, [r4, #1444]	; 0x5a4
    ep->tx_fifo_num = i;
 80044f2:	f8a4 25aa 	strh.w	r2, [r4, #1450]	; 0x5aa
    ep->type = EP_TYPE_CTRL;
 80044f6:	f884 35a7 	strb.w	r3, [r4, #1447]	; 0x5a7
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 80044fa:	f8c4 15ac 	str.w	r1, [r4, #1452]	; 0x5ac
    ep->xfer_buff = 0;
 80044fe:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
    ep->xfer_len = 0;
 8004502:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8004506:	4620      	mov	r0, r4
 8004508:	f7ff f92e 	bl	8003768 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff f855 	bl	80035bc <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8004512:	2100      	movs	r1, #0
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff f973 	bl	8003800 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff f994 	bl	8003848 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8004520:	4620      	mov	r0, r4
}
 8004522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USB_OTG_EnableGlobalInt(pdev);
 8004526:	f7ff b917 	b.w	8003758 <USB_OTG_EnableGlobalInt>
    ep->xfer_buff = 0;
 800452a:	e9c4 13df 	strd	r1, r3, [r4, #892]	; 0x37c
    ep->num = i;
 800452e:	f8a4 3374 	strh.w	r3, [r4, #884]	; 0x374
    ep->tx_fifo_num = i;
 8004532:	f8a4 337a 	strh.w	r3, [r4, #890]	; 0x37a
    ep->type = EP_TYPE_CTRL;
 8004536:	f884 3377 	strb.w	r3, [r4, #887]	; 0x377
    ep->xfer_len = 0;
 800453a:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800453e:	e7e2      	b.n	8004506 <DCD_Init+0x3b6>

08004540 <DCD_EP_Open>:
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8004540:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004544:	b508      	push	{r3, lr}
  if ((ep_addr & 0x80) == 0x80)
 8004546:	d11c      	bne.n	8004582 <DCD_EP_Open+0x42>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8004548:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800454c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004550:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8004554:	fb0e 0e01 	mla	lr, lr, r1, r0
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8004558:	f8cc 237c 	str.w	r2, [ip, #892]	; 0x37c
  ep->is_in = (0x80 & ep_addr) != 0;
 800455c:	2200      	movs	r2, #0
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800455e:	f50e 7e5d 	add.w	lr, lr, #884	; 0x374
  ep->num   = ep_addr & 0x7F;
 8004562:	f88c 1374 	strb.w	r1, [ip, #884]	; 0x374
  ep->type = ep_type;
 8004566:	f88c 3377 	strb.w	r3, [ip, #887]	; 0x377
  ep->is_in = (0x80 & ep_addr) != 0;
 800456a:	f88c 2375 	strb.w	r2, [ip, #885]	; 0x375
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 800456e:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0;
 8004570:	bf04      	itt	eq
 8004572:	2300      	moveq	r3, #0
 8004574:	f88e 3004 	strbeq.w	r3, [lr, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8004578:	4671      	mov	r1, lr
 800457a:	f7ff fbf1 	bl	8003d60 <USB_OTG_EPActivate>
  return 0;
}
 800457e:	2000      	movs	r0, #0
 8004580:	bd08      	pop	{r3, pc}
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004582:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
  ep->num   = ep_addr & 0x7F;
 8004586:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800458a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800458e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8004592:	fb0e 0e0c 	mla	lr, lr, ip, r0
  ep->maxpacket = ep_mps;
 8004596:	f8c1 2124 	str.w	r2, [r1, #292]	; 0x124
  ep->is_in = (0x80 & ep_addr) != 0;
 800459a:	2201      	movs	r2, #1
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800459c:	f50e 7e8e 	add.w	lr, lr, #284	; 0x11c
  ep->num   = ep_addr & 0x7F;
 80045a0:	f881 c11c 	strb.w	ip, [r1, #284]	; 0x11c
  ep->type = ep_type;
 80045a4:	f881 311f 	strb.w	r3, [r1, #287]	; 0x11f
    ep->tx_fifo_num = ep->num;
 80045a8:	f8a1 c122 	strh.w	ip, [r1, #290]	; 0x122
  ep->is_in = (0x80 & ep_addr) != 0;
 80045ac:	f881 211d 	strb.w	r2, [r1, #285]	; 0x11d
    ep->tx_fifo_num = ep->num;
 80045b0:	e7dd      	b.n	800456e <DCD_EP_Open+0x2e>
 80045b2:	bf00      	nop

080045b4 <DCD_EP_Close>:
//--------------------------------------------------------------
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 80045b4:	b24a      	sxtb	r2, r1
 80045b6:	2a00      	cmp	r2, #0
{
 80045b8:	b508      	push	{r3, lr}
  if ((ep_addr&0x80) == 0x80)
 80045ba:	db0c      	blt.n	80045d6 <DCD_EP_Close+0x22>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80045bc:	2328      	movs	r3, #40	; 0x28
 80045be:	fb03 0301 	mla	r3, r3, r1, r0
 80045c2:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
  ep->is_in = (0x80 & ep_addr) != 0;
 80045c6:	0fd2      	lsrs	r2, r2, #31
  ep->num   = ep_addr & 0x7F;
 80045c8:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80045ca:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 80045cc:	4619      	mov	r1, r3
 80045ce:	f7ff fc01 	bl	8003dd4 <USB_OTG_EPDeactivate>
  return 0;
}
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd08      	pop	{r3, pc}
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80045d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80045da:	2328      	movs	r3, #40	; 0x28
 80045dc:	fb03 0301 	mla	r3, r3, r1, r0
 80045e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80045e4:	e7ef      	b.n	80045c6 <DCD_EP_Close+0x12>
 80045e6:	bf00      	nop

080045e8 <DCD_EP_PrepareRx>:
//--------------------------------------------------------------
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 80045e8:	b510      	push	{r4, lr}
 80045ea:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80045ee:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80045f2:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80045f6:	2128      	movs	r1, #40	; 0x28
  ep->xfer_len = buf_len;
 80045f8:	f8cc 3388 	str.w	r3, [ip, #904]	; 0x388
  ep->xfer_count = 0;
 80045fc:	2300      	movs	r3, #0
  ep->xfer_buff = pbuf;  
 80045fe:	f8cc 2380 	str.w	r2, [ip, #896]	; 0x380
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8004602:	f88c 4374 	strb.w	r4, [ip, #884]	; 0x374
  ep->xfer_count = 0;
 8004606:	f8cc 338c 	str.w	r3, [ip, #908]	; 0x38c
  ep->is_in = 0;
 800460a:	f88c 3375 	strb.w	r3, [ip, #885]	; 0x375
  
  if (pdev->cfg.dma_enable == 1)
 800460e:	78c3      	ldrb	r3, [r0, #3]
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004610:	fb01 0104 	mla	r1, r1, r4, r0
  if (pdev->cfg.dma_enable == 1)
 8004614:	2b01      	cmp	r3, #1
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004616:	f501 715d 	add.w	r1, r1, #884	; 0x374
  {
    ep->dma_addr = (uint32_t)pbuf;  
 800461a:	bf08      	it	eq
 800461c:	f8cc 2384 	streq.w	r2, [ip, #900]	; 0x384
  }
  
  if ( ep->num == 0 )
 8004620:	b91c      	cbnz	r4, 800462a <DCD_EP_PrepareRx+0x42>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8004622:	f7ff fca7 	bl	8003f74 <USB_OTG_EP0StartXfer>
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
  }
  return 0;
}
 8004626:	2000      	movs	r0, #0
 8004628:	bd10      	pop	{r4, pc}
    USB_OTG_EPStartXfer(pdev, ep );
 800462a:	f7ff fbf1 	bl	8003e10 <USB_OTG_EPStartXfer>
}
 800462e:	2000      	movs	r0, #0
 8004630:	bd10      	pop	{r4, pc}
 8004632:	bf00      	nop

08004634 <DCD_EP_Tx>:
//--------------------------------------------------------------
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8004634:	b510      	push	{r4, lr}
 8004636:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 800463a:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 800463e:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
 8004642:	e9ce 224a 	strd	r2, r2, [lr, #296]	; 0x128
  ep->xfer_count = 0;
  ep->xfer_len  = buf_len;
 8004646:	f8ce 3130 	str.w	r3, [lr, #304]	; 0x130
  ep->xfer_count = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	f8ce 3134 	str.w	r3, [lr, #308]	; 0x134
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004650:	2328      	movs	r3, #40	; 0x28
 8004652:	fb03 0c04 	mla	ip, r3, r4, r0
  ep->is_in = 1;
 8004656:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7F;  
 8004658:	f88e 411c 	strb.w	r4, [lr, #284]	; 0x11c
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800465c:	f50c 718e 	add.w	r1, ip, #284	; 0x11c
  ep->is_in = 1;
 8004660:	f88e 311d 	strb.w	r3, [lr, #285]	; 0x11d
  
  if ( ep->num == 0 )
 8004664:	b91c      	cbnz	r4, 800466e <DCD_EP_Tx+0x3a>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8004666:	f7ff fc85 	bl	8003f74 <USB_OTG_EP0StartXfer>
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
  }
  return 0;
}
 800466a:	2000      	movs	r0, #0
 800466c:	bd10      	pop	{r4, pc}
    USB_OTG_EPStartXfer(pdev, ep );
 800466e:	f7ff fbcf 	bl	8003e10 <USB_OTG_EPStartXfer>
}
 8004672:	2000      	movs	r0, #0
 8004674:	bd10      	pop	{r4, pc}
 8004676:	bf00      	nop

08004678 <DCD_EP_Stall>:

//--------------------------------------------------------------
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8004678:	b24a      	sxtb	r2, r1
 800467a:	2a00      	cmp	r2, #0
{
 800467c:	b508      	push	{r3, lr}
  if ((0x80 & epnum) == 0x80)
 800467e:	db10      	blt.n	80046a2 <DCD_EP_Stall+0x2a>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8004680:	2328      	movs	r3, #40	; 0x28
 8004682:	fb03 0301 	mla	r3, r3, r1, r0
 8004686:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 800468a:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 1;
 800468c:	f04f 0c01 	mov.w	ip, #1
  ep->num   = epnum & 0x7F;
 8004690:	7019      	strb	r1, [r3, #0]
  ep->is_stall = 1;
 8004692:	f883 c002 	strb.w	ip, [r3, #2]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8004696:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8004698:	4619      	mov	r1, r3
 800469a:	f7ff fcd9 	bl	8004050 <USB_OTG_EPSetStall>
  return (0);
}
 800469e:	2000      	movs	r0, #0
 80046a0:	bd08      	pop	{r3, pc}
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 80046a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80046a6:	2328      	movs	r3, #40	; 0x28
 80046a8:	fb03 0301 	mla	r3, r3, r1, r0
 80046ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80046b0:	e7eb      	b.n	800468a <DCD_EP_Stall+0x12>
 80046b2:	bf00      	nop

080046b4 <DCD_EP_ClrStall>:

//--------------------------------------------------------------
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80046b4:	b24a      	sxtb	r2, r1
 80046b6:	2a00      	cmp	r2, #0
{
 80046b8:	b510      	push	{r4, lr}
  if ((0x80 & epnum) == 0x80)
 80046ba:	db0e      	blt.n	80046da <DCD_EP_ClrStall+0x26>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80046bc:	2328      	movs	r3, #40	; 0x28
 80046be:	fb03 0301 	mla	r3, r3, r1, r0
 80046c2:	f503 735d 	add.w	r3, r3, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 80046c6:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 80046c8:	0fd2      	lsrs	r2, r2, #31
  ep->num   = epnum & 0x7F;
 80046ca:	7019      	strb	r1, [r3, #0]
  ep->is_stall = 0;  
 80046cc:	709c      	strb	r4, [r3, #2]
  ep->is_in = ((epnum & 0x80) == 0x80);
 80046ce:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7ff fce1 	bl	8004098 <USB_OTG_EPClearStall>
  return (0);
}
 80046d6:	4620      	mov	r0, r4
 80046d8:	bd10      	pop	{r4, pc}
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80046da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80046de:	2328      	movs	r3, #40	; 0x28
 80046e0:	fb03 0301 	mla	r3, r3, r1, r0
 80046e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80046e8:	e7ed      	b.n	80046c6 <DCD_EP_ClrStall+0x12>
 80046ea:	bf00      	nop

080046ec <DCD_EP_Flush>:


//--------------------------------------------------------------
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80046ec:	b508      	push	{r3, lr}

  if ((epnum & 0x80) == 0x80)
 80046ee:	060b      	lsls	r3, r1, #24
 80046f0:	d403      	bmi.n	80046fa <DCD_EP_Flush+0xe>
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
  }
  else
  {
    USB_OTG_FlushRxFifo(pdev);
 80046f2:	f7ff f865 	bl	80037c0 <USB_OTG_FlushRxFifo>
  }

  return (0);
}
 80046f6:	2000      	movs	r0, #0
 80046f8:	bd08      	pop	{r3, pc}
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
 80046fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80046fe:	f7ff f83b 	bl	8003778 <USB_OTG_FlushTxFifo>
}
 8004702:	2000      	movs	r0, #0
 8004704:	bd08      	pop	{r3, pc}
 8004706:	bf00      	nop

08004708 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8004708:	6942      	ldr	r2, [r0, #20]
  dcfg.d32 = 0;
 800470a:	2300      	movs	r3, #0
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800470c:	6810      	ldr	r0, [r2, #0]
  dcfg.b.devaddr = address;
 800470e:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8004712:	4303      	orrs	r3, r0
 8004714:	6013      	str	r3, [r2, #0]
}
 8004716:	4770      	bx	lr

08004718 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8004718:	2000      	movs	r0, #0
 800471a:	4770      	bx	lr

0800471c <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 800471c:	2000      	movs	r0, #0
 800471e:	4770      	bx	lr

08004720 <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8004720:	2000      	movs	r0, #0
 8004722:	4770      	bx	lr

08004724 <CDC_Receive_HS>:
{
 8004724:	b510      	push	{r4, lr}
 8004726:	4604      	mov	r4, r0
  CDC_ReceiveCallback_HS(Buf, Len);
 8004728:	f000 fef0 	bl	800550c <CDC_ReceiveCallback_HS>
  USBD_CDC_SetRxBuffer(&Buf[0]);
 800472c:	4620      	mov	r0, r4
 800472e:	f7fe f81f 	bl	8002770 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&USB_OTG_dev);
 8004732:	4802      	ldr	r0, [pc, #8]	; (800473c <CDC_Receive_HS+0x18>)
 8004734:	f7fe f83c 	bl	80027b0 <USBD_CDC_ReceivePacket>
}
 8004738:	2000      	movs	r0, #0
 800473a:	bd10      	pop	{r4, pc}
 800473c:	200018c4 	.word	0x200018c4

08004740 <CDC_Init_HS>:
{
 8004740:	b508      	push	{r3, lr}
  USBD_CDC_SetTxBuffer(UserTxBufferHS, 0);
 8004742:	2100      	movs	r1, #0
 8004744:	4803      	ldr	r0, [pc, #12]	; (8004754 <CDC_Init_HS+0x14>)
 8004746:	f7fe f809 	bl	800275c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(UserRxBufferHS);
 800474a:	4803      	ldr	r0, [pc, #12]	; (8004758 <CDC_Init_HS+0x18>)
 800474c:	f7fe f810 	bl	8002770 <USBD_CDC_SetRxBuffer>
}
 8004750:	2000      	movs	r0, #0
 8004752:	bd08      	pop	{r3, pc}
 8004754:	20000e38 	.word	0x20000e38
 8004758:	20000638 	.word	0x20000638

0800475c <CDC_Transmit_HS>:
{
 800475c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)USB_OTG_dev.dev.usr_cdc_acm;
 800475e:	4c07      	ldr	r4, [pc, #28]	; (800477c <CDC_Transmit_HS+0x20>)
 8004760:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
  if (hcdc->TxState != 0){
 8004764:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004768:	b10b      	cbz	r3, 800476e <CDC_Transmit_HS+0x12>
}
 800476a:	2001      	movs	r0, #1
 800476c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(Buf, Len);
 800476e:	f7fd fff5 	bl	800275c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&USB_OTG_dev);
 8004772:	4620      	mov	r0, r4
}
 8004774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&USB_OTG_dev);
 8004778:	f7fe b802 	b.w	8002780 <USBD_CDC_TransmitPacket>
 800477c:	200018c4 	.word	0x200018c4

08004780 <USBD_Resume>:
}


//--------------------------------------------------------------
static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8004780:	b510      	push	{r4, lr}
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8004782:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
{
 8004786:	4604      	mov	r4, r0
  pdev->dev.usr_cb->DeviceResumed(); 
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 800478c:	2303      	movs	r3, #3
 800478e:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
  return USBD_OK;
}
 8004792:	2000      	movs	r0, #0
 8004794:	bd10      	pop	{r4, pc}
 8004796:	bf00      	nop

08004798 <USBD_Suspend>:



//--------------------------------------------------------------
static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8004798:	b508      	push	{r3, lr}
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 800479a:	2204      	movs	r2, #4
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 800479c:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 80047a0:	f880 2116 	strb.w	r2, [r0, #278]	; 0x116
  pdev->dev.usr_cb->DeviceSuspended(); 
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4798      	blx	r3
  return USBD_OK;
}
 80047a8:	2000      	movs	r0, #0
 80047aa:	bd08      	pop	{r3, pc}

080047ac <USBD_SOF>:



//--------------------------------------------------------------
static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 80047ac:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 80047ae:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	b103      	cbz	r3, 80047b8 <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 80047b6:	4798      	blx	r3
  }
  return USBD_OK;
}
 80047b8:	2000      	movs	r0, #0
 80047ba:	bd08      	pop	{r3, pc}

080047bc <USBD_IsoINIncomplete>:
  return USBD_OK;
}

//--------------------------------------------------------------
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80047bc:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 80047be:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	4798      	blx	r3
  return USBD_OK;
}
 80047c6:	2000      	movs	r0, #0
 80047c8:	bd08      	pop	{r3, pc}
 80047ca:	bf00      	nop

080047cc <USBD_IsoOUTIncomplete>:

//--------------------------------------------------------------
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80047cc:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 80047ce:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4798      	blx	r3
  return USBD_OK;
}
 80047d6:	2000      	movs	r0, #0
 80047d8:	bd08      	pop	{r3, pc}
 80047da:	bf00      	nop

080047dc <USBD_DevConnected>:


//--------------------------------------------------------------
static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
{
 80047dc:	b508      	push	{r3, lr}
  pdev->dev.usr_cb->DeviceConnected();
 80047de:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4798      	blx	r3
  return USBD_OK;
}
 80047e6:	2000      	movs	r0, #0
 80047e8:	bd08      	pop	{r3, pc}
 80047ea:	bf00      	nop

080047ec <USBD_DevDisconnected>:

//--------------------------------------------------------------
static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.usr_cb->DeviceDisconnected();
 80047ec:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
{
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4604      	mov	r4, r0
  pdev->dev.usr_cb->DeviceDisconnected();
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	4798      	blx	r3
  pdev->dev.class_cb->DeInit(pdev, 0);
 80047f8:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 80047fc:	2100      	movs	r1, #0
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4620      	mov	r0, r4
 8004802:	4798      	blx	r3
  return USBD_OK;
}
 8004804:	2000      	movs	r0, #0
 8004806:	bd10      	pop	{r4, pc}

08004808 <USBD_Reset>:
  DCD_EP_Open(pdev,
 8004808:	2300      	movs	r3, #0
{
 800480a:	b510      	push	{r4, lr}
  DCD_EP_Open(pdev,
 800480c:	4619      	mov	r1, r3
{
 800480e:	4604      	mov	r4, r0
  DCD_EP_Open(pdev,
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	f7ff fe95 	bl	8004540 <DCD_EP_Open>
  DCD_EP_Open(pdev,
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	2300      	movs	r3, #0
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff fe8f 	bl	8004540 <DCD_EP_Open>
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8004822:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8004826:	78a0      	ldrb	r0, [r4, #2]
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8004828:	2201      	movs	r2, #1
 800482a:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4798      	blx	r3
}
 8004832:	2000      	movs	r0, #0
 8004834:	bd10      	pop	{r4, pc}
 8004836:	bf00      	nop

08004838 <USBD_SetupStage>:
{
 8004838:	b510      	push	{r4, lr}
 800483a:	b082      	sub	sp, #8
  USBD_ParseSetupRequest(pdev , &req);
 800483c:	4669      	mov	r1, sp
{
 800483e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(pdev , &req);
 8004840:	f000 fbd0 	bl	8004fe4 <USBD_ParseSetupRequest>
  switch (req.bmRequest & 0x1F) 
 8004844:	f89d 1000 	ldrb.w	r1, [sp]
 8004848:	f001 031f 	and.w	r3, r1, #31
 800484c:	2b01      	cmp	r3, #1
 800484e:	d00a      	beq.n	8004866 <USBD_SetupStage+0x2e>
 8004850:	2b02      	cmp	r3, #2
 8004852:	d016      	beq.n	8004882 <USBD_SetupStage+0x4a>
 8004854:	b173      	cbz	r3, 8004874 <USBD_SetupStage+0x3c>
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8004856:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff ff0c 	bl	8004678 <DCD_EP_Stall>
}
 8004860:	2000      	movs	r0, #0
 8004862:	b002      	add	sp, #8
 8004864:	bd10      	pop	{r4, pc}
    USBD_StdItfReq(pdev, &req);
 8004866:	4669      	mov	r1, sp
 8004868:	4620      	mov	r0, r4
 800486a:	f000 fb1f 	bl	8004eac <USBD_StdItfReq>
}
 800486e:	2000      	movs	r0, #0
 8004870:	b002      	add	sp, #8
 8004872:	bd10      	pop	{r4, pc}
    USBD_StdDevReq (pdev, &req);
 8004874:	4669      	mov	r1, sp
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f964 	bl	8004b44 <USBD_StdDevReq>
}
 800487c:	2000      	movs	r0, #0
 800487e:	b002      	add	sp, #8
 8004880:	bd10      	pop	{r4, pc}
    USBD_StdEPReq(pdev, &req);   
 8004882:	4669      	mov	r1, sp
 8004884:	4620      	mov	r0, r4
 8004886:	f000 fb3b 	bl	8004f00 <USBD_StdEPReq>
}
 800488a:	2000      	movs	r0, #0
 800488c:	b002      	add	sp, #8
 800488e:	bd10      	pop	{r4, pc}

08004890 <USBD_DataInStage>:
{
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4604      	mov	r4, r0
  if(epnum == 0) 
 8004894:	b929      	cbnz	r1, 80048a2 <USBD_DataInStage+0x12>
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8004896:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
 800489a:	2b02      	cmp	r3, #2
 800489c:	d00d      	beq.n	80048ba <USBD_DataInStage+0x2a>
}
 800489e:	2000      	movs	r0, #0
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80048a2:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f8      	beq.n	800489e <USBD_DataInStage+0xe>
 80048ac:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 80048b0:	2a03      	cmp	r2, #3
 80048b2:	d1f4      	bne.n	800489e <USBD_DataInStage+0xe>
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 80048b4:	4798      	blx	r3
}
 80048b6:	2000      	movs	r0, #0
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
      if(ep->rem_data_len > ep->maxpacket)
 80048ba:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 80048be:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <USBD_DataInStage+0x58>
        if(pdev->cfg.dma_enable == 1)
 80048c6:	78c1      	ldrb	r1, [r0, #3]
 80048c8:	2901      	cmp	r1, #1
          ep->xfer_buff += ep->maxpacket;
 80048ca:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
        ep->rem_data_len -=  ep->maxpacket;
 80048ce:	eba2 0203 	sub.w	r2, r2, r3
          ep->xfer_buff += ep->maxpacket;
 80048d2:	bf08      	it	eq
 80048d4:	18c9      	addeq	r1, r1, r3
        ep->rem_data_len -=  ep->maxpacket;
 80048d6:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
          ep->xfer_buff += ep->maxpacket;
 80048da:	bf08      	it	eq
 80048dc:	f8c0 1128 	streq.w	r1, [r0, #296]	; 0x128
        USBD_CtlContinueSendData (pdev, 
 80048e0:	b292      	uxth	r2, r2
 80048e2:	f000 f8f1 	bl	8004ac8 <USBD_CtlContinueSendData>
 80048e6:	e7da      	b.n	800489e <USBD_DataInStage+0xe>
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80048e8:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 80048ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80048f0:	fb03 2515 	mls	r5, r3, r5, r2
 80048f4:	b95d      	cbnz	r5, 800490e <USBD_DataInStage+0x7e>
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d809      	bhi.n	800490e <USBD_DataInStage+0x7e>
           (ep->total_data_len >= ep->maxpacket) &&
 80048fa:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80048fe:	429a      	cmp	r2, r3
 8004900:	d205      	bcs.n	800490e <USBD_DataInStage+0x7e>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004902:	462a      	mov	r2, r5
 8004904:	f000 f8e0 	bl	8004ac8 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8004908:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 800490c:	e7c7      	b.n	800489e <USBD_DataInStage+0xe>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 800490e:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	b11b      	cbz	r3, 800491e <USBD_DataInStage+0x8e>
 8004916:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 800491a:	2a03      	cmp	r2, #3
 800491c:	d003      	beq.n	8004926 <USBD_DataInStage+0x96>
          USBD_CtlReceiveStatus(pdev);
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f900 	bl	8004b24 <USBD_CtlReceiveStatus>
 8004924:	e7bb      	b.n	800489e <USBD_DataInStage+0xe>
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8004926:	4620      	mov	r0, r4
 8004928:	4798      	blx	r3
 800492a:	e7f8      	b.n	800491e <USBD_DataInStage+0x8e>

0800492c <USBD_DataOutStage>:
{
 800492c:	b510      	push	{r4, lr}
 800492e:	4604      	mov	r4, r0
  if(epnum == 0) 
 8004930:	b929      	cbnz	r1, 800493e <USBD_DataOutStage+0x12>
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8004932:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
 8004936:	2b03      	cmp	r3, #3
 8004938:	d00d      	beq.n	8004956 <USBD_DataOutStage+0x2a>
}
 800493a:	2000      	movs	r0, #0
 800493c:	bd10      	pop	{r4, pc}
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 800493e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f8      	beq.n	800493a <USBD_DataOutStage+0xe>
 8004948:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 800494c:	2a03      	cmp	r2, #3
 800494e:	d1f4      	bne.n	800493a <USBD_DataOutStage+0xe>
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8004950:	4798      	blx	r3
}
 8004952:	2000      	movs	r0, #0
 8004954:	bd10      	pop	{r4, pc}
      if(ep->rem_data_len > ep->maxpacket)
 8004956:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800495a:	f8d0 237c 	ldr.w	r2, [r0, #892]	; 0x37c
 800495e:	4293      	cmp	r3, r2
 8004960:	d912      	bls.n	8004988 <USBD_DataOutStage+0x5c>
        if(pdev->cfg.dma_enable == 1)
 8004962:	78c1      	ldrb	r1, [r0, #3]
 8004964:	2901      	cmp	r1, #1
          ep->xfer_buff += ep->maxpacket; 
 8004966:	f8d0 1380 	ldr.w	r1, [r0, #896]	; 0x380
        ep->rem_data_len -=  ep->maxpacket;
 800496a:	eba3 0302 	sub.w	r3, r3, r2
          ep->xfer_buff += ep->maxpacket; 
 800496e:	bf04      	itt	eq
 8004970:	1889      	addeq	r1, r1, r2
 8004972:	f8c0 1380 	streq.w	r1, [r0, #896]	; 0x380
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8004976:	429a      	cmp	r2, r3
 8004978:	bf28      	it	cs
 800497a:	461a      	movcs	r2, r3
        ep->rem_data_len -=  ep->maxpacket;
 800497c:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
        USBD_CtlContinueRx (pdev, 
 8004980:	b292      	uxth	r2, r2
 8004982:	f000 f8b7 	bl	8004af4 <USBD_CtlContinueRx>
 8004986:	e7d8      	b.n	800493a <USBD_DataOutStage+0xe>
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8004988:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	b11b      	cbz	r3, 8004998 <USBD_DataOutStage+0x6c>
 8004990:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 8004994:	2a03      	cmp	r2, #3
 8004996:	d003      	beq.n	80049a0 <USBD_DataOutStage+0x74>
        USBD_CtlSendStatus(pdev);
 8004998:	4620      	mov	r0, r4
 800499a:	f000 f8b3 	bl	8004b04 <USBD_CtlSendStatus>
 800499e:	e7cc      	b.n	800493a <USBD_DataOutStage+0xe>
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80049a0:	4798      	blx	r3
 80049a2:	e7f9      	b.n	8004998 <USBD_DataOutStage+0x6c>

080049a4 <USBD_Init>:
{
 80049a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	4604      	mov	r4, r0
 80049aa:	4615      	mov	r5, r2
 80049ac:	461e      	mov	r6, r3
 80049ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80049b2:	460f      	mov	r7, r1
  USB_OTG_BSP_Init(pdev, coreID);
 80049b4:	f7fe fb96 	bl	80030e4 <USB_OTG_BSP_Init>
  DCD_Init(pdev , coreID);
 80049b8:	4620      	mov	r0, r4
 80049ba:	4639      	mov	r1, r7
  pdev->dev.class_cb = class_cb;
 80049bc:	f8c4 65e4 	str.w	r6, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 80049c0:	f8c4 85e8 	str.w	r8, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 80049c4:	f8c4 55f4 	str.w	r5, [r4, #1524]	; 0x5f4
  DCD_Init(pdev , coreID);
 80049c8:	f7ff fbc2 	bl	8004150 <DCD_Init>
  pdev->dev.usr_cb->Init();
 80049cc:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4798      	blx	r3
  USB_OTG_Start(pdev);
 80049d4:	4620      	mov	r0, r4
}
 80049d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USB_OTG_Start(pdev);
 80049da:	f7ff bb9b 	b.w	8004114 <USB_OTG_Start>
 80049de:	bf00      	nop

080049e0 <USBD_SetCfg>:
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80049e0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4798      	blx	r3
  pdev->dev.usr_cb->DeviceConfigured();
 80049ec:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4798      	blx	r3
}
 80049f4:	2000      	movs	r0, #0
 80049f6:	bd10      	pop	{r4, pc}

080049f8 <USBD_ClrCfg>:
{
 80049f8:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 80049fa:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4798      	blx	r3
}
 8004a02:	2000      	movs	r0, #0
 8004a04:	bd08      	pop	{r3, pc}
 8004a06:	bf00      	nop

08004a08 <USBD_USR_DeviceDescriptor>:
};

//--------------------------------------------------------------
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004a08:	2312      	movs	r3, #18
  return USBD_DeviceDesc;
}
 8004a0a:	4801      	ldr	r0, [pc, #4]	; (8004a10 <USBD_USR_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8004a0c:	800b      	strh	r3, [r1, #0]
}
 8004a0e:	4770      	bx	lr
 8004a10:	20000348 	.word	0x20000348

08004a14 <USBD_USR_LangIDStrDescriptor>:

//--------------------------------------------------------------
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8004a14:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004a16:	4801      	ldr	r0, [pc, #4]	; (8004a1c <USBD_USR_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8004a18:	800b      	strh	r3, [r1, #0]
}
 8004a1a:	4770      	bx	lr
 8004a1c:	20000368 	.word	0x20000368

08004a20 <USBD_USR_ProductStrDescriptor>:


//--------------------------------------------------------------
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004a20:	b510      	push	{r4, lr}

    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004a22:	4c04      	ldr	r4, [pc, #16]	; (8004a34 <USBD_USR_ProductStrDescriptor+0x14>)
 8004a24:	4804      	ldr	r0, [pc, #16]	; (8004a38 <USBD_USR_ProductStrDescriptor+0x18>)
{
 8004a26:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004a28:	4621      	mov	r1, r4
 8004a2a:	f000 fb15 	bl	8005058 <USBD_GetString>
  return USBD_StrDesc;
}
 8004a2e:	4620      	mov	r0, r4
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	20001638 	.word	0x20001638
 8004a38:	08005e58 	.word	0x08005e58

08004a3c <USBD_USR_ManufacturerStrDescriptor>:

//--------------------------------------------------------------
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004a3c:	b510      	push	{r4, lr}
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004a3e:	4c04      	ldr	r4, [pc, #16]	; (8004a50 <USBD_USR_ManufacturerStrDescriptor+0x14>)
 8004a40:	4804      	ldr	r0, [pc, #16]	; (8004a54 <USBD_USR_ManufacturerStrDescriptor+0x18>)
{
 8004a42:	460a      	mov	r2, r1
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004a44:	4621      	mov	r1, r4
 8004a46:	f000 fb07 	bl	8005058 <USBD_GetString>
  return USBD_StrDesc;
}
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop
 8004a50:	20001638 	.word	0x20001638
 8004a54:	08005e74 	.word	0x08005e74

08004a58 <USBD_USR_SerialStrDescriptor>:

//--------------------------------------------------------------
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004a58:	b510      	push	{r4, lr}

    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8004a5a:	4c04      	ldr	r4, [pc, #16]	; (8004a6c <USBD_USR_SerialStrDescriptor+0x14>)
 8004a5c:	4804      	ldr	r0, [pc, #16]	; (8004a70 <USBD_USR_SerialStrDescriptor+0x18>)
{
 8004a5e:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8004a60:	4621      	mov	r1, r4
 8004a62:	f000 faf9 	bl	8005058 <USBD_GetString>
  return USBD_StrDesc;
}
 8004a66:	4620      	mov	r0, r4
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20001638 	.word	0x20001638
 8004a70:	08005e84 	.word	0x08005e84

08004a74 <USBD_USR_ConfigStrDescriptor>:

//--------------------------------------------------------------
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004a74:	b510      	push	{r4, lr}

    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8004a76:	4c04      	ldr	r4, [pc, #16]	; (8004a88 <USBD_USR_ConfigStrDescriptor+0x14>)
 8004a78:	4804      	ldr	r0, [pc, #16]	; (8004a8c <USBD_USR_ConfigStrDescriptor+0x18>)
{
 8004a7a:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	f000 faeb 	bl	8005058 <USBD_GetString>

  return USBD_StrDesc;  
}
 8004a82:	4620      	mov	r0, r4
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	20001638 	.word	0x20001638
 8004a8c:	08005e94 	.word	0x08005e94

08004a90 <USBD_USR_InterfaceStrDescriptor>:


//--------------------------------------------------------------
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004a90:	b510      	push	{r4, lr}

    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004a92:	4c04      	ldr	r4, [pc, #16]	; (8004aa4 <USBD_USR_InterfaceStrDescriptor+0x14>)
 8004a94:	4804      	ldr	r0, [pc, #16]	; (8004aa8 <USBD_USR_InterfaceStrDescriptor+0x18>)
{
 8004a96:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004a98:	4621      	mov	r1, r4
 8004a9a:	f000 fadd 	bl	8005058 <USBD_GetString>

  return USBD_StrDesc;  
}
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20001638 	.word	0x20001638
 8004aa8:	08005ea8 	.word	0x08005ea8

08004aac <USBD_CtlSendData>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004aac:	b508      	push	{r3, lr}
 8004aae:	4613      	mov	r3, r2
 8004ab0:	460a      	mov	r2, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8004ab2:	2102      	movs	r1, #2
  pdev->dev.in_ep[0].rem_data_len   = len;
 8004ab4:	e9c0 334e 	strd	r3, r3, [r0, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8004ab8:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8004abc:	2100      	movs	r1, #0
 8004abe:	f7ff fdb9 	bl	8004634 <DCD_EP_Tx>
 
  return ret;
}
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	bd08      	pop	{r3, pc}
 8004ac6:	bf00      	nop

08004ac8 <USBD_CtlContinueSendData>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004ac8:	b508      	push	{r3, lr}
 8004aca:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8004acc:	460a      	mov	r2, r1
 8004ace:	2100      	movs	r1, #0
 8004ad0:	f7ff fdb0 	bl	8004634 <DCD_EP_Tx>
  
  
  return ret;
}
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	bd08      	pop	{r3, pc}

08004ad8 <USBD_CtlPrepareRx>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004ad8:	b508      	push	{r3, lr}
 8004ada:	4613      	mov	r3, r2
 8004adc:	460a      	mov	r2, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.out_ep[0].total_data_len = len;
  pdev->dev.out_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 8004ade:	2103      	movs	r1, #3
  pdev->dev.out_ep[0].rem_data_len   = len;
 8004ae0:	e9c0 33e4 	strd	r3, r3, [r0, #912]	; 0x390
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 8004ae4:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
  
  DCD_EP_PrepareRx (pdev,
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f7ff fd7d 	bl	80045e8 <DCD_EP_PrepareRx>
                    pbuf,
                    len);
  

  return ret;
}
 8004aee:	2000      	movs	r0, #0
 8004af0:	bd08      	pop	{r3, pc}
 8004af2:	bf00      	nop

08004af4 <USBD_CtlContinueRx>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004af4:	b508      	push	{r3, lr}
 8004af6:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 8004af8:	460a      	mov	r2, r1
 8004afa:	2100      	movs	r1, #0
 8004afc:	f7ff fd74 	bl	80045e8 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 8004b00:	2000      	movs	r0, #0
 8004b02:	bd08      	pop	{r3, pc}

08004b04 <USBD_CtlSendStatus>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8004b04:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8004b06:	2300      	movs	r3, #0
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8004b08:	2104      	movs	r1, #4
{
 8004b0a:	4604      	mov	r4, r0
  DCD_EP_Tx (pdev,
 8004b0c:	461a      	mov	r2, r3
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8004b0e:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
  DCD_EP_Tx (pdev,
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7ff fd8e 	bl	8004634 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7ff faeb 	bl	80040f4 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8004b1e:	2000      	movs	r0, #0
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	bf00      	nop

08004b24 <USBD_CtlReceiveStatus>:

//--------------------------------------------------------------
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8004b24:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8004b26:	2300      	movs	r3, #0
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8004b28:	2105      	movs	r1, #5
{
 8004b2a:	4604      	mov	r4, r0
  DCD_EP_PrepareRx ( pdev,
 8004b2c:	461a      	mov	r2, r3
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8004b2e:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
  DCD_EP_PrepareRx ( pdev,
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7ff fd58 	bl	80045e8 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff fadb 	bl	80040f4 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8004b3e:	2000      	movs	r0, #0
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop

08004b44 <USBD_StdDevReq>:
static uint8_t USBD_GetLen(uint8_t *buf);


//--------------------------------------------------------------
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8004b44:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004b46:	784b      	ldrb	r3, [r1, #1]
{
 8004b48:	b082      	sub	sp, #8
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	4605      	mov	r5, r0
  switch (req->bRequest) 
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	d813      	bhi.n	8004b7a <USBD_StdDevReq+0x36>
 8004b52:	e8df f003 	tbb	[pc, r3]
 8004b56:	4231      	.short	0x4231
 8004b58:	22125712 	.word	0x22125712
 8004b5c:	05871270 	.word	0x05871270
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004b60:	7889      	ldrb	r1, [r1, #2]
 8004b62:	4eab      	ldr	r6, [pc, #684]	; (8004e10 <USBD_StdDevReq+0x2cc>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8004b64:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8004b66:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8004b68:	d807      	bhi.n	8004b7a <USBD_StdDevReq+0x36>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8004b6a:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	f000 80b7 	beq.w	8004ce2 <USBD_StdDevReq+0x19e>
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	f000 80a1 	beq.w	8004cbc <USBD_StdDevReq+0x178>

//--------------------------------------------------------------
void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  if((req->bmRequest & 0x80) == 0x80)
 8004b7a:	f994 3000 	ldrsb.w	r3, [r4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db01      	blt.n	8004b86 <USBD_StdDevReq+0x42>
  {
    DCD_EP_Stall(pdev , 0x80);
  }
  else 
  {
    if(req->wLength == 0)
 8004b82:	88e3      	ldrh	r3, [r4, #6]
 8004b84:	b99b      	cbnz	r3, 8004bae <USBD_StdDevReq+0x6a>
    DCD_EP_Stall(pdev , 0x80);
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f7ff fd75 	bl	8004678 <DCD_EP_Stall>
    else
    {
      DCD_EP_Stall(pdev , 0);
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7ff fab0 	bl	80040f4 <USB_OTG_EP0_OutStart>
}
 8004b94:	2000      	movs	r0, #0
 8004b96:	b002      	add	sp, #8
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004b9a:	888b      	ldrh	r3, [r1, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ec      	bne.n	8004b7a <USBD_StdDevReq+0x36>
 8004ba0:	88cb      	ldrh	r3, [r1, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d073      	beq.n	8004c8e <USBD_StdDevReq+0x14a>
  if((req->bmRequest & 0x80) == 0x80)
 8004ba6:	f994 3000 	ldrsb.w	r3, [r4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dbeb      	blt.n	8004b86 <USBD_StdDevReq+0x42>
      DCD_EP_Stall(pdev , 0);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7ff fd61 	bl	8004678 <DCD_EP_Stall>
 8004bb6:	e7ea      	b.n	8004b8e <USBD_StdDevReq+0x4a>
  switch (pdev->dev.device_status) 
 8004bb8:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004bbc:	3b02      	subs	r3, #2
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d8db      	bhi.n	8004b7a <USBD_StdDevReq+0x36>
    if (pdev->dev.DevRemoteWakeup) 
 8004bc2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8004bc6:	4993      	ldr	r1, [pc, #588]	; (8004e14 <USBD_StdDevReq+0x2d0>)
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2303      	movne	r3, #3
 8004bce:	2301      	moveq	r3, #1
    USBD_CtlSendData (pdev, 
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	f7ff ff6a 	bl	8004aac <USBD_CtlSendData>
    break;
 8004bd8:	e7dc      	b.n	8004b94 <USBD_StdDevReq+0x50>
  switch (pdev->dev.device_status)
 8004bda:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004bde:	3b02      	subs	r3, #2
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d8ca      	bhi.n	8004b7a <USBD_StdDevReq+0x36>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004be4:	884b      	ldrh	r3, [r1, #2]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d1d4      	bne.n	8004b94 <USBD_StdDevReq+0x50>
      pdev->dev.class_cb->Setup (pdev, req);   
 8004bea:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
      pdev->dev.DevRemoteWakeup = 0; 
 8004bee:	2200      	movs	r2, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 8004bf0:	689b      	ldr	r3, [r3, #8]
      pdev->dev.DevRemoteWakeup = 0; 
 8004bf2:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f7ff ff81 	bl	8004b04 <USBD_CtlSendStatus>
  return ret;
 8004c02:	e7c7      	b.n	8004b94 <USBD_StdDevReq+0x50>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c04:	884b      	ldrh	r3, [r1, #2]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f000 812c 	beq.w	8004e64 <USBD_StdDevReq+0x320>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d1c1      	bne.n	8004b94 <USBD_StdDevReq+0x50>
           ((req->wIndex & 0xFF) == 0))
 8004c10:	888b      	ldrh	r3, [r1, #4]
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d1bd      	bne.n	8004b94 <USBD_StdDevReq+0x50>
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8004c18:	6941      	ldr	r1, [r0, #20]
    switch (test_mode) 
 8004c1a:	0a1b      	lsrs	r3, r3, #8
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8004c1c:	684a      	ldr	r2, [r1, #4]
    switch (test_mode) 
 8004c1e:	3b01      	subs	r3, #1
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8004c20:	4610      	mov	r0, r2
    switch (test_mode) 
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	f200 8108 	bhi.w	8004e38 <USBD_StdDevReq+0x2f4>
 8004c28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c2c:	0108010d 	.word	0x0108010d
 8004c30:	01170102 	.word	0x01170102
 8004c34:	0112      	.short	0x0112
  switch (req->wValue >> 8)
 8004c36:	884a      	ldrh	r2, [r1, #2]
 8004c38:	0a13      	lsrs	r3, r2, #8
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d89c      	bhi.n	8004b7a <USBD_StdDevReq+0x36>
 8004c40:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <USBD_StdDevReq+0x104>)
 8004c42:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004d87 	.word	0x08004d87
 8004c4c:	08004d5b 	.word	0x08004d5b
 8004c50:	08004d49 	.word	0x08004d49
 8004c54:	08004b7b 	.word	0x08004b7b
 8004c58:	08004b7b 	.word	0x08004b7b
 8004c5c:	08004d07 	.word	0x08004d07
 8004c60:	08004da7 	.word	0x08004da7
  if (req->wLength != 1) 
 8004c64:	88ca      	ldrh	r2, [r1, #6]
 8004c66:	2a01      	cmp	r2, #1
 8004c68:	d006      	beq.n	8004c78 <USBD_StdDevReq+0x134>
  if((req->bmRequest & 0x80) == 0x80)
 8004c6a:	f991 3000 	ldrsb.w	r3, [r1]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	db89      	blt.n	8004b86 <USBD_StdDevReq+0x42>
    if(req->wLength == 0)
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d087      	beq.n	8004b86 <USBD_StdDevReq+0x42>
 8004c76:	e79a      	b.n	8004bae <USBD_StdDevReq+0x6a>
    switch (pdev->dev.device_status )  
 8004c78:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d03e      	beq.n	8004cfe <USBD_StdDevReq+0x1ba>
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d190      	bne.n	8004ba6 <USBD_StdDevReq+0x62>
      USBD_CtlSendData (pdev, 
 8004c84:	f500 718a 	add.w	r1, r0, #276	; 0x114
 8004c88:	f7ff ff10 	bl	8004aac <USBD_CtlSendData>
      break;
 8004c8c:	e782      	b.n	8004b94 <USBD_StdDevReq+0x50>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004c8e:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004c92:	884c      	ldrh	r4, [r1, #2]
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	f43f af76 	beq.w	8004b86 <USBD_StdDevReq+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004c9a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      pdev->dev.device_address = dev_addr;
 8004c9e:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
      DCD_EP_SetAddress(pdev, dev_addr);               
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	f7ff fd30 	bl	8004708 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7ff ff2b 	bl	8004b04 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8004cae:	2c00      	cmp	r4, #0
 8004cb0:	f000 80de 	beq.w	8004e70 <USBD_StdDevReq+0x32c>
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f885 3116 	strb.w	r3, [r5, #278]	; 0x116
 8004cba:	e76b      	b.n	8004b94 <USBD_StdDevReq+0x50>
      if (cfgidx == 0) 
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	f000 80db 	beq.w	8004e78 <USBD_StdDevReq+0x334>
      else  if (cfgidx != pdev->dev.device_config) 
 8004cc2:	f890 1114 	ldrb.w	r1, [r0, #276]	; 0x114
 8004cc6:	2901      	cmp	r1, #1
 8004cc8:	d098      	beq.n	8004bfc <USBD_StdDevReq+0xb8>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8004cca:	f7ff fe95 	bl	80049f8 <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 8004cce:	7831      	ldrb	r1, [r6, #0]
 8004cd0:	f885 1114 	strb.w	r1, [r5, #276]	; 0x114
        USBD_SetCfg(pdev , cfgidx);
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f7ff fe83 	bl	80049e0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f7ff ff12 	bl	8004b04 <USBD_CtlSendStatus>
 8004ce0:	e758      	b.n	8004b94 <USBD_StdDevReq+0x50>
      if (cfgidx) 
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	d08a      	beq.n	8004bfc <USBD_StdDevReq+0xb8>
        pdev->dev.device_config = cfgidx;
 8004ce6:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8004ce8:	2303      	movs	r3, #3
        pdev->dev.device_config = cfgidx;
 8004cea:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8004cee:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
        USBD_SetCfg(pdev , cfgidx);
 8004cf2:	f7ff fe75 	bl	80049e0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7ff ff04 	bl	8004b04 <USBD_CtlSendStatus>
 8004cfc:	e74a      	b.n	8004b94 <USBD_StdDevReq+0x50>
      USBD_CtlSendData (pdev, 
 8004cfe:	4946      	ldr	r1, [pc, #280]	; (8004e18 <USBD_StdDevReq+0x2d4>)
 8004d00:	f7ff fed4 	bl	8004aac <USBD_CtlSendData>
      break;
 8004d04:	e746      	b.n	8004b94 <USBD_StdDevReq+0x50>
	if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )
 8004d06:	7880      	ldrb	r0, [r0, #2]
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f47f af36 	bne.w	8004b7a <USBD_StdDevReq+0x36>
	  pbuf   = (uint8_t *)pdev->dev.class_cb->GetHSConfigDescriptor(pdev->cfg.speed, &len);
 8004d0e:	f8d5 35e4 	ldr.w	r3, [r5, #1508]	; 0x5e4
 8004d12:	f10d 0106 	add.w	r1, sp, #6
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	4798      	blx	r3
 8004d1a:	4603      	mov	r3, r0
	  USBD_DeviceQualifierDesc[4]= pbuf[14];
 8004d1c:	483f      	ldr	r0, [pc, #252]	; (8004e1c <USBD_StdDevReq+0x2d8>)
 8004d1e:	7b9a      	ldrb	r2, [r3, #14]
	  USBD_DeviceQualifierDesc[5]= pbuf[15];
 8004d20:	7bd9      	ldrb	r1, [r3, #15]
	  USBD_DeviceQualifierDesc[6]= pbuf[16];
 8004d22:	7c1b      	ldrb	r3, [r3, #16]
 8004d24:	7183      	strb	r3, [r0, #6]
	  USBD_DeviceQualifierDesc[4]= pbuf[14];
 8004d26:	7102      	strb	r2, [r0, #4]
  if((len != 0)&& (req->wLength != 0))
 8004d28:	88e2      	ldrh	r2, [r4, #6]
	  USBD_DeviceQualifierDesc[5]= pbuf[15];
 8004d2a:	7141      	strb	r1, [r0, #5]
	  break;
 8004d2c:	230a      	movs	r3, #10
  if((len != 0)&& (req->wLength != 0))
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	f43f af30 	beq.w	8004b94 <USBD_StdDevReq+0x50>
    len = MIN(len , req->wLength);
 8004d34:	429a      	cmp	r2, r3
 8004d36:	bf28      	it	cs
 8004d38:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	4628      	mov	r0, r5
    len = MIN(len , req->wLength);
 8004d3e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8004d42:	f7ff feb3 	bl	8004aac <USBD_CtlSendData>
 8004d46:	e725      	b.n	8004b94 <USBD_StdDevReq+0x50>
    switch ((uint8_t)(req->wValue))
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	2a05      	cmp	r2, #5
 8004d4c:	f63f af15 	bhi.w	8004b7a <USBD_StdDevReq+0x36>
 8004d50:	e8df f002 	tbb	[pc, r2]
 8004d54:	464e5666 	.word	0x464e5666
 8004d58:	363e      	.short	0x363e
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetHSConfigDescriptor(pdev->cfg.speed, &len);
 8004d5a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8004d5e:	7880      	ldrb	r0, [r0, #2]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f10d 0106 	add.w	r1, sp, #6
 8004d66:	4798      	blx	r3
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 8004d68:	78ab      	ldrb	r3, [r5, #2]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	f000 8091 	beq.w	8004e92 <USBD_StdDevReq+0x34e>
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d70:	2302      	movs	r3, #2
 8004d72:	7043      	strb	r3, [r0, #1]
    pdev->dev.pConfig_descriptor = pbuf;    
 8004d74:	f8c5 05f8 	str.w	r0, [r5, #1528]	; 0x5f8
  if((len != 0)&& (req->wLength != 0))
 8004d78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f43f af09 	beq.w	8004b94 <USBD_StdDevReq+0x50>
 8004d82:	88e2      	ldrh	r2, [r4, #6]
 8004d84:	e7d3      	b.n	8004d2e <USBD_StdDevReq+0x1ea>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8004d86:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004d8a:	7880      	ldrb	r0, [r0, #2]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f10d 0106 	add.w	r1, sp, #6
 8004d92:	4798      	blx	r3
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8004d94:	88e2      	ldrh	r2, [r4, #6]
 8004d96:	2a40      	cmp	r2, #64	; 0x40
 8004d98:	d079      	beq.n	8004e8e <USBD_StdDevReq+0x34a>
 8004d9a:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d1ea      	bne.n	8004d78 <USBD_StdDevReq+0x234>
 8004da2:	2308      	movs	r3, #8
  if((len != 0)&& (req->wLength != 0))
 8004da4:	e7c3      	b.n	8004d2e <USBD_StdDevReq+0x1ea>
	if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )
 8004da6:	7880      	ldrb	r0, [r0, #2]
 8004da8:	2800      	cmp	r0, #0
 8004daa:	f47f aee6 	bne.w	8004b7a <USBD_StdDevReq+0x36>
	  pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 8004dae:	f8d5 35e4 	ldr.w	r3, [r5, #1508]	; 0x5e4
 8004db2:	f10d 0106 	add.w	r1, sp, #6
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4798      	blx	r3
	  pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004dba:	2307      	movs	r3, #7
 8004dbc:	7043      	strb	r3, [r0, #1]
	  break;
 8004dbe:	e7db      	b.n	8004d78 <USBD_StdDevReq+0x234>
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8004dc0:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004dc4:	7880      	ldrb	r0, [r0, #2]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f10d 0106 	add.w	r1, sp, #6
 8004dcc:	4798      	blx	r3
      break;
 8004dce:	e7d3      	b.n	8004d78 <USBD_StdDevReq+0x234>
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8004dd0:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004dd4:	7880      	ldrb	r0, [r0, #2]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f10d 0106 	add.w	r1, sp, #6
 8004ddc:	4798      	blx	r3
      break;
 8004dde:	e7cb      	b.n	8004d78 <USBD_StdDevReq+0x234>
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8004de0:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004de4:	7880      	ldrb	r0, [r0, #2]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f10d 0106 	add.w	r1, sp, #6
 8004dec:	4798      	blx	r3
      break;
 8004dee:	e7c3      	b.n	8004d78 <USBD_StdDevReq+0x234>
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8004df0:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004df4:	7880      	ldrb	r0, [r0, #2]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f10d 0106 	add.w	r1, sp, #6
 8004dfc:	4798      	blx	r3
      break;
 8004dfe:	e7bb      	b.n	8004d78 <USBD_StdDevReq+0x234>
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8004e00:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004e04:	7880      	ldrb	r0, [r0, #2]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f10d 0106 	add.w	r1, sp, #6
 8004e0c:	4798      	blx	r3
      break;
 8004e0e:	e7b3      	b.n	8004d78 <USBD_StdDevReq+0x234>
 8004e10:	20001684 	.word	0x20001684
 8004e14:	20001678 	.word	0x20001678
 8004e18:	2000167c 	.word	0x2000167c
 8004e1c:	2000035c 	.word	0x2000035c
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8004e20:	f8d0 35f4 	ldr.w	r3, [r0, #1524]	; 0x5f4
 8004e24:	7880      	ldrb	r0, [r0, #2]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f10d 0106 	add.w	r1, sp, #6
 8004e2c:	4798      	blx	r3
      break;
 8004e2e:	e7a3      	b.n	8004d78 <USBD_StdDevReq+0x234>
      dctl.b.tstctl = 3;
 8004e30:	2303      	movs	r3, #3
 8004e32:	f363 1006 	bfi	r0, r3, #4, #3
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8004e36:	4602      	mov	r2, r0
 8004e38:	604a      	str	r2, [r1, #4]
    USBD_CtlSendStatus(pdev);
 8004e3a:	e6df      	b.n	8004bfc <USBD_StdDevReq+0xb8>
      dctl.b.tstctl = 2;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f363 1006 	bfi	r0, r3, #4, #3
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8004e42:	4602      	mov	r2, r0
      break;
 8004e44:	e7f8      	b.n	8004e38 <USBD_StdDevReq+0x2f4>
      dctl.b.tstctl = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f363 1006 	bfi	r0, r3, #4, #3
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8004e4c:	4602      	mov	r2, r0
      break;
 8004e4e:	e7f3      	b.n	8004e38 <USBD_StdDevReq+0x2f4>
      dctl.b.tstctl = 5;
 8004e50:	2305      	movs	r3, #5
 8004e52:	f363 1006 	bfi	r0, r3, #4, #3
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8004e56:	4602      	mov	r2, r0
      break;
 8004e58:	e7ee      	b.n	8004e38 <USBD_StdDevReq+0x2f4>
      dctl.b.tstctl = 4;
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	f363 1006 	bfi	r0, r3, #4, #3
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8004e60:	4602      	mov	r2, r0
      break;
 8004e62:	e7e9      	b.n	8004e38 <USBD_StdDevReq+0x2f4>
    pdev->dev.class_cb->Setup (pdev, req);   
 8004e64:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
    pdev->dev.DevRemoteWakeup = 1;  
 8004e68:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 8004e6c:	6893      	ldr	r3, [r2, #8]
 8004e6e:	e6c2      	b.n	8004bf6 <USBD_StdDevReq+0xb2>
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8004e70:	2301      	movs	r3, #1
 8004e72:	f885 3116 	strb.w	r3, [r5, #278]	; 0x116
 8004e76:	e68d      	b.n	8004b94 <USBD_StdDevReq+0x50>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
        pdev->dev.device_config = cfgidx;          
 8004e7e:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
        USBD_ClrCfg(pdev , cfgidx);
 8004e82:	f7ff fdb9 	bl	80049f8 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8004e86:	4628      	mov	r0, r5
 8004e88:	f7ff fe3c 	bl	8004b04 <USBD_CtlSendStatus>
 8004e8c:	e682      	b.n	8004b94 <USBD_StdDevReq+0x50>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	e750      	b.n	8004d34 <USBD_StdDevReq+0x1f0>
    if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
 8004e92:	7a2b      	ldrb	r3, [r5, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	f47f af6b 	bne.w	8004d70 <USBD_StdDevReq+0x22c>
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
 8004e9a:	f8d5 25e4 	ldr.w	r2, [r5, #1508]	; 0x5e4
 8004e9e:	f10d 0106 	add.w	r1, sp, #6
 8004ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	4790      	blx	r2
 8004ea8:	e762      	b.n	8004d70 <USBD_StdDevReq+0x22c>
 8004eaa:	bf00      	nop

08004eac <USBD_StdItfReq>:
{
 8004eac:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev.device_status) 
 8004eae:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004eb2:	2b03      	cmp	r3, #3
{
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
  switch (pdev->dev.device_status) 
 8004eb8:	d10d      	bne.n	8004ed6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8004eba:	790b      	ldrb	r3, [r1, #4]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d80a      	bhi.n	8004ed6 <USBD_StdItfReq+0x2a>
      pdev->dev.class_cb->Setup (pdev, req); 
 8004ec0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004ec8:	88eb      	ldrh	r3, [r5, #6]
 8004eca:	b98b      	cbnz	r3, 8004ef0 <USBD_StdItfReq+0x44>
         USBD_CtlSendStatus(pdev);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7ff fe19 	bl	8004b04 <USBD_CtlSendStatus>
}
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
  if((req->bmRequest & 0x80) == 0x80)
 8004ed6:	f995 3000 	ldrsb.w	r3, [r5]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db0a      	blt.n	8004ef4 <USBD_StdItfReq+0x48>
    if(req->wLength == 0)
 8004ede:	88eb      	ldrh	r3, [r5, #6]
 8004ee0:	b143      	cbz	r3, 8004ef4 <USBD_StdItfReq+0x48>
      DCD_EP_Stall(pdev , 0);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fbc7 	bl	8004678 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff f902 	bl	80040f4 <USB_OTG_EP0_OutStart>
}
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
    DCD_EP_Stall(pdev , 0x80);
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fbbe 	bl	8004678 <DCD_EP_Stall>
 8004efc:	e7f5      	b.n	8004eea <USBD_StdItfReq+0x3e>
 8004efe:	bf00      	nop

08004f00 <USBD_StdEPReq>:
{
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8004f04:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 8004f06:	7863      	ldrb	r3, [r4, #1]
 8004f08:	2b01      	cmp	r3, #1
{
 8004f0a:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);   
 8004f0c:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8004f0e:	d004      	beq.n	8004f1a <USBD_StdEPReq+0x1a>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d035      	beq.n	8004f80 <USBD_StdEPReq+0x80>
 8004f14:	b1bb      	cbz	r3, 8004f46 <USBD_StdEPReq+0x46>
}
 8004f16:	2000      	movs	r0, #0
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev.device_status) 
 8004f1a:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d015      	beq.n	8004f4e <USBD_StdEPReq+0x4e>
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d043      	beq.n	8004fae <USBD_StdEPReq+0xae>
  if((req->bmRequest & 0x80) == 0x80)
 8004f26:	f994 3000 	ldrsb.w	r3, [r4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db47      	blt.n	8004fbe <USBD_StdEPReq+0xbe>
    if(req->wLength == 0)
 8004f2e:	88e3      	ldrh	r3, [r4, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d044      	beq.n	8004fbe <USBD_StdEPReq+0xbe>
      DCD_EP_Stall(pdev , 0);
 8004f34:	2100      	movs	r1, #0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7ff fb9e 	bl	8004678 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f7ff f8d9 	bl	80040f4 <USB_OTG_EP0_OutStart>
}
 8004f42:	2000      	movs	r0, #0
 8004f44:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev.device_status) 
 8004f46:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d104      	bne.n	8004f58 <USBD_StdEPReq+0x58>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f4e:	064a      	lsls	r2, r1, #25
 8004f50:	d0e1      	beq.n	8004f16 <USBD_StdEPReq+0x16>
        DCD_EP_Stall(pdev , ep_addr);
 8004f52:	f7ff fb91 	bl	8004678 <DCD_EP_Stall>
 8004f56:	e7de      	b.n	8004f16 <USBD_StdEPReq+0x16>
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d1e4      	bne.n	8004f26 <USBD_StdEPReq+0x26>
      if ((ep_addr & 0x80)== 0x80)
 8004f5c:	0613      	lsls	r3, r2, #24
 8004f5e:	d433      	bmi.n	8004fc8 <USBD_StdEPReq+0xc8>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8004f60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004f64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8004f68:	f891 3376 	ldrb.w	r3, [r1, #886]	; 0x376
 8004f6c:	3b00      	subs	r3, #0
 8004f6e:	bf18      	it	ne
 8004f70:	2301      	movne	r3, #1
          USBD_ep_status = 0x0000;  
 8004f72:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <USBD_StdEPReq+0xe0>)
      USBD_CtlSendData (pdev,
 8004f74:	2202      	movs	r2, #2
 8004f76:	4628      	mov	r0, r5
          USBD_ep_status = 0x0000;  
 8004f78:	600b      	str	r3, [r1, #0]
      USBD_CtlSendData (pdev,
 8004f7a:	f7ff fd97 	bl	8004aac <USBD_CtlSendData>
      break;
 8004f7e:	e7ca      	b.n	8004f16 <USBD_StdEPReq+0x16>
    switch (pdev->dev.device_status) 
 8004f80:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d0e2      	beq.n	8004f4e <USBD_StdEPReq+0x4e>
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d1cc      	bne.n	8004f26 <USBD_StdEPReq+0x26>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004f8c:	8863      	ldrh	r3, [r4, #2]
 8004f8e:	b91b      	cbnz	r3, 8004f98 <USBD_StdEPReq+0x98>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f90:	064a      	lsls	r2, r1, #25
 8004f92:	d001      	beq.n	8004f98 <USBD_StdEPReq+0x98>
          DCD_EP_Stall(pdev , ep_addr);
 8004f94:	f7ff fb70 	bl	8004678 <DCD_EP_Stall>
          pdev->dev.class_cb->Setup (pdev, req);
 8004f98:	f8d5 35e4 	ldr.w	r3, [r5, #1508]	; 0x5e4
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f7ff fdad 	bl	8004b04 <USBD_CtlSendStatus>
}
 8004faa:	2000      	movs	r0, #0
 8004fac:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004fae:	8863      	ldrh	r3, [r4, #2]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1b0      	bne.n	8004f16 <USBD_StdEPReq+0x16>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004fb4:	064b      	lsls	r3, r1, #25
 8004fb6:	d0f5      	beq.n	8004fa4 <USBD_StdEPReq+0xa4>
          DCD_EP_ClrStall(pdev , ep_addr);
 8004fb8:	f7ff fb7c 	bl	80046b4 <DCD_EP_ClrStall>
 8004fbc:	e7ec      	b.n	8004f98 <USBD_StdEPReq+0x98>
    DCD_EP_Stall(pdev , 0x80);
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7ff fb59 	bl	8004678 <DCD_EP_Stall>
 8004fc6:	e7b9      	b.n	8004f3c <USBD_StdEPReq+0x3c>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8004fc8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004fcc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004fd0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8004fd4:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 8004fd8:	3b00      	subs	r3, #0
 8004fda:	bf18      	it	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	e7c8      	b.n	8004f72 <USBD_StdEPReq+0x72>
 8004fe0:	20001680 	.word	0x20001680

08004fe4 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8004fe4:	f8b0 35cc 	ldrh.w	r3, [r0, #1484]	; 0x5cc
 8004fe8:	800b      	strh	r3, [r1, #0]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8004fea:	f890 c5cf 	ldrb.w	ip, [r0, #1487]	; 0x5cf
 8004fee:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 8004ff2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004ff6:	804b      	strh	r3, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8004ff8:	f890 c5d1 	ldrb.w	ip, [r0, #1489]	; 0x5d1
 8004ffc:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 8005000:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8005004:	808b      	strh	r3, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8005006:	f890 c5d3 	ldrb.w	ip, [r0, #1491]	; 0x5d3
 800500a:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 800500e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8005012:	b29b      	uxth	r3, r3
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8005014:	2201      	movs	r2, #1
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8005016:	80cb      	strh	r3, [r1, #6]
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8005018:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800501c:	f880 2115 	strb.w	r2, [r0, #277]	; 0x115
}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop

08005024 <USBD_CtlError>:
{
 8005024:	b510      	push	{r4, lr}
  if((req->bmRequest & 0x80) == 0x80)
 8005026:	f991 3000 	ldrsb.w	r3, [r1]
 800502a:	2b00      	cmp	r3, #0
{
 800502c:	4604      	mov	r4, r0
  if((req->bmRequest & 0x80) == 0x80)
 800502e:	db01      	blt.n	8005034 <USBD_CtlError+0x10>
    if(req->wLength == 0)
 8005030:	88cb      	ldrh	r3, [r1, #6]
 8005032:	b943      	cbnz	r3, 8005046 <USBD_CtlError+0x22>
    DCD_EP_Stall(pdev , 0x80);
 8005034:	4620      	mov	r0, r4
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	f7ff fb1e 	bl	8004678 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 800503c:	4620      	mov	r0, r4
}
 800503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USB_OTG_EP0_OutStart(pdev);  
 8005042:	f7ff b857 	b.w	80040f4 <USB_OTG_EP0_OutStart>
      DCD_EP_Stall(pdev , 0);
 8005046:	2100      	movs	r1, #0
 8005048:	f7ff fb16 	bl	8004678 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 800504c:	4620      	mov	r0, r4
}
 800504e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USB_OTG_EP0_OutStart(pdev);  
 8005052:	f7ff b84f 	b.w	80040f4 <USB_OTG_EP0_OutStart>
 8005056:	bf00      	nop

08005058 <USBD_GetString>:
//--------------------------------------------------------------
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc !=0)
 8005058:	b318      	cbz	r0, 80050a2 <USBD_GetString+0x4a>
//--------------------------------------------------------------
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != 0)		//NULL
 800505a:	7803      	ldrb	r3, [r0, #0]
{
 800505c:	b430      	push	{r4, r5}
    while (*buf != 0)		//NULL
 800505e:	b30b      	cbz	r3, 80050a4 <USBD_GetString+0x4c>
 8005060:	4604      	mov	r4, r0
 8005062:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 8005066:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != 0)		//NULL
 800506a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2d00      	cmp	r5, #0
 8005072:	d1f8      	bne.n	8005066 <USBD_GetString+0xe>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005074:	3301      	adds	r3, #1
 8005076:	005b      	lsls	r3, r3, #1
    unicode[idx++] = *len;
 8005078:	b2dc      	uxtb	r4, r3
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800507a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800507c:	2303      	movs	r3, #3
    unicode[idx++] = *len;
 800507e:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005080:	704b      	strb	r3, [r1, #1]
    while (*desc != 0)
 8005082:	7804      	ldrb	r4, [r0, #0]
 8005084:	b15c      	cbz	r4, 800509e <USBD_GetString+0x46>
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005086:	2302      	movs	r3, #2
      unicode[idx++] =  0x00;
 8005088:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8005090:	548d      	strb	r5, [r1, r2]
    while (*desc != 0)
 8005092:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0x00;
 8005096:	3302      	adds	r3, #2
 8005098:	b2db      	uxtb	r3, r3
    while (*desc != 0)
 800509a:	2c00      	cmp	r4, #0
 800509c:	d1f5      	bne.n	800508a <USBD_GetString+0x32>
}
 800509e:	bc30      	pop	{r4, r5}
 80050a0:	4770      	bx	lr
 80050a2:	4770      	bx	lr
    while (*buf != 0)		//NULL
 80050a4:	2402      	movs	r4, #2
 80050a6:	4623      	mov	r3, r4
 80050a8:	e7e7      	b.n	800507a <USBD_GetString+0x22>
 80050aa:	bf00      	nop

080050ac <USBD_USR_Init>:
// wird einmal aufgerufen beim Init der USB-Schnittstelle
//--------------------------------------------------------------
void USBD_USR_Init(void)
{  
//  USB_HID_STATUS=USB_HID_DETACHED;
}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <USBD_USR_DeviceReset>:
// (VBUS_SENSING)
//--------------------------------------------------------------
void USBD_USR_DeviceReset(uint8_t speed )
{
//  USB_HID_STATUS=USB_HID_DETACHED;
}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <USBD_USR_DeviceResumed>:
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop

080050b8 <USBD_USR_DeviceConfigured>:
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop

080050bc <USBD_USR_DeviceConnected>:
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <USBD_USR_DeviceDisconnected>:
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop

080050c4 <USBD_USR_DeviceSuspended>:
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop

080050c8 <CameraStart>:
		"cam tweak\r"
};
extern char ReceiveCmd[50];

void CameraStart(void)
{
 80050c8:	b530      	push	{r4, r5, lr}
	HAL_UART_Transmit(&huart2,(uint8_t *)Cmd[CAM_SYCH_MODE_EN],strlen(Cmd[CAM_SYCH_MODE_EN]),100);
 80050ca:	4d0f      	ldr	r5, [pc, #60]	; (8005108 <CameraStart+0x40>)
 80050cc:	4c0f      	ldr	r4, [pc, #60]	; (800510c <CameraStart+0x44>)
 80050ce:	6929      	ldr	r1, [r5, #16]
{
 80050d0:	b083      	sub	sp, #12
	HAL_UART_Transmit(&huart2,(uint8_t *)Cmd[CAM_SYCH_MODE_EN],strlen(Cmd[CAM_SYCH_MODE_EN]),100);
 80050d2:	4608      	mov	r0, r1
 80050d4:	9101      	str	r1, [sp, #4]
 80050d6:	f7fb f895 	bl	8000204 <strlen>
 80050da:	9901      	ldr	r1, [sp, #4]
 80050dc:	b282      	uxth	r2, r0
 80050de:	2364      	movs	r3, #100	; 0x64
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7fc feaf 	bl	8001e44 <HAL_UART_Transmit>
	HAL_Delay(40);
 80050e6:	2028      	movs	r0, #40	; 0x28
 80050e8:	f7fb fb22 	bl	8000730 <HAL_Delay>
	HAL_UART_Transmit(&huart2,(uint8_t *)Cmd[CAM_DIG_VIDEO_OUT],strlen(Cmd[CAM_DIG_VIDEO_OUT]),100);
 80050ec:	68e9      	ldr	r1, [r5, #12]
 80050ee:	9101      	str	r1, [sp, #4]
 80050f0:	4608      	mov	r0, r1
 80050f2:	f7fb f887 	bl	8000204 <strlen>
 80050f6:	9901      	ldr	r1, [sp, #4]
 80050f8:	b282      	uxth	r2, r0
 80050fa:	2364      	movs	r3, #100	; 0x64
 80050fc:	4620      	mov	r0, r4
}
 80050fe:	b003      	add	sp, #12
 8005100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_UART_Transmit(&huart2,(uint8_t *)Cmd[CAM_DIG_VIDEO_OUT],strlen(Cmd[CAM_DIG_VIDEO_OUT]),100);
 8005104:	f7fc be9e 	b.w	8001e44 <HAL_UART_Transmit>
 8005108:	200003a8 	.word	0x200003a8
 800510c:	20001880 	.word	0x20001880

08005110 <CameraInit>:

void CameraInit(void)
{
	pcamera->pBufCmdResponse = ResponseCmdFromCam;
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <CameraInit+0x14>)
 8005112:	4805      	ldr	r0, [pc, #20]	; (8005128 <CameraInit+0x18>)
 8005114:	681b      	ldr	r3, [r3, #0]
	pcamera->pBufCmdReceived = ReceiveCmdToCam;
 8005116:	4905      	ldr	r1, [pc, #20]	; (800512c <CameraInit+0x1c>)
	pcamera->Start = CameraStart;
 8005118:	4a05      	ldr	r2, [pc, #20]	; (8005130 <CameraInit+0x20>)
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
	pcamera->pBufCmdReceived = ReceiveCmdToCam;
 800511c:	e9c3 0105 	strd	r0, r1, [r3, #20]
}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	200003d4 	.word	0x200003d4
 8005128:	200016e8 	.word	0x200016e8
 800512c:	200016b4 	.word	0x200016b4
 8005130:	080050c9 	.word	0x080050c9

08005134 <ParseResponseToCmd>:
	memcpy(str1+strlen(str1),str2,size);
	CDC_Transmit_HS((uint8_t *)str1,strlen(str1));
}

uint8_t ParseResponseToCmd(void)
{
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char temp[50] = "Done ";
 8005138:	4b85      	ldr	r3, [pc, #532]	; (8005350 <ParseResponseToCmd+0x21c>)
	if(strcmp(Cmd[CAM_EN],pcamera->pBufCmdReceived)==0)
 800513a:	4e86      	ldr	r6, [pc, #536]	; (8005354 <ParseResponseToCmd+0x220>)
	char temp[50] = "Done ";
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	889b      	ldrh	r3, [r3, #4]
	if(strcmp(Cmd[CAM_EN],pcamera->pBufCmdReceived)==0)
 8005140:	4c85      	ldr	r4, [pc, #532]	; (8005358 <ParseResponseToCmd+0x224>)
{
 8005142:	b090      	sub	sp, #64	; 0x40
	char temp[50] = "Done ";
 8005144:	2100      	movs	r1, #0
 8005146:	9003      	str	r0, [sp, #12]
 8005148:	222c      	movs	r2, #44	; 0x2c
 800514a:	f10d 0012 	add.w	r0, sp, #18
 800514e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8005152:	f000 fe37 	bl	8005dc4 <memset>
	if(strcmp(Cmd[CAM_EN],pcamera->pBufCmdReceived)==0)
 8005156:	f8d6 8000 	ldr.w	r8, [r6]
 800515a:	6827      	ldr	r7, [r4, #0]
 800515c:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8005160:	4638      	mov	r0, r7
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f844 	bl	80001f0 <strcmp>
 8005168:	2800      	cmp	r0, #0
 800516a:	d051      	beq.n	8005210 <ParseResponseToCmd+0xdc>
		}
		ResponseToCmd(temp,Cmd[CAM_EN],strlen(Cmd[CAM_EN]));
		pcamera->CmdFrameComplit = CAM_EN;
		return 1;
	}
	if(strcmp(Cmd[CAM_DIS],pcamera->pBufCmdReceived)==0)
 800516c:	6867      	ldr	r7, [r4, #4]
 800516e:	4629      	mov	r1, r5
 8005170:	4638      	mov	r0, r7
 8005172:	f7fb f83d 	bl	80001f0 <strcmp>
 8005176:	b318      	cbz	r0, 80051c0 <ParseResponseToCmd+0x8c>
		ResponseToCmd(temp,Cmd[CAM_DIS],strlen(Cmd[CAM_DIS]));
		pcamera->CmdFrameComplit = CAM_DIS;
		pcamera->FlagFrameComplit=0;
		return 1;
	}
	if(strcmp(Cmd[CAM_INIT],pcamera->pBufCmdReceived)==0)
 8005178:	68a0      	ldr	r0, [r4, #8]
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb f838 	bl	80001f0 <strcmp>
 8005180:	2800      	cmp	r0, #0
 8005182:	f000 8090 	beq.w	80052a6 <ParseResponseToCmd+0x172>
		ResponseToCmd(temp,Cmd[CAM_INIT],strlen(Cmd[CAM_INIT]));
		pcamera->CmdFrameComplit = CAM_INIT;
		HAL_Delay(4);
		return 1;
	}
	if(strcmp(Cmd[CAM_TWEAK],pcamera->pBufCmdReceived)==0)
 8005186:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb f831 	bl	80001f0 <strcmp>
 800518e:	2800      	cmp	r0, #0
 8005190:	d065      	beq.n	800525e <ParseResponseToCmd+0x12a>
		ResponseToCmd(temp,Cmd[CAM_TWEAK],strlen(Cmd[CAM_TWEAK]));
		pcamera->CmdFrameComplit = CAM_INIT;
		HAL_Delay(CamTweak++);
		return 1;
	  }
	if(strcmp(Cmd[CAM_DRVF],pcamera->pBufCmdReceived)==0)
 8005192:	69e0      	ldr	r0, [r4, #28]
 8005194:	4629      	mov	r1, r5
 8005196:	f7fb f82b 	bl	80001f0 <strcmp>
 800519a:	2800      	cmp	r0, #0
 800519c:	f000 80a6 	beq.w	80052ec <ParseResponseToCmd+0x1b8>
			MOT_CONTROL_2_GPIO_Port->ODR &= ~MOT_CONTROL_2_Pin;
		}
		MOT_CONTROL_1_GPIO_Port->ODR |= MOT_CONTROL_1_Pin;
		return 1;
	}
	if(strcmp(Cmd[CAM_DRVN],pcamera->pBufCmdReceived)==0)
 80051a0:	6a20      	ldr	r0, [r4, #32]
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7fb f824 	bl	80001f0 <strcmp>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f000 80ae 	beq.w	800530a <ParseResponseToCmd+0x1d6>
			MOT_CONTROL_1_GPIO_Port->ODR &= ~MOT_CONTROL_1_Pin;
		}
		MOT_CONTROL_2_GPIO_Port->ODR |= MOT_CONTROL_2_Pin;
		return 1;
	}
	if(strcmp(Cmd[CAM_DRVS],pcamera->pBufCmdReceived)==0)
 80051ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7fb f81d 	bl	80001f0 <strcmp>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f000 80b6 	beq.w	8005328 <ParseResponseToCmd+0x1f4>
		{
			MOT_CONTROL_2_GPIO_Port->ODR &= ~MOT_CONTROL_2_Pin;
		}
		return 1;
	}
	return 0;
 80051bc:	2000      	movs	r0, #0
 80051be:	e024      	b.n	800520a <ParseResponseToCmd+0xd6>
		if((CAM_EN_GPIO_Port->ODR & CAM_EN_Pin))
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <ParseResponseToCmd+0x228>)
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	0492      	lsls	r2, r2, #18
 80051c6:	d50b      	bpl.n	80051e0 <ParseResponseToCmd+0xac>
			CAM_EN_GPIO_Port->ODR &= ~CAM_EN_Pin;
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ce:	615a      	str	r2, [r3, #20]
			if(!(CAM_EN_GPIO_Port->ODR & CAM_EN_Pin))
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	049d      	lsls	r5, r3, #18
 80051d4:	d404      	bmi.n	80051e0 <ParseResponseToCmd+0xac>
				CAM_ISPW_GPIO_Port->ODR &= ~CAM_ISPW_Pin;
 80051d6:	4a62      	ldr	r2, [pc, #392]	; (8005360 <ParseResponseToCmd+0x22c>)
 80051d8:	6953      	ldr	r3, [r2, #20]
 80051da:	f023 0304 	bic.w	r3, r3, #4
 80051de:	6153      	str	r3, [r2, #20]
		ResponseToCmd(temp,Cmd[CAM_DIS],strlen(Cmd[CAM_DIS]));
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7fb f80f 	bl	8000204 <strlen>
	memcpy(str1+strlen(str1),str2,size);
 80051e6:	4639      	mov	r1, r7
 80051e8:	b2c2      	uxtb	r2, r0
 80051ea:	f10d 0011 	add.w	r0, sp, #17
 80051ee:	f000 fe15 	bl	8005e1c <memcpy>
	CDC_Transmit_HS((uint8_t *)str1,strlen(str1));
 80051f2:	a803      	add	r0, sp, #12
 80051f4:	f7fb f806 	bl	8000204 <strlen>
 80051f8:	b281      	uxth	r1, r0
 80051fa:	a803      	add	r0, sp, #12
 80051fc:	f7ff faae 	bl	800475c <CDC_Transmit_HS>
		pcamera->CmdFrameComplit = CAM_DIS;
 8005200:	6833      	ldr	r3, [r6, #0]
 8005202:	2001      	movs	r0, #1
		pcamera->FlagFrameComplit=0;
 8005204:	2200      	movs	r2, #0
		pcamera->CmdFrameComplit = CAM_DIS;
 8005206:	7058      	strb	r0, [r3, #1]
		pcamera->FlagFrameComplit=0;
 8005208:	725a      	strb	r2, [r3, #9]
}
 800520a:	b010      	add	sp, #64	; 0x40
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(!(CAM_EN_GPIO_Port->ODR & CAM_EN_Pin))
 8005210:	4b52      	ldr	r3, [pc, #328]	; (800535c <ParseResponseToCmd+0x228>)
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	0490      	lsls	r0, r2, #18
 8005216:	d40b      	bmi.n	8005230 <ParseResponseToCmd+0xfc>
			CAM_EN_GPIO_Port->ODR |=CAM_EN_Pin;
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521e:	615a      	str	r2, [r3, #20]
			if(CAM_EN_GPIO_Port->ODR & CAM_EN_Pin)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	0499      	lsls	r1, r3, #18
 8005224:	d504      	bpl.n	8005230 <ParseResponseToCmd+0xfc>
				CAM_ISPW_GPIO_Port->ODR |= CAM_ISPW_Pin;
 8005226:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <ParseResponseToCmd+0x22c>)
 8005228:	6953      	ldr	r3, [r2, #20]
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6153      	str	r3, [r2, #20]
		ResponseToCmd(temp,Cmd[CAM_EN],strlen(Cmd[CAM_EN]));
 8005230:	4638      	mov	r0, r7
 8005232:	f7fa ffe7 	bl	8000204 <strlen>
	memcpy(str1+strlen(str1),str2,size);
 8005236:	4639      	mov	r1, r7
 8005238:	b2c2      	uxtb	r2, r0
 800523a:	f10d 0011 	add.w	r0, sp, #17
 800523e:	f000 fded 	bl	8005e1c <memcpy>
	CDC_Transmit_HS((uint8_t *)str1,strlen(str1));
 8005242:	a803      	add	r0, sp, #12
 8005244:	f7fa ffde 	bl	8000204 <strlen>
 8005248:	b281      	uxth	r1, r0
 800524a:	a803      	add	r0, sp, #12
 800524c:	f7ff fa86 	bl	800475c <CDC_Transmit_HS>
		pcamera->CmdFrameComplit = CAM_EN;
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	2200      	movs	r2, #0
		return 1;
 8005254:	2001      	movs	r0, #1
		pcamera->CmdFrameComplit = CAM_EN;
 8005256:	705a      	strb	r2, [r3, #1]
}
 8005258:	b010      	add	sp, #64	; 0x40
 800525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pcamera->Start();
 800525e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8005262:	4798      	blx	r3
		ResponseToCmd(temp,Cmd[CAM_TWEAK],strlen(Cmd[CAM_TWEAK]));
 8005264:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005266:	9101      	str	r1, [sp, #4]
 8005268:	4608      	mov	r0, r1
 800526a:	f7fa ffcb 	bl	8000204 <strlen>
 800526e:	4604      	mov	r4, r0
	memcpy(str1+strlen(str1),str2,size);
 8005270:	a803      	add	r0, sp, #12
 8005272:	f7fa ffc7 	bl	8000204 <strlen>
 8005276:	ab03      	add	r3, sp, #12
 8005278:	b2e2      	uxtb	r2, r4
 800527a:	4418      	add	r0, r3
 800527c:	9901      	ldr	r1, [sp, #4]
 800527e:	f000 fdcd 	bl	8005e1c <memcpy>
	CDC_Transmit_HS((uint8_t *)str1,strlen(str1));
 8005282:	a803      	add	r0, sp, #12
 8005284:	f7fa ffbe 	bl	8000204 <strlen>
 8005288:	b281      	uxth	r1, r0
 800528a:	a803      	add	r0, sp, #12
 800528c:	f7ff fa66 	bl	800475c <CDC_Transmit_HS>
		HAL_Delay(CamTweak++);
 8005290:	4b34      	ldr	r3, [pc, #208]	; (8005364 <ParseResponseToCmd+0x230>)
		pcamera->CmdFrameComplit = CAM_INIT;
 8005292:	6831      	ldr	r1, [r6, #0]
		HAL_Delay(CamTweak++);
 8005294:	7818      	ldrb	r0, [r3, #0]
		pcamera->CmdFrameComplit = CAM_INIT;
 8005296:	2402      	movs	r4, #2
		HAL_Delay(CamTweak++);
 8005298:	1c42      	adds	r2, r0, #1
		pcamera->CmdFrameComplit = CAM_INIT;
 800529a:	704c      	strb	r4, [r1, #1]
		HAL_Delay(CamTweak++);
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	f7fb fa47 	bl	8000730 <HAL_Delay>
		return 1;
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7b1      	b.n	800520a <ParseResponseToCmd+0xd6>
		pcamera->Start();
 80052a6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80052aa:	4798      	blx	r3
		ResponseToCmd(temp,Cmd[CAM_INIT],strlen(Cmd[CAM_INIT]));
 80052ac:	68a1      	ldr	r1, [r4, #8]
 80052ae:	9101      	str	r1, [sp, #4]
 80052b0:	4608      	mov	r0, r1
 80052b2:	f7fa ffa7 	bl	8000204 <strlen>
 80052b6:	4604      	mov	r4, r0
	memcpy(str1+strlen(str1),str2,size);
 80052b8:	a803      	add	r0, sp, #12
 80052ba:	f7fa ffa3 	bl	8000204 <strlen>
 80052be:	ab03      	add	r3, sp, #12
 80052c0:	b2e2      	uxtb	r2, r4
 80052c2:	9901      	ldr	r1, [sp, #4]
 80052c4:	4418      	add	r0, r3
 80052c6:	f000 fda9 	bl	8005e1c <memcpy>
	CDC_Transmit_HS((uint8_t *)str1,strlen(str1));
 80052ca:	a803      	add	r0, sp, #12
 80052cc:	f7fa ff9a 	bl	8000204 <strlen>
 80052d0:	b281      	uxth	r1, r0
 80052d2:	a803      	add	r0, sp, #12
 80052d4:	f7ff fa42 	bl	800475c <CDC_Transmit_HS>
		pcamera->CmdFrameComplit = CAM_INIT;
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	2202      	movs	r2, #2
 80052dc:	705a      	strb	r2, [r3, #1]
		HAL_Delay(4);
 80052de:	2004      	movs	r0, #4
 80052e0:	f7fb fa26 	bl	8000730 <HAL_Delay>
		return 1;
 80052e4:	2001      	movs	r0, #1
}
 80052e6:	b010      	add	sp, #64	; 0x40
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(MOT_CONTROL_2_GPIO_Port->IDR & MOT_CONTROL_2_Pin)
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <ParseResponseToCmd+0x234>)
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	0614      	lsls	r4, r2, #24
 80052f2:	d503      	bpl.n	80052fc <ParseResponseToCmd+0x1c8>
			MOT_CONTROL_2_GPIO_Port->ODR &= ~MOT_CONTROL_2_Pin;
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052fa:	615a      	str	r2, [r3, #20]
		MOT_CONTROL_1_GPIO_Port->ODR |= MOT_CONTROL_1_Pin;
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <ParseResponseToCmd+0x234>)
 80052fe:	6953      	ldr	r3, [r2, #20]
 8005300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		return 1;
 8005304:	2001      	movs	r0, #1
		MOT_CONTROL_1_GPIO_Port->ODR |= MOT_CONTROL_1_Pin;
 8005306:	6153      	str	r3, [r2, #20]
		return 1;
 8005308:	e77f      	b.n	800520a <ParseResponseToCmd+0xd6>
		if(MOT_CONTROL_1_GPIO_Port->IDR & MOT_CONTROL_1_Pin)
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <ParseResponseToCmd+0x234>)
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	0650      	lsls	r0, r2, #25
 8005310:	d503      	bpl.n	800531a <ParseResponseToCmd+0x1e6>
			MOT_CONTROL_1_GPIO_Port->ODR &= ~MOT_CONTROL_1_Pin;
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005318:	615a      	str	r2, [r3, #20]
		MOT_CONTROL_2_GPIO_Port->ODR |= MOT_CONTROL_2_Pin;
 800531a:	4a13      	ldr	r2, [pc, #76]	; (8005368 <ParseResponseToCmd+0x234>)
 800531c:	6953      	ldr	r3, [r2, #20]
 800531e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		return 1;
 8005322:	2001      	movs	r0, #1
		MOT_CONTROL_2_GPIO_Port->ODR |= MOT_CONTROL_2_Pin;
 8005324:	6153      	str	r3, [r2, #20]
		return 1;
 8005326:	e770      	b.n	800520a <ParseResponseToCmd+0xd6>
		if(MOT_CONTROL_1_GPIO_Port->IDR & MOT_CONTROL_1_Pin)
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <ParseResponseToCmd+0x234>)
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	0651      	lsls	r1, r2, #25
 800532e:	d503      	bpl.n	8005338 <ParseResponseToCmd+0x204>
			MOT_CONTROL_1_GPIO_Port->ODR &= ~MOT_CONTROL_1_Pin;
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	615a      	str	r2, [r3, #20]
		if(MOT_CONTROL_2_GPIO_Port->IDR & MOT_CONTROL_2_Pin)
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <ParseResponseToCmd+0x234>)
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	0612      	lsls	r2, r2, #24
 800533e:	d505      	bpl.n	800534c <ParseResponseToCmd+0x218>
			MOT_CONTROL_2_GPIO_Port->ODR &= ~MOT_CONTROL_2_Pin;
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
		return 1;
 8005346:	2001      	movs	r0, #1
			MOT_CONTROL_2_GPIO_Port->ODR &= ~MOT_CONTROL_2_Pin;
 8005348:	615a      	str	r2, [r3, #20]
 800534a:	e75e      	b.n	800520a <ParseResponseToCmd+0xd6>
		return 1;
 800534c:	2001      	movs	r0, #1
 800534e:	e75c      	b.n	800520a <ParseResponseToCmd+0xd6>
 8005350:	08005ebc 	.word	0x08005ebc
 8005354:	200003d4 	.word	0x200003d4
 8005358:	200003a8 	.word	0x200003a8
 800535c:	40021c00 	.word	0x40021c00
 8005360:	40020400 	.word	0x40020400
 8005364:	200003a4 	.word	0x200003a4
 8005368:	40022000 	.word	0x40022000

0800536c <GrabCamFrame>:

uint8_t GrabCamFrame(void)
{
 800536c:	b510      	push	{r4, lr}
	CameraTypeDef *ptr = &Camera;
	if(ptr->FlagFrameTrans)return 0;												//this means the frame is sent via uvc. you can parse cmd.
 800536e:	4c11      	ldr	r4, [pc, #68]	; (80053b4 <GrabCamFrame+0x48>)
 8005370:	7aa1      	ldrb	r1, [r4, #10]
 8005372:	b921      	cbnz	r1, 800537e <GrabCamFrame+0x12>
	if(ptr->CmdFrameComplit == CAM_INIT)
 8005374:	7863      	ldrb	r3, [r4, #1]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d004      	beq.n	8005384 <GrabCamFrame+0x18>
			GPIOC->ODR |= (1<<5);
			ptr->FlagFrameTrans=1;
			pcamera->FlagFrameComplit=0;
	}
	return ptr->FlagFrameTrans;
}
 800537a:	4608      	mov	r0, r1
 800537c:	bd10      	pop	{r4, pc}
	if(ptr->FlagFrameTrans)return 0;												//this means the frame is sent via uvc. you can parse cmd.
 800537e:	2100      	movs	r1, #0
}
 8005380:	4608      	mov	r0, r1
 8005382:	bd10      	pop	{r4, pc}
			HAL_DCMI_Start_DMA(&hdcmi,DCMI_MODE_CONTINUOUS,SDRAM_BANK_ADDR,FRAMESIZEWORDS);
 8005384:	f44f 2396 	mov.w	r3, #307200	; 0x4b000
 8005388:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800538c:	480a      	ldr	r0, [pc, #40]	; (80053b8 <GrabCamFrame+0x4c>)
 800538e:	f7fb fadb 	bl	8000948 <HAL_DCMI_Start_DMA>
			while(pcamera->FlagFrameComplit==0)
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <GrabCamFrame+0x50>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	7a53      	ldrb	r3, [r2, #9]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0fc      	beq.n	8005396 <GrabCamFrame+0x2a>
			GPIOC->ODR |= (1<<5);
 800539c:	4808      	ldr	r0, [pc, #32]	; (80053c0 <GrabCamFrame+0x54>)
 800539e:	6943      	ldr	r3, [r0, #20]
			ptr->FlagFrameTrans=1;
 80053a0:	2101      	movs	r1, #1
 80053a2:	72a1      	strb	r1, [r4, #10]
			GPIOC->ODR |= (1<<5);
 80053a4:	f043 0320 	orr.w	r3, r3, #32
			pcamera->FlagFrameComplit=0;
 80053a8:	2400      	movs	r4, #0
			GPIOC->ODR |= (1<<5);
 80053aa:	6143      	str	r3, [r0, #20]
			pcamera->FlagFrameComplit=0;
 80053ac:	7254      	strb	r4, [r2, #9]
}
 80053ae:	4608      	mov	r0, r1
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	20001688 	.word	0x20001688
 80053b8:	20001720 	.word	0x20001720
 80053bc:	200003d4 	.word	0x200003d4
 80053c0:	40020800 	.word	0x40020800

080053c4 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80053c4:	b510      	push	{r4, lr}
//			}
//		}
//		GPIOC->ODR ^= (1<<5);
//		HAL_DCMI_Start_DMA(hdcmi,DCMI_MODE_CONTINUOUS,(uint32_t)pCameraTV->AddrBufFrame,307200);
//	}
	if(vLineCntFrame++ ==FRAMELINES)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	; (80053f8 <HAL_DCMI_LineEventCallback+0x34>)
 80053c8:	8823      	ldrh	r3, [r4, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80053d4:	8022      	strh	r2, [r4, #0]
 80053d6:	d000      	beq.n	80053da <HAL_DCMI_LineEventCallback+0x16>
		HAL_DMA_Abort(hdcmi->DMA_Handle);
		vLineCntFrame=0;
//		HAL_TIM_Base_Stop_IT(&htim7);
		pcamera->FlagFrameComplit =1;
	}
}
 80053d8:	bd10      	pop	{r4, pc}
		__HAL_DCMI_DISABLE(hdcmi);						//this is not safe stop DCMI over DMA, but allows the frame to be stable
 80053da:	6802      	ldr	r2, [r0, #0]
		HAL_DMA_Abort(hdcmi->DMA_Handle);
 80053dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
		__HAL_DCMI_DISABLE(hdcmi);						//this is not safe stop DCMI over DMA, but allows the frame to be stable
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e4:	6013      	str	r3, [r2, #0]
		HAL_DMA_Abort(hdcmi->DMA_Handle);
 80053e6:	f7fb fc6f 	bl	8000cc8 <HAL_DMA_Abort>
		pcamera->FlagFrameComplit =1;
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <HAL_DCMI_LineEventCallback+0x38>)
 80053ec:	681b      	ldr	r3, [r3, #0]
		vLineCntFrame=0;
 80053ee:	2100      	movs	r1, #0
		pcamera->FlagFrameComplit =1;
 80053f0:	2201      	movs	r2, #1
		vLineCntFrame=0;
 80053f2:	8021      	strh	r1, [r4, #0]
		pcamera->FlagFrameComplit =1;
 80053f4:	725a      	strb	r2, [r3, #9]
}
 80053f6:	bd10      	pop	{r4, pc}
 80053f8:	2000171c 	.word	0x2000171c
 80053fc:	200003d4 	.word	0x200003d4

08005400 <SendCommandToCameraAndParseResponse>:
//	}
//  }
//}

void SendCommandToCameraAndParseResponse(void)
{
 8005400:	b530      	push	{r4, r5, lr}
	if(pcamera->FlagCmdReceived)
 8005402:	4c23      	ldr	r4, [pc, #140]	; (8005490 <SendCommandToCameraAndParseResponse+0x90>)
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
{
 800540a:	b083      	sub	sp, #12
	if(pcamera->FlagCmdReceived)
 800540c:	b9f2      	cbnz	r2, 800544c <SendCommandToCameraAndParseResponse+0x4c>
			HAL_UART_Transmit(&huart2,(uint8_t *)pcamera->pBufCmdReceived, strlen(pcamera->pBufCmdReceived),100);
		}
		memset(pcamera->pBufCmdReceived,0x00,strlen(pcamera->pBufCmdReceived));
		pcamera->FlagCmdReceived=0;
	}
	if(pcamera->FlagCmdResponse)
 800540e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005412:	b1ca      	cbz	r2, 8005448 <SendCommandToCameraAndParseResponse+0x48>
	{
		//hardcoding: the command "read config\r" answers not correct. the bytes 0x21 0x20 must be 0x10 0x13 to the manual. now there is zero
		uint8_t len = 0;
		if(*(uint32_t *)(pcamera->pBufCmdResponse+16)==0x12345678)	// 0x12345678 is bytes number 4-7 Astir2 User Guide
 8005414:	695d      	ldr	r5, [r3, #20]
 8005416:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <SendCommandToCameraAndParseResponse+0x94>)
 8005418:	692a      	ldr	r2, [r5, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d028      	beq.n	8005470 <SendCommandToCameraAndParseResponse+0x70>
			len = 34 + sizeof("read config\r");
		else len = strlen(pcamera->pBufCmdResponse);
 800541e:	4628      	mov	r0, r5
 8005420:	f7fa fef0 	bl	8000204 <strlen>
//		if(pcamera->CmdFrameComplit == CAM_INIT)
//		  CDC_Transmit_HS((uint8_t *)ok,strlen(ok));
//		else
		  CDC_Transmit_HS((uint8_t *)pcamera->pBufCmdResponse,len);
 8005424:	b2c1      	uxtb	r1, r0
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff f998 	bl	800475c <CDC_Transmit_HS>
		memset(pcamera->pBufCmdResponse,0x00,strlen(pcamera->pBufCmdResponse));
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	695d      	ldr	r5, [r3, #20]
 8005430:	4628      	mov	r0, r5
 8005432:	f7fa fee7 	bl	8000204 <strlen>
 8005436:	2100      	movs	r1, #0
 8005438:	4602      	mov	r2, r0
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fcc2 	bl	8005dc4 <memset>
		pcamera->FlagCmdResponse=0;
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8005448:	b003      	add	sp, #12
 800544a:	bd30      	pop	{r4, r5, pc}
		if(ParseResponseToCmd()==0)
 800544c:	f7ff fe72 	bl	8005134 <ParseResponseToCmd>
 8005450:	b180      	cbz	r0, 8005474 <SendCommandToCameraAndParseResponse+0x74>
		memset(pcamera->pBufCmdReceived,0x00,strlen(pcamera->pBufCmdReceived));
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	699d      	ldr	r5, [r3, #24]
 8005456:	4628      	mov	r0, r5
 8005458:	f7fa fed4 	bl	8000204 <strlen>
 800545c:	2100      	movs	r1, #0
 800545e:	4602      	mov	r2, r0
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fcaf 	bl	8005dc4 <memset>
		pcamera->FlagCmdReceived=0;
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800546e:	e7ce      	b.n	800540e <SendCommandToCameraAndParseResponse+0xe>
 8005470:	212f      	movs	r1, #47	; 0x2f
 8005472:	e7d8      	b.n	8005426 <SendCommandToCameraAndParseResponse+0x26>
			HAL_UART_Transmit(&huart2,(uint8_t *)pcamera->pBufCmdReceived, strlen(pcamera->pBufCmdReceived),100);
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	6999      	ldr	r1, [r3, #24]
 8005478:	9101      	str	r1, [sp, #4]
 800547a:	4608      	mov	r0, r1
 800547c:	f7fa fec2 	bl	8000204 <strlen>
 8005480:	9901      	ldr	r1, [sp, #4]
 8005482:	b282      	uxth	r2, r0
 8005484:	2364      	movs	r3, #100	; 0x64
 8005486:	4804      	ldr	r0, [pc, #16]	; (8005498 <SendCommandToCameraAndParseResponse+0x98>)
 8005488:	f7fc fcdc 	bl	8001e44 <HAL_UART_Transmit>
 800548c:	e7e1      	b.n	8005452 <SendCommandToCameraAndParseResponse+0x52>
 800548e:	bf00      	nop
 8005490:	200003d4 	.word	0x200003d4
 8005494:	12345678 	.word	0x12345678
 8005498:	20001880 	.word	0x20001880

0800549c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800549c:	b538      	push	{r3, r4, r5, lr}
  if(huart->Instance == USART2)
 800549e:	6802      	ldr	r2, [r0, #0]
 80054a0:	4b16      	ldr	r3, [pc, #88]	; (80054fc <HAL_UARTEx_RxEventCallback+0x60>)
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d000      	beq.n	80054a8 <HAL_UARTEx_RxEventCallback+0xc>
      {
	  pcamera->FlagCmdResponse=1;
	  pcamera->ResponseSize = 0;
      }
    }
}
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
      memcpy((void *)pcamera->pBufCmdResponse+pcamera->ResponseSize, Uart2ReceiveData, Size);
 80054a8:	4d15      	ldr	r5, [pc, #84]	; (8005500 <HAL_UARTEx_RxEventCallback+0x64>)
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	8b9a      	ldrh	r2, [r3, #28]
 80054ae:	6958      	ldr	r0, [r3, #20]
 80054b0:	460c      	mov	r4, r1
 80054b2:	4410      	add	r0, r2
 80054b4:	4913      	ldr	r1, [pc, #76]	; (8005504 <HAL_UARTEx_RxEventCallback+0x68>)
 80054b6:	4622      	mov	r2, r4
 80054b8:	f000 fcb0 	bl	8005e1c <memcpy>
      pcamera->ResponseSize += Size;
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	8b9a      	ldrh	r2, [r3, #28]
 80054c0:	4414      	add	r4, r2
      USART_StartIT(eUSART2, IT_IDLE);
 80054c2:	2104      	movs	r1, #4
      pcamera->ResponseSize += Size;
 80054c4:	839c      	strh	r4, [r3, #28]
      USART_StartIT(eUSART2, IT_IDLE);
 80054c6:	2002      	movs	r0, #2
 80054c8:	f000 fc42 	bl	8005d50 <USART_StartIT>
      if(((pcamera->pBufCmdResponse[pcamera->ResponseSize-1]==LINEFEED) \
 80054cc:	682a      	ldr	r2, [r5, #0]
 80054ce:	6951      	ldr	r1, [r2, #20]
 80054d0:	8b93      	ldrh	r3, [r2, #28]
 80054d2:	440b      	add	r3, r1
 80054d4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80054d8:	280a      	cmp	r0, #10
 80054da:	d009      	beq.n	80054f0 <HAL_UARTEx_RxEventCallback+0x54>
	  && (pcamera->pBufCmdResponse[pcamera->ResponseSize-2]==ENDL)) || (*(uint32_t *)(pcamera->pBufCmdResponse+16)==0x12345678)) // 0x12345678 is bytes number 4-7 Astir2 User Guide
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <HAL_UARTEx_RxEventCallback+0x6c>)
 80054de:	6909      	ldr	r1, [r1, #16]
 80054e0:	4299      	cmp	r1, r3
 80054e2:	d1e0      	bne.n	80054a6 <HAL_UARTEx_RxEventCallback+0xa>
	  pcamera->FlagCmdResponse=1;
 80054e4:	2101      	movs	r1, #1
	  pcamera->ResponseSize = 0;
 80054e6:	2300      	movs	r3, #0
	  pcamera->FlagCmdResponse=1;
 80054e8:	f882 1020 	strb.w	r1, [r2, #32]
	  pcamera->ResponseSize = 0;
 80054ec:	8393      	strh	r3, [r2, #28]
}
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
	  && (pcamera->pBufCmdResponse[pcamera->ResponseSize-2]==ENDL)) || (*(uint32_t *)(pcamera->pBufCmdResponse+16)==0x12345678)) // 0x12345678 is bytes number 4-7 Astir2 User Guide
 80054f0:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80054f4:	2b0d      	cmp	r3, #13
 80054f6:	d1f1      	bne.n	80054dc <HAL_UARTEx_RxEventCallback+0x40>
 80054f8:	e7f4      	b.n	80054e4 <HAL_UARTEx_RxEventCallback+0x48>
 80054fa:	bf00      	nop
 80054fc:	40004400 	.word	0x40004400
 8005500:	200003d4 	.word	0x200003d4
 8005504:	2000180c 	.word	0x2000180c
 8005508:	12345678 	.word	0x12345678

0800550c <CDC_ReceiveCallback_HS>:

void CDC_ReceiveCallback_HS(uint8_t* Buf, uint32_t *Len)
{
 800550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  	static uint8_t cnt=0;
  	uint32_t len = *Len;
  	if(pcamera->FlagCmdReceived==0)
 8005510:	4c10      	ldr	r4, [pc, #64]	; (8005554 <CDC_ReceiveCallback_HS+0x48>)
 8005512:	6825      	ldr	r5, [r4, #0]
 8005514:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8005518:	b10b      	cbz	r3, 800551e <CDC_ReceiveCallback_HS+0x12>
		    cnt=0;
		    pcamera->FlagCmdReceived=1;
	    }
	    else cnt +=len;
  	}
}
 800551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    memcpy((void *)pcamera->pBufCmdReceived+cnt,Buf,len);
 800551e:	4f0e      	ldr	r7, [pc, #56]	; (8005558 <CDC_ReceiveCallback_HS+0x4c>)
  	uint32_t len = *Len;
 8005520:	f8d1 8000 	ldr.w	r8, [r1]
	    memcpy((void *)pcamera->pBufCmdReceived+cnt,Buf,len);
 8005524:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8005528:	69ab      	ldr	r3, [r5, #24]
 800552a:	783d      	ldrb	r5, [r7, #0]
 800552c:	4601      	mov	r1, r0
 800552e:	4642      	mov	r2, r8
 8005530:	1958      	adds	r0, r3, r5
 8005532:	f000 fc73 	bl	8005e1c <memcpy>
	    if(pcamera->pBufCmdReceived[cnt]==ENDL)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	5d52      	ldrb	r2, [r2, r5]
 800553c:	2a0d      	cmp	r2, #13
 800553e:	d003      	beq.n	8005548 <CDC_ReceiveCallback_HS+0x3c>
	    else cnt +=len;
 8005540:	4445      	add	r5, r8
 8005542:	703d      	strb	r5, [r7, #0]
}
 8005544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    pcamera->FlagCmdReceived=1;
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		    cnt=0;
 800554e:	703e      	strb	r6, [r7, #0]
}
 8005550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005554:	200003d4 	.word	0x200003d4
 8005558:	2000171a 	.word	0x2000171a

0800555c <HAL_DCMI_MspInit>:

DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8005560:	4b4e      	ldr	r3, [pc, #312]	; (800569c <HAL_DCMI_MspInit+0x140>)
 8005562:	6802      	ldr	r2, [r0, #0]
{
 8005564:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005566:	2400      	movs	r4, #0
  if(hdcmi->Instance==DCMI)
 8005568:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800556e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005572:	940a      	str	r4, [sp, #40]	; 0x28
  if(hdcmi->Instance==DCMI)
 8005574:	d002      	beq.n	800557c <HAL_DCMI_MspInit+0x20>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);

//    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_OVR); DCMI_IT_OVR
  }

}
 8005576:	b00c      	add	sp, #48	; 0x30
 8005578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_DCMI_MspInit+0x144>)
 800557e:	9401      	str	r4, [sp, #4]
 8005580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_dcmi.Instance = DMA2_Stream1;
 8005582:	4e48      	ldr	r6, [pc, #288]	; (80056a4 <HAL_DCMI_MspInit+0x148>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
 800558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558c:	f002 0201 	and.w	r2, r2, #1
 8005590:	9201      	str	r2, [sp, #4]
 8005592:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005594:	9402      	str	r4, [sp, #8]
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	f042 0210 	orr.w	r2, r2, #16
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
 800559e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a0:	f002 0210 	and.w	r2, r2, #16
 80055a4:	9202      	str	r2, [sp, #8]
 80055a6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a8:	9403      	str	r4, [sp, #12]
 80055aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	f002 0201 	and.w	r2, r2, #1
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80055bc:	9404      	str	r4, [sp, #16]
 80055be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
 80055c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80055cc:	9204      	str	r2, [sp, #16]
 80055ce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055d0:	9405      	str	r4, [sp, #20]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	f042 0208 	orr.w	r2, r2, #8
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80055e0:	2270      	movs	r2, #112	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80055e2:	270d      	movs	r7, #13
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055e6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80055e8:	2302      	movs	r3, #2
 80055ea:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055ec:	482e      	ldr	r0, [pc, #184]	; (80056a8 <HAL_DCMI_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80055ee:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80055f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	f04f 0802 	mov.w	r8, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055f8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055fa:	f7fb fedd 	bl	80013b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fe:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005600:	482a      	ldr	r0, [pc, #168]	; (80056ac <HAL_DCMI_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005602:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005604:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005606:	e9cd 3806 	strd	r3, r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800560e:	f7fb fed3 	bl	80013b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005612:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005616:	4826      	ldr	r0, [pc, #152]	; (80056b0 <HAL_DCMI_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005618:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800561a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561c:	e9cd 8407 	strd	r8, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005620:	e9cd 4709 	strd	r4, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005624:	f7fb fec8 	bl	80013b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005628:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562a:	4822      	ldr	r0, [pc, #136]	; (80056b4 <HAL_DCMI_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005634:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005638:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800563a:	f7fb febd 	bl	80013b8 <HAL_GPIO_Init>
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_DCMI_MspInit+0x15c>)
 8005640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005644:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8005648:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800564c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005650:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8005658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800565c:	e9c6 2406 	strd	r2, r4, [r6, #24]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8005660:	6233      	str	r3, [r6, #32]
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005662:	2204      	movs	r2, #4
 8005664:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8005666:	4630      	mov	r0, r6
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8005668:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800566c:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005670:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8005674:	f7fb fa50 	bl	8000b18 <HAL_DMA_Init>
 8005678:	b960      	cbnz	r0, 8005694 <HAL_DCMI_MspInit+0x138>
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800567a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800567c:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800567e:	4611      	mov	r1, r2
 8005680:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8005682:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8005684:	f7fb f878 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8005688:	204e      	movs	r0, #78	; 0x4e
 800568a:	f7fb f8b3 	bl	80007f4 <HAL_NVIC_EnableIRQ>
}
 800568e:	b00c      	add	sp, #48	; 0x30
 8005690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8005694:	f000 f862 	bl	800575c <Error_Handler>
 8005698:	e7ef      	b.n	800567a <HAL_DCMI_MspInit+0x11e>
 800569a:	bf00      	nop
 800569c:	50050000 	.word	0x50050000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	20001760 	.word	0x20001760
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40020000 	.word	0x40020000
 80056b0:	40021c00 	.word	0x40021c00
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40026428 	.word	0x40026428

080056bc <MX_DCMI_Init>:
  }

}

void MX_DCMI_Init(void)
{
 80056bc:	b510      	push	{r4, lr}
  DCMI_SyncUnmaskTypeDef SyncUnmask;

  hdcmi.Instance = DCMI;
 80056be:	4811      	ldr	r0, [pc, #68]	; (8005704 <MX_DCMI_Init+0x48>)
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
  hdcmi.Init.SyncroCode.FrameEndCode = 0x9d;
  hdcmi.Init.SyncroCode.FrameStartCode = 0x80;
 80056c0:	4a11      	ldr	r2, [pc, #68]	; (8005708 <MX_DCMI_Init+0x4c>)
  hdcmi.Instance = DCMI;
 80056c2:	4912      	ldr	r1, [pc, #72]	; (800570c <MX_DCMI_Init+0x50>)
 80056c4:	6001      	str	r1, [r0, #0]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80056c6:	2300      	movs	r3, #0
{
 80056c8:	b082      	sub	sp, #8
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
 80056ca:	2410      	movs	r4, #16
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80056cc:	2120      	movs	r1, #32
  hdcmi.Init.SyncroCode.LineStartCode = 0xab;
  hdcmi.Init.SyncroCode.LineEndCode = 0xb6;
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80056ce:	e9c0 2307 	strd	r2, r3, [r0, #28]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80056d2:	e9c0 4101 	strd	r4, r1, [r0, #4]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80056d6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80056da:	f7fb f8f9 	bl	80008d0 <HAL_DCMI_Init>
 80056de:	b948      	cbnz	r0, 80056f4 <MX_DCMI_Init+0x38>
  {
    Error_Handler();
  }

  SyncUnmask.FrameEndUnmask    = 0xa0;// 0xa0;//0xff;
  SyncUnmask.FrameStartUnmask  = 0xa0;//0xa0;//0xff;
 80056e0:	f04f 33a0 	mov.w	r3, #2694881440	; 0xa0a0a0a0
  SyncUnmask.LineEndUnmask     = 0xa0;//0xa0;//0xff;
  SyncUnmask.LineStartUnmask   = 0xa0;//0xa0;//0xff;
  if(HAL_DCMI_ConfigSyncUnmask(&hdcmi,&SyncUnmask) != HAL_OK)
 80056e4:	4807      	ldr	r0, [pc, #28]	; (8005704 <MX_DCMI_Init+0x48>)
  SyncUnmask.FrameStartUnmask  = 0xa0;//0xa0;//0xff;
 80056e6:	9301      	str	r3, [sp, #4]
  if(HAL_DCMI_ConfigSyncUnmask(&hdcmi,&SyncUnmask) != HAL_OK)
 80056e8:	a901      	add	r1, sp, #4
 80056ea:	f7fb f9fd 	bl	8000ae8 <HAL_DCMI_ConfigSyncUnmask>
 80056ee:	b920      	cbnz	r0, 80056fa <MX_DCMI_Init+0x3e>
  {
    Error_Handler();
  }

}
 80056f0:	b002      	add	sp, #8
 80056f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80056f4:	f000 f832 	bl	800575c <Error_Handler>
 80056f8:	e7f2      	b.n	80056e0 <MX_DCMI_Init+0x24>
    Error_Handler();
 80056fa:	f000 f82f 	bl	800575c <Error_Handler>
}
 80056fe:	b002      	add	sp, #8
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	20001720 	.word	0x20001720
 8005708:	9db6ab80 	.word	0x9db6ab80
 800570c:	50050000 	.word	0x50050000

08005710 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8005710:	b500      	push	{lr}
 8005712:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005714:	2200      	movs	r2, #0
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <MX_DMA_Init+0x30>)
 8005718:	9201      	str	r2, [sp, #4]
 800571a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800571c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8005720:	6319      	str	r1, [r3, #48]	; 0x30
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005728:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800572a:	2039      	movs	r0, #57	; 0x39
 800572c:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 800572e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8005730:	f7fb f822 	bl	8000778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005734:	2039      	movs	r0, #57	; 0x39

}
 8005736:	b003      	add	sp, #12
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800573c:	f7fb b85a 	b.w	80007f4 <HAL_NVIC_EnableIRQ>
 8005740:	40023800 	.word	0x40023800

08005744 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_dcmi);
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <DMA2_Stream1_IRQHandler+0x8>)
 8005746:	f7fb bb1b 	b.w	8000d80 <HAL_DMA_IRQHandler>
 800574a:	bf00      	nop
 800574c:	20001760 	.word	0x20001760

08005750 <DCMI_IRQHandler>:
}

void DCMI_IRQHandler(void)
{

  HAL_DCMI_IRQHandler(&hdcmi);
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <DCMI_IRQHandler+0x8>)
 8005752:	f7fb b975 	b.w	8000a40 <HAL_DCMI_IRQHandler>
 8005756:	bf00      	nop
 8005758:	20001720 	.word	0x20001720

0800575c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800575c:	b672      	cpsid	i
#include "periph.h"

void Error_Handler(void)
{
  __disable_irq();
  while (1)
 800575e:	e7fe      	b.n	800575e <Error_Handler+0x2>

08005760 <MX_GPIO_Init>:
#include "periph.h"

void MX_GPIO_Init(void)
{
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005764:	2400      	movs	r4, #0
{
 8005766:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005768:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800576c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
//  __HAL_RCC_GPIOH_CLK_ENABLE();
//  __HAL_RCC_GPIOC_CLK_ENABLE();
//  __HAL_RCC_GPIOA_CLK_ENABLE();
//  __HAL_RCC_GPIOB_CLK_ENABLE();

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005770:	4b63      	ldr	r3, [pc, #396]	; (8005900 <MX_GPIO_Init+0x1a0>)
 8005772:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005774:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8005778:	4f62      	ldr	r7, [pc, #392]	; (8005904 <MX_GPIO_Init+0x1a4>)

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800577a:	4e63      	ldr	r6, [pc, #396]	; (8005908 <MX_GPIO_Init+0x1a8>)

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800577c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8005914 <MX_GPIO_Init+0x1b4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005780:	f042 0210 	orr.w	r2, r2, #16
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
 8005786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005788:	f002 0210 	and.w	r2, r2, #16
 800578c:	9201      	str	r2, [sp, #4]
 800578e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005790:	9402      	str	r4, [sp, #8]
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80057a4:	9403      	str	r4, [sp, #12]
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	f042 0220 	orr.w	r2, r2, #32
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
 80057ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b0:	f002 0220 	and.w	r2, r2, #32
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057b8:	9404      	str	r4, [sp, #16]
 80057ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
 80057c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80057c8:	9204      	str	r2, [sp, #16]
 80057ca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057cc:	9405      	str	r4, [sp, #20]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	f042 0204 	orr.w	r2, r2, #4
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
 80057d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d8:	f002 0204 	and.w	r2, r2, #4
 80057dc:	9205      	str	r2, [sp, #20]
 80057de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057e0:	9406      	str	r4, [sp, #24]
 80057e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
 80057ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ec:	f002 0201 	and.w	r2, r2, #1
 80057f0:	9206      	str	r2, [sp, #24]
 80057f2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f4:	9407      	str	r4, [sp, #28]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f8:	f042 0202 	orr.w	r2, r2, #2
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
 80057fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005800:	f002 0202 	and.w	r2, r2, #2
 8005804:	9207      	str	r2, [sp, #28]
 8005806:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005808:	9408      	str	r4, [sp, #32]
 800580a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
 8005812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005814:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005818:	9208      	str	r2, [sp, #32]
 800581a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800581c:	9409      	str	r4, [sp, #36]	; 0x24
 800581e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005820:	f042 0208 	orr.w	r2, r2, #8
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 800582e:	4622      	mov	r2, r4
 8005830:	4638      	mov	r0, r7
 8005832:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8005836:	f7fb fefd 	bl	8001634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800583a:	4622      	mov	r2, r4
 800583c:	4630      	mov	r0, r6
 800583e:	2104      	movs	r1, #4
 8005840:	f7fb fef8 	bl	8001634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005844:	4622      	mov	r2, r4
 8005846:	4640      	mov	r0, r8
 8005848:	2110      	movs	r1, #16
 800584a:	f7fb fef3 	bl	8001634 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 800584e:	2501      	movs	r5, #1
 8005850:	f04f 0a30 	mov.w	sl, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005854:	a90a      	add	r1, sp, #40	; 0x28
 8005856:	4638      	mov	r0, r7

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005858:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800585c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8005860:	e9cd a50a 	strd	sl, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005864:	f7fb fda8 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005868:	a90a      	add	r1, sp, #40	; 0x28
 800586a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586c:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005870:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005872:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005876:	f7fb fd9f 	bl	80013b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587a:	a90a      	add	r1, sp, #40	; 0x28
 800587c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800587e:	2310      	movs	r3, #16
 8005880:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005886:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005888:	f7fb fd96 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_WHITE_Pin */
  GPIO_InitStruct.Pin = LED_WHITE_Pin;
 800588c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_WHITE_GPIO_Port, &GPIO_InitStruct);
 800588e:	4640      	mov	r0, r8
 8005890:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_WHITE_Pin;
 8005892:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005898:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LED_WHITE_GPIO_Port, &GPIO_InitStruct);
 800589a:	f7fb fd8d 	bl	80013b8 <HAL_GPIO_Init>
  /*Configure GPIO pins : LED_BLUE1_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE1_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800589e:	4638      	mov	r0, r7
 80058a0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a2:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = LED_BLUE1_Pin|LED_GREEN_Pin;
 80058a6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058aa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ac:	f7fb fd84 	bl	80013b8 <HAL_GPIO_Init>
  /*Configure GPIO pin : CAM_ISPW_Pin */
  GPIO_InitStruct.Pin = CAM_ISPW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAM_ISPW_GPIO_Port, &GPIO_InitStruct);
 80058b0:	4630      	mov	r0, r6
 80058b2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b4:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = CAM_ISPW_Pin;
 80058b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058bc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CAM_ISPW_GPIO_Port, &GPIO_InitStruct);
 80058be:	f7fb fd7b 	bl	80013b8 <HAL_GPIO_Init>
  /*Configure GPIO pin : CAM_EN_Pin */
  GPIO_InitStruct.Pin = CAM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 80058c2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = CAM_EN_Pin;
 80058c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 80058c8:	4810      	ldr	r0, [pc, #64]	; (800590c <MX_GPIO_Init+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058ca:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ce:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CAM_EN_GPIO_Port, &GPIO_InitStruct);
 80058d2:	f7fb fd71 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_SW2_Pin MOT_SW1_Pin */
  GPIO_InitStruct.Pin = MOT_SW2_Pin|MOT_SW1_Pin;
 80058d6:	2230      	movs	r2, #48	; 0x30
 80058d8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80058da:	a90a      	add	r1, sp, #40	; 0x28
 80058dc:	480c      	ldr	r0, [pc, #48]	; (8005910 <MX_GPIO_Init+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = MOT_SW2_Pin|MOT_SW1_Pin;
 80058e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80058e4:	f7fb fd68 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_CONTROL_1_Pin MOT_CONTROL_2_Pin */
  GPIO_InitStruct.Pin = MOT_CONTROL_1_Pin|MOT_CONTROL_2_Pin;
 80058e8:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80058ea:	4809      	ldr	r0, [pc, #36]	; (8005910 <MX_GPIO_Init+0x1b0>)
 80058ec:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058ee:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80058f6:	f7fb fd5f 	bl	80013b8 <HAL_GPIO_Init>
}
 80058fa:	b010      	add	sp, #64	; 0x40
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	40020800 	.word	0x40020800
 8005908:	40020400 	.word	0x40020400
 800590c:	40021c00 	.word	0x40021c00
 8005910:	40022000 	.word	0x40022000
 8005914:	40020000 	.word	0x40020000

08005918 <SystemClock_Config>:
  return 0;
}

/*HCLK=180MHz*/
void SystemClock_Config(void)
{
 8005918:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800591a:	2300      	movs	r3, #0
{
 800591c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800591e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8005922:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005926:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800592a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	4928      	ldr	r1, [pc, #160]	; (80059d0 <SystemClock_Config+0xb8>)
 8005930:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005932:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005934:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005936:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005938:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800593c:	6408      	str	r0, [r1, #64]	; 0x40
 800593e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005940:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8005944:	9101      	str	r1, [sp, #4]
 8005946:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005948:	9302      	str	r3, [sp, #8]
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005954:	2001      	movs	r0, #1
 8005956:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800595a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800595e:	2002      	movs	r0, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005960:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005964:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800596c:	2002      	movs	r0, #2
 800596e:	2104      	movs	r1, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005970:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005972:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 15;
 8005976:	220f      	movs	r2, #15
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005978:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800597a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 216;
 800597c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005980:	9c02      	ldr	r4, [sp, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005982:	f7fb fe97 	bl	80016b4 <HAL_RCC_OscConfig>
 8005986:	b9a8      	cbnz	r0, 80059b4 <SystemClock_Config+0x9c>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005988:	f7fb fe58 	bl	800163c <HAL_PWREx_EnableOverDrive>
 800598c:	b9c0      	cbnz	r0, 80059c0 <SystemClock_Config+0xa8>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800598e:	210f      	movs	r1, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005990:	2302      	movs	r3, #2
 8005992:	e9cd 1303 	strd	r1, r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005996:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005998:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800599c:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80059a0:	a803      	add	r0, sp, #12
 80059a2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80059a4:	e9cd 4205 	strd	r4, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80059a8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80059aa:	f7fc f89b 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80059ae:	b950      	cbnz	r0, 80059c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
  }
}
 80059b0:	b014      	add	sp, #80	; 0x50
 80059b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80059b4:	f7ff fed2 	bl	800575c <Error_Handler>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80059b8:	f7fb fe40 	bl	800163c <HAL_PWREx_EnableOverDrive>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0e6      	beq.n	800598e <SystemClock_Config+0x76>
    Error_Handler();
 80059c0:	f7ff fecc 	bl	800575c <Error_Handler>
 80059c4:	e7e3      	b.n	800598e <SystemClock_Config+0x76>
    Error_Handler();
 80059c6:	f7ff fec9 	bl	800575c <Error_Handler>
}
 80059ca:	b014      	add	sp, #80	; 0x50
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40007000 	.word	0x40007000

080059d8 <main>:
{
 80059d8:	b508      	push	{r3, lr}
  HAL_Init();
 80059da:	f7fa fe7d 	bl	80006d8 <HAL_Init>
  SystemClock_Config();
 80059de:	f7ff ff9b 	bl	8005918 <SystemClock_Config>
  MX_GPIO_Init();
 80059e2:	f7ff febd 	bl	8005760 <MX_GPIO_Init>
  MX_DMA_Init();
 80059e6:	f7ff fe93 	bl	8005710 <MX_DMA_Init>
  MX_DCMI_Init();
 80059ea:	f7ff fe67 	bl	80056bc <MX_DCMI_Init>
  MX_FMC_Init();
 80059ee:	f000 f87b 	bl	8005ae8 <MX_FMC_Init>
  MX_USART2_UART_Init();
 80059f2:	f000 f98b 	bl	8005d0c <MX_USART2_UART_Init>
  USB_DeviceInit();
 80059f6:	f000 f9cf 	bl	8005d98 <USB_DeviceInit>
  SDRAM_Init();
 80059fa:	f000 f8ad 	bl	8005b58 <SDRAM_Init>
  USART_StartIT(eUSART2, IT_IDLE);
 80059fe:	2104      	movs	r1, #4
 8005a00:	2002      	movs	r0, #2
 8005a02:	f000 f9a5 	bl	8005d50 <USART_StartIT>
  CameraInit();
 8005a06:	f7ff fb83 	bl	8005110 <CameraInit>
      if(GrabCamFrame()==0)
 8005a0a:	f7ff fcaf 	bl	800536c <GrabCamFrame>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d1fb      	bne.n	8005a0a <main+0x32>
	SendCommandToCameraAndParseResponse();
 8005a12:	f7ff fcf5 	bl	8005400 <SendCommandToCameraAndParseResponse>
 8005a16:	e7f8      	b.n	8005a0a <main+0x32>

08005a18 <HAL_SDRAM_MspInit>:
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <HAL_SDRAM_MspInit+0xb0>)
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005a1c:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
 8005a1e:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005a20:	2200      	movs	r2, #0
 8005a22:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	d14d      	bne.n	8005ac4 <HAL_SDRAM_MspInit+0xac>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <HAL_SDRAM_MspInit+0xb4>)
 8005a2a:	9401      	str	r4, [sp, #4]
  FMC_Initialized = 1;
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6019      	str	r1, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a30:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a32:	4827      	ldr	r0, [pc, #156]	; (8005ad0 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6393      	str	r3, [r2, #56]	; 0x38
 8005a38:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a3e:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a40:	250c      	movs	r5, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005a42:	f64f 023f 	movw	r2, #63551	; 0xf83f
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a46:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a48:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a50:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a52:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a56:	f7fb fcaf 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a5c:	481d      	ldr	r0, [pc, #116]	; (8005ad4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a5e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a60:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a66:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a6a:	f7fb fca5 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8005a6e:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a70:	4819      	ldr	r0, [pc, #100]	; (8005ad8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8005a72:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a74:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a7a:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a7e:	f7fb fc9b 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8005a82:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a86:	4815      	ldr	r0, [pc, #84]	; (8005adc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8005a88:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a8a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005a90:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a94:	f7fb fc90 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005a98:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a9c:	4810      	ldr	r0, [pc, #64]	; (8005ae0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005a9e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005aa0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa2:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005aa6:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005aaa:	f7fb fc85 	bl	80013b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005aae:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ab2:	480c      	ldr	r0, [pc, #48]	; (8005ae4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab4:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ab6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab8:	e9cd 4604 	strd	r4, r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005abc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005abe:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ac0:	f7fb fc7a 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005ac4:	b009      	add	sp, #36	; 0x24
 8005ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac8:	200017c0 	.word	0x200017c0
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	40021400 	.word	0x40021400
 8005ad4:	40020800 	.word	0x40020800
 8005ad8:	40021c00 	.word	0x40021c00
 8005adc:	40021800 	.word	0x40021800
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40020c00 	.word	0x40020c00

08005ae8 <MX_FMC_Init>:

  HAL_FMC_MspDeInit();
}

void MX_FMC_Init(void)
{
 8005ae8:	b510      	push	{r4, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005aea:	4819      	ldr	r0, [pc, #100]	; (8005b50 <MX_FMC_Init+0x68>)
 8005aec:	4c19      	ldr	r4, [pc, #100]	; (8005b54 <MX_FMC_Init+0x6c>)
 8005aee:	6004      	str	r4, [r0, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8005af0:	2204      	movs	r2, #4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005af2:	2410      	movs	r4, #16
 8005af4:	e9c0 2403 	strd	r2, r4, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005af8:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8005afc:	f44f 74c0 	mov.w	r4, #384	; 0x180
{
 8005b00:	b088      	sub	sp, #32
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8005b02:	2300      	movs	r3, #0
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005b04:	e9c0 c405 	strd	ip, r4, [r0, #20]
  //This settings are taken from the memory manual
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;//11; 7
  SdramTiming.SelfRefreshTime = 4;//7; 4
  SdramTiming.RowCycleDelay = 6;//10; 6
  SdramTiming.WriteRecoveryTime = 2;
 8005b08:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8005b48 <MX_FMC_Init+0x60>
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8005b0c:	f44f 6440 	mov.w	r4, #3072	; 0xc00
  SdramTiming.LoadToActiveDelay = 2;
 8005b10:	2102      	movs	r1, #2
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8005b12:	e9c0 3407 	strd	r3, r4, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005b16:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8005b1a:	e9c0 3409 	strd	r3, r4, [r0, #36]	; 0x24
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005b1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;//11; 7
 8005b22:	2407      	movs	r4, #7
  SdramTiming.RowCycleDelay = 6;//10; 6
 8005b24:	2306      	movs	r3, #6
  SdramTiming.LoadToActiveDelay = 2;
 8005b26:	9100      	str	r1, [sp, #0]
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8005b28:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005b2a:	4669      	mov	r1, sp
  SdramTiming.SelfRefreshTime = 4;//7; 4
 8005b2c:	e9cd 4201 	strd	r4, r2, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 8005b30:	ed8d 7b04 	vstr	d7, [sp, #16]
  SdramTiming.RowCycleDelay = 6;//10; 6
 8005b34:	9303      	str	r3, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005b36:	f7fc f893 	bl	8001c60 <HAL_SDRAM_Init>
 8005b3a:	b908      	cbnz	r0, 8005b40 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
  }

}
 8005b3c:	b008      	add	sp, #32
 8005b3e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005b40:	f7ff fe0c 	bl	800575c <Error_Handler>
}
 8005b44:	b008      	add	sp, #32
 8005b46:	bd10      	pop	{r4, pc}
 8005b48:	00000002 	.word	0x00000002
 8005b4c:	00000002 	.word	0x00000002
 8005b50:	200017d8 	.word	0x200017d8
 8005b54:	a0000140 	.word	0xa0000140

08005b58 <SDRAM_Init>:
  /* Set the device refresh counter */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
}

void SDRAM_Init(void)
{
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Command->CommandMode 			 = FMC_SDRAM_CMD_CLK_ENABLE;
 8005b5c:	4c22      	ldr	r4, [pc, #136]	; (8005be8 <SDRAM_Init+0x90>)
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b5e:	4d23      	ldr	r5, [pc, #140]	; (8005bec <SDRAM_Init+0x94>)
{
 8005b60:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd =0;
 8005b62:	2700      	movs	r7, #0
  Command->CommandMode 			 = FMC_SDRAM_CMD_CLK_ENABLE;
 8005b64:	2601      	movs	r6, #1
  Command->CommandTarget 		 = FMC_SDRAM_CMD_TARGET_BANK1;
 8005b66:	f04f 0810 	mov.w	r8, #16
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b70:	4628      	mov	r0, r5
  Command->CommandTarget 		 = FMC_SDRAM_CMD_TARGET_BANK1;
 8005b72:	e9c4 6800 	strd	r6, r8, [r4]
  Command->ModeRegisterDefinition = 0;
 8005b76:	e9c4 6702 	strd	r6, r7, [r4, #8]
  __IO uint32_t tmpmrd =0;
 8005b7a:	9701      	str	r7, [sp, #4]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b7c:	f7fc f892 	bl	8001ca4 <HAL_SDRAM_SendCommand>
  HAL_Delay(100);
 8005b80:	2064      	movs	r0, #100	; 0x64
 8005b82:	f7fa fdd5 	bl	8000730 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b86:	4621      	mov	r1, r4
  Command->CommandMode 			 = FMC_SDRAM_CMD_PALL;
 8005b88:	2302      	movs	r3, #2
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b8e:	4628      	mov	r0, r5
  Command->CommandMode 			 = FMC_SDRAM_CMD_PALL;
 8005b90:	6023      	str	r3, [r4, #0]
  Command->AutoRefreshNumber 	 = 1;
 8005b92:	e9c4 8601 	strd	r8, r6, [r4, #4]
  Command->ModeRegisterDefinition = 0;
 8005b96:	60e7      	str	r7, [r4, #12]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005b98:	f7fc f884 	bl	8001ca4 <HAL_SDRAM_SendCommand>
  Command->AutoRefreshNumber 	 = 4;
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005ba0:	4621      	mov	r1, r4
  Command->CommandMode 			 = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005ba2:	2303      	movs	r3, #3
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ba8:	4628      	mov	r0, r5
  Command->CommandMode 			 = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005baa:	6023      	str	r3, [r4, #0]
  Command->CommandTarget 		 = FMC_SDRAM_CMD_TARGET_BANK1;
 8005bac:	f8c4 8004 	str.w	r8, [r4, #4]
  Command->ModeRegisterDefinition = 0;
 8005bb0:	60e7      	str	r7, [r4, #12]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005bb2:	f7fc f877 	bl	8001ca4 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8005bb6:	f240 2331 	movw	r3, #561	; 0x231
 8005bba:	9301      	str	r3, [sp, #4]
  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	e9c4 2300 	strd	r2, r3, [r4]
  Command->ModeRegisterDefinition = tmpmrd;
 8005bc4:	9b01      	ldr	r3, [sp, #4]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bcc:	4628      	mov	r0, r5
  Command->ModeRegisterDefinition = tmpmrd;
 8005bce:	e9c4 6302 	strd	r6, r3, [r4, #8]
  HAL_SDRAM_SendCommand(hsdram, Command, 0x1000);
 8005bd2:	f7fc f867 	bl	8001ca4 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8005bd6:	f240 516a 	movw	r1, #1386	; 0x56a
 8005bda:	4628      	mov	r0, r5
  SDRAM_Initialization_Sequence(&hsdram1, &command);
}
 8005bdc:	b002      	add	sp, #8
 8005bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8005be2:	f7fc b87d 	b.w	8001ce0 <HAL_SDRAM_ProgramRefreshRate>
 8005be6:	bf00      	nop
 8005be8:	200017c8 	.word	0x200017c8
 8005bec:	200017d8 	.word	0x200017d8

08005bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bf0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_MspInit+0x34>)
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	9100      	str	r1, [sp, #0]
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bfe:	645a      	str	r2, [r3, #68]	; 0x44
 8005c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005c06:	9200      	str	r2, [sp, #0]
 8005c08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	9101      	str	r1, [sp, #4]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c1e:	b002      	add	sp, #8
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800

08005c28 <NMI_Handler>:
#include "main.h"
#include "stm32f4xx_it.h"

void NMI_Handler(void)
{
  while (1)
 8005c28:	e7fe      	b.n	8005c28 <NMI_Handler>
 8005c2a:	bf00      	nop

08005c2c <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  while (1)
 8005c2c:	e7fe      	b.n	8005c2c <HardFault_Handler>
 8005c2e:	bf00      	nop

08005c30 <MemManage_Handler>:
}

void MemManage_Handler(void)
{

  while (1)
 8005c30:	e7fe      	b.n	8005c30 <MemManage_Handler>
 8005c32:	bf00      	nop

08005c34 <BusFault_Handler>:
  }
}

void BusFault_Handler(void)
{
  while (1)
 8005c34:	e7fe      	b.n	8005c34 <BusFault_Handler>
 8005c36:	bf00      	nop

08005c38 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void)
{
  while (1)
 8005c38:	e7fe      	b.n	8005c38 <UsageFault_Handler>
 8005c3a:	bf00      	nop

08005c3c <SVC_Handler>:
}

void SVC_Handler(void)
{

}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <DebugMon_Handler>:
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <PendSV_Handler>:
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop

08005c48 <SysTick_Handler>:

}

void SysTick_Handler(void)
{
  HAL_IncTick();
 8005c48:	f7fa bd60 	b.w	800070c <HAL_IncTick>

08005c4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c4c:	4a03      	ldr	r2, [pc, #12]	; (8005c5c <SystemInit+0x10>)
 8005c4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005c52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c5a:	4770      	bx	lr
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <HAL_UART_MspInit>:

uint8_t Uart2ReceiveData[UART_RECEIVE_DATA_MAX]={0};
uint8_t Uart2TransmitData[UART_TRANSMIT_DATA_MAX]={0};

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 if(huart->Instance==USART2)
 8005c62:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <HAL_UART_MspInit+0xa0>)
 8005c64:	6802      	ldr	r2, [r0, #0]
{
 8005c66:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c68:	2400      	movs	r4, #0
 if(huart->Instance==USART2)
 8005c6a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005c70:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005c74:	9408      	str	r4, [sp, #32]
 if(huart->Instance==USART2)
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);

  }

}
 8005c78:	b00a      	add	sp, #40	; 0x28
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c7c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005c80:	9401      	str	r4, [sp, #4]
 8005c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c84:	481f      	ldr	r0, [pc, #124]	; (8005d04 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c96:	9402      	str	r4, [sp, #8]
 8005c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8005ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca2:	f002 0201 	and.w	r2, r2, #1
 8005ca6:	9202      	str	r2, [sp, #8]
 8005ca8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005caa:	9403      	str	r4, [sp, #12]
 8005cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cae:	f042 0208 	orr.w	r2, r2, #8
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cbc:	2204      	movs	r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cbe:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cc0:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cca:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd0:	f7fb fb72 	bl	80013b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005cd4:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cd6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005cd8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cda:	480b      	ldr	r0, [pc, #44]	; (8005d08 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cdc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce2:	e9cd 4606 	strd	r4, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ce6:	f7fb fb67 	bl	80013b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005cea:	4622      	mov	r2, r4
 8005cec:	4621      	mov	r1, r4
 8005cee:	2026      	movs	r0, #38	; 0x26
 8005cf0:	f7fa fd42 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cf4:	2026      	movs	r0, #38	; 0x26
 8005cf6:	f7fa fd7d 	bl	80007f4 <HAL_NVIC_EnableIRQ>
}
 8005cfa:	b00a      	add	sp, #40	; 0x28
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	bf00      	nop
 8005d00:	40004400 	.word	0x40004400
 8005d04:	40020000 	.word	0x40020000
 8005d08:	40020c00 	.word	0x40020c00

08005d0c <MX_USART2_UART_Init>:
  }

}

void MX_USART2_UART_Init(void)
{
 8005d0c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8005d0e:	480d      	ldr	r0, [pc, #52]	; (8005d44 <MX_USART2_UART_Init+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d12:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 57600;
 8005d14:	f44f 4161 	mov.w	r1, #57600	; 0xe100
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d18:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 57600;
 8005d1a:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d22:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d26:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d2a:	f7fb fff1 	bl	8001d10 <HAL_UART_Init>
 8005d2e:	b928      	cbnz	r0, 8005d3c <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }
buart2.nUart = eUSART2;
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <MX_USART2_UART_Init+0x40>)
 8005d32:	2102      	movs	r1, #2
buart2.State = RX_FREE;
 8005d34:	2200      	movs	r2, #0
buart2.nUart = eUSART2;
 8005d36:	7019      	strb	r1, [r3, #0]
buart2.State = RX_FREE;
 8005d38:	709a      	strb	r2, [r3, #2]
}
 8005d3a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005d3c:	f7ff fd0e 	bl	800575c <Error_Handler>
 8005d40:	e7f6      	b.n	8005d30 <MX_USART2_UART_Init+0x24>
 8005d42:	bf00      	nop
 8005d44:	20001880 	.word	0x20001880
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	2000187c 	.word	0x2000187c

08005d50 <USART_StartIT>:

void USART_StartIT(eUART_DesignationTypeDef nuart, eUART_IntTypeDef it)
{
  if(nuart == eUSART2)
 8005d50:	2802      	cmp	r0, #2
 8005d52:	d000      	beq.n	8005d56 <USART_StartIT+0x6>
      if(it == IT_TXE)
	{
	  HAL_UART_Transmit_IT(&huart2,Uart2TransmitData,sizeof(Uart2TransmitData));
	}
    }
}
 8005d54:	4770      	bx	lr
      if(it ==IT_IDLE)
 8005d56:	2904      	cmp	r1, #4
 8005d58:	d008      	beq.n	8005d6c <USART_StartIT+0x1c>
      else if(it==  IT_RXNE)
 8005d5a:	2903      	cmp	r1, #3
 8005d5c:	d00b      	beq.n	8005d76 <USART_StartIT+0x26>
      if(it == IT_TXE)
 8005d5e:	2901      	cmp	r1, #1
 8005d60:	d1f8      	bne.n	8005d54 <USART_StartIT+0x4>
	  HAL_UART_Transmit_IT(&huart2,Uart2TransmitData,sizeof(Uart2TransmitData));
 8005d62:	4907      	ldr	r1, [pc, #28]	; (8005d80 <USART_StartIT+0x30>)
 8005d64:	4807      	ldr	r0, [pc, #28]	; (8005d84 <USART_StartIT+0x34>)
 8005d66:	2237      	movs	r2, #55	; 0x37
 8005d68:	f7fc b91a 	b.w	8001fa0 <HAL_UART_Transmit_IT>
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2,Uart2ReceiveData,sizeof(Uart2ReceiveData));
 8005d6c:	4906      	ldr	r1, [pc, #24]	; (8005d88 <USART_StartIT+0x38>)
 8005d6e:	4805      	ldr	r0, [pc, #20]	; (8005d84 <USART_StartIT+0x34>)
 8005d70:	2237      	movs	r2, #55	; 0x37
 8005d72:	f7fc b963 	b.w	800203c <HAL_UARTEx_ReceiveToIdle_IT>
	  HAL_UART_Receive_IT(&huart2,Uart2ReceiveData,sizeof(Uart2ReceiveData));
 8005d76:	4904      	ldr	r1, [pc, #16]	; (8005d88 <USART_StartIT+0x38>)
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <USART_StartIT+0x34>)
 8005d7a:	2237      	movs	r2, #55	; 0x37
 8005d7c:	f7fc b932 	b.w	8001fe4 <HAL_UART_Receive_IT>
 8005d80:	20001844 	.word	0x20001844
 8005d84:	20001880 	.word	0x20001880
 8005d88:	2000180c 	.word	0x2000180c

08005d8c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{

  HAL_UART_IRQHandler(&huart2);
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <USART2_IRQHandler+0x8>)
 8005d8e:	f7fc ba11 	b.w	80021b4 <HAL_UART_IRQHandler>
 8005d92:	bf00      	nop
 8005d94:	20001880 	.word	0x20001880

08005d98 <USB_DeviceInit>:
#include "usbd_desc.h"

USB_OTG_CORE_HANDLE  USB_OTG_dev;

void USB_DeviceInit(void)
{
 8005d98:	b500      	push	{lr}
 8005d9a:	b083      	sub	sp, #12
  USBD_Init(&USB_OTG_dev, USB_OTG_HS_CORE_ID, &USR_desc, &USBD_UVC_CDC_ClassDriver, &USR_cb);
 8005d9c:	4905      	ldr	r1, [pc, #20]	; (8005db4 <USB_DeviceInit+0x1c>)
 8005d9e:	9100      	str	r1, [sp, #0]
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <USB_DeviceInit+0x20>)
 8005da2:	4a06      	ldr	r2, [pc, #24]	; (8005dbc <USB_DeviceInit+0x24>)
 8005da4:	4806      	ldr	r0, [pc, #24]	; (8005dc0 <USB_DeviceInit+0x28>)
 8005da6:	2101      	movs	r1, #1
 8005da8:	f7fe fdfc 	bl	80049a4 <USBD_Init>
}
 8005dac:	b003      	add	sp, #12
 8005dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005db2:	bf00      	nop
 8005db4:	20000388 	.word	0x20000388
 8005db8:	20000180 	.word	0x20000180
 8005dbc:	2000036c 	.word	0x2000036c
 8005dc0:	200018c4 	.word	0x200018c4

08005dc4 <memset>:
 8005dc4:	4402      	add	r2, r0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4d0d      	ldr	r5, [pc, #52]	; (8005e0c <__libc_init_array+0x38>)
 8005dd8:	4c0d      	ldr	r4, [pc, #52]	; (8005e10 <__libc_init_array+0x3c>)
 8005dda:	1b64      	subs	r4, r4, r5
 8005ddc:	10a4      	asrs	r4, r4, #2
 8005dde:	2600      	movs	r6, #0
 8005de0:	42a6      	cmp	r6, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	4d0b      	ldr	r5, [pc, #44]	; (8005e14 <__libc_init_array+0x40>)
 8005de6:	4c0c      	ldr	r4, [pc, #48]	; (8005e18 <__libc_init_array+0x44>)
 8005de8:	f000 f826 	bl	8005e38 <_init>
 8005dec:	1b64      	subs	r4, r4, r5
 8005dee:	10a4      	asrs	r4, r4, #2
 8005df0:	2600      	movs	r6, #0
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfc:	4798      	blx	r3
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e06:	4798      	blx	r3
 8005e08:	3601      	adds	r6, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	08005f74 	.word	0x08005f74
 8005e10:	08005f74 	.word	0x08005f74
 8005e14:	08005f74 	.word	0x08005f74
 8005e18:	08005f78 	.word	0x08005f78

08005e1c <memcpy>:
 8005e1c:	440a      	add	r2, r1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e24:	d100      	bne.n	8005e28 <memcpy+0xc>
 8005e26:	4770      	bx	lr
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e32:	4291      	cmp	r1, r2
 8005e34:	d1f9      	bne.n	8005e2a <memcpy+0xe>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
